// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: inner/grpc/services/ios_device_controller_service.proto

package services

import (
	context "context"
	params "go-device-controller/types/protocol/generated/proto/inner/params"
	types "go-device-controller/types/protocol/generated/proto/inner/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IosDeviceControllerServiceClient is the client API for IosDeviceControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IosDeviceControllerServiceClient interface {
	Call(ctx context.Context, in *params.DcIdcParam, opts ...grpc.CallOption) (*params.DcIdcResult, error)
	StartStreaming(ctx context.Context, in *types.DcIdcStartStreamingParam, opts ...grpc.CallOption) (IosDeviceControllerService_StartStreamingClient, error)
}

type iosDeviceControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIosDeviceControllerServiceClient(cc grpc.ClientConnInterface) IosDeviceControllerServiceClient {
	return &iosDeviceControllerServiceClient{cc}
}

func (c *iosDeviceControllerServiceClient) Call(ctx context.Context, in *params.DcIdcParam, opts ...grpc.CallOption) (*params.DcIdcResult, error) {
	out := new(params.DcIdcResult)
	err := c.cc.Invoke(ctx, "/inner.grpc.services.IosDeviceControllerService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iosDeviceControllerServiceClient) StartStreaming(ctx context.Context, in *types.DcIdcStartStreamingParam, opts ...grpc.CallOption) (IosDeviceControllerService_StartStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &IosDeviceControllerService_ServiceDesc.Streams[0], "/inner.grpc.services.IosDeviceControllerService/StartStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &iosDeviceControllerServiceStartStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IosDeviceControllerService_StartStreamingClient interface {
	Recv() (*types.DcIdcStartStreamingResult, error)
	grpc.ClientStream
}

type iosDeviceControllerServiceStartStreamingClient struct {
	grpc.ClientStream
}

func (x *iosDeviceControllerServiceStartStreamingClient) Recv() (*types.DcIdcStartStreamingResult, error) {
	m := new(types.DcIdcStartStreamingResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IosDeviceControllerServiceServer is the server API for IosDeviceControllerService service.
// All implementations must embed UnimplementedIosDeviceControllerServiceServer
// for forward compatibility
type IosDeviceControllerServiceServer interface {
	Call(context.Context, *params.DcIdcParam) (*params.DcIdcResult, error)
	StartStreaming(*types.DcIdcStartStreamingParam, IosDeviceControllerService_StartStreamingServer) error
	mustEmbedUnimplementedIosDeviceControllerServiceServer()
}

// UnimplementedIosDeviceControllerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIosDeviceControllerServiceServer struct {
}

func (UnimplementedIosDeviceControllerServiceServer) Call(context.Context, *params.DcIdcParam) (*params.DcIdcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedIosDeviceControllerServiceServer) StartStreaming(*types.DcIdcStartStreamingParam, IosDeviceControllerService_StartStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method StartStreaming not implemented")
}
func (UnimplementedIosDeviceControllerServiceServer) mustEmbedUnimplementedIosDeviceControllerServiceServer() {
}

// UnsafeIosDeviceControllerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IosDeviceControllerServiceServer will
// result in compilation errors.
type UnsafeIosDeviceControllerServiceServer interface {
	mustEmbedUnimplementedIosDeviceControllerServiceServer()
}

func RegisterIosDeviceControllerServiceServer(s grpc.ServiceRegistrar, srv IosDeviceControllerServiceServer) {
	s.RegisterService(&IosDeviceControllerService_ServiceDesc, srv)
}

func _IosDeviceControllerService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(params.DcIdcParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IosDeviceControllerServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inner.grpc.services.IosDeviceControllerService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IosDeviceControllerServiceServer).Call(ctx, req.(*params.DcIdcParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _IosDeviceControllerService_StartStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(types.DcIdcStartStreamingParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IosDeviceControllerServiceServer).StartStreaming(m, &iosDeviceControllerServiceStartStreamingServer{stream})
}

type IosDeviceControllerService_StartStreamingServer interface {
	Send(*types.DcIdcStartStreamingResult) error
	grpc.ServerStream
}

type iosDeviceControllerServiceStartStreamingServer struct {
	grpc.ServerStream
}

func (x *iosDeviceControllerServiceStartStreamingServer) Send(m *types.DcIdcStartStreamingResult) error {
	return x.ServerStream.SendMsg(m)
}

// IosDeviceControllerService_ServiceDesc is the grpc.ServiceDesc for IosDeviceControllerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IosDeviceControllerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inner.grpc.services.IosDeviceControllerService",
	HandlerType: (*IosDeviceControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _IosDeviceControllerService_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartStreaming",
			Handler:       _IosDeviceControllerService_StartStreaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "inner/grpc/services/ios_device_controller_service.proto",
}
