// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: inner/grpc/services/go_device_controller_service.proto

package services

import (
	context "context"
	params "go-device-controller/types/protocol/generated/proto/inner/params"
	types "go-device-controller/types/protocol/generated/proto/inner/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoDeviceControllerServiceClient is the client API for GoDeviceControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoDeviceControllerServiceClient interface {
	Call(ctx context.Context, in *params.DcGdcParam, opts ...grpc.CallOption) (*params.DcGdcResult, error)
	StartStreaming(ctx context.Context, in *types.DcGdcStartStreamingParam, opts ...grpc.CallOption) (GoDeviceControllerService_StartStreamingClient, error)
}

type goDeviceControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoDeviceControllerServiceClient(cc grpc.ClientConnInterface) GoDeviceControllerServiceClient {
	return &goDeviceControllerServiceClient{cc}
}

func (c *goDeviceControllerServiceClient) Call(ctx context.Context, in *params.DcGdcParam, opts ...grpc.CallOption) (*params.DcGdcResult, error) {
	out := new(params.DcGdcResult)
	err := c.cc.Invoke(ctx, "/inner.grpc.services.GoDeviceControllerService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goDeviceControllerServiceClient) StartStreaming(ctx context.Context, in *types.DcGdcStartStreamingParam, opts ...grpc.CallOption) (GoDeviceControllerService_StartStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GoDeviceControllerService_ServiceDesc.Streams[0], "/inner.grpc.services.GoDeviceControllerService/StartStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &goDeviceControllerServiceStartStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GoDeviceControllerService_StartStreamingClient interface {
	Recv() (*types.DcGdcStartStreamingResult, error)
	grpc.ClientStream
}

type goDeviceControllerServiceStartStreamingClient struct {
	grpc.ClientStream
}

func (x *goDeviceControllerServiceStartStreamingClient) Recv() (*types.DcGdcStartStreamingResult, error) {
	m := new(types.DcGdcStartStreamingResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GoDeviceControllerServiceServer is the server API for GoDeviceControllerService service.
// All implementations must embed UnimplementedGoDeviceControllerServiceServer
// for forward compatibility
type GoDeviceControllerServiceServer interface {
	Call(context.Context, *params.DcGdcParam) (*params.DcGdcResult, error)
	StartStreaming(*types.DcGdcStartStreamingParam, GoDeviceControllerService_StartStreamingServer) error
	mustEmbedUnimplementedGoDeviceControllerServiceServer()
}

// UnimplementedGoDeviceControllerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoDeviceControllerServiceServer struct {
}

func (UnimplementedGoDeviceControllerServiceServer) Call(context.Context, *params.DcGdcParam) (*params.DcGdcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedGoDeviceControllerServiceServer) StartStreaming(*types.DcGdcStartStreamingParam, GoDeviceControllerService_StartStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method StartStreaming not implemented")
}
func (UnimplementedGoDeviceControllerServiceServer) mustEmbedUnimplementedGoDeviceControllerServiceServer() {
}

// UnsafeGoDeviceControllerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoDeviceControllerServiceServer will
// result in compilation errors.
type UnsafeGoDeviceControllerServiceServer interface {
	mustEmbedUnimplementedGoDeviceControllerServiceServer()
}

func RegisterGoDeviceControllerServiceServer(s grpc.ServiceRegistrar, srv GoDeviceControllerServiceServer) {
	s.RegisterService(&GoDeviceControllerService_ServiceDesc, srv)
}

func _GoDeviceControllerService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(params.DcGdcParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoDeviceControllerServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inner.grpc.services.GoDeviceControllerService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoDeviceControllerServiceServer).Call(ctx, req.(*params.DcGdcParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoDeviceControllerService_StartStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(types.DcGdcStartStreamingParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoDeviceControllerServiceServer).StartStreaming(m, &goDeviceControllerServiceStartStreamingServer{stream})
}

type GoDeviceControllerService_StartStreamingServer interface {
	Send(*types.DcGdcStartStreamingResult) error
	grpc.ServerStream
}

type goDeviceControllerServiceStartStreamingServer struct {
	grpc.ServerStream
}

func (x *goDeviceControllerServiceStartStreamingServer) Send(m *types.DcGdcStartStreamingResult) error {
	return x.ServerStream.SendMsg(m)
}

// GoDeviceControllerService_ServiceDesc is the grpc.ServiceDesc for GoDeviceControllerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoDeviceControllerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inner.grpc.services.GoDeviceControllerService",
	HandlerType: (*GoDeviceControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _GoDeviceControllerService_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartStreaming",
			Handler:       _GoDeviceControllerService_StartStreaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "inner/grpc/services/go_device_controller_service.proto",
}
