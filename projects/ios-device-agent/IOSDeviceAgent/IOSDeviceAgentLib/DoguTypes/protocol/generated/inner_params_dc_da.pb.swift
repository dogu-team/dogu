// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: inner/params/dc_da.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Inner_Params_DcDaParam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var seq: UInt32 = 0

  public var value: Inner_Params_DcDaParam.OneOf_Value? = nil

  public var dcDaConnectionParam: Inner_Types_DcDaConnectionParam {
    get {
      if case .dcDaConnectionParam(let v)? = value {return v}
      return Inner_Types_DcDaConnectionParam()
    }
    set {value = .dcDaConnectionParam(newValue)}
  }

  public var dcDaQueryProfileParam: Inner_Types_DcDaQueryProfileParam {
    get {
      if case .dcDaQueryProfileParam(let v)? = value {return v}
      return Inner_Types_DcDaQueryProfileParam()
    }
    set {value = .dcDaQueryProfileParam(newValue)}
  }

  public var dcDaApplyStreamingOptionParam: Inner_Types_DcDaApplyStreamingOptionParam {
    get {
      if case .dcDaApplyStreamingOptionParam(let v)? = value {return v}
      return Inner_Types_DcDaApplyStreamingOptionParam()
    }
    set {value = .dcDaApplyStreamingOptionParam(newValue)}
  }

  public var dcDaControlParam: Inner_Types_DcDaControlParam {
    get {
      if case .dcDaControlParam(let v)? = value {return v}
      return Inner_Types_DcDaControlParam()
    }
    set {value = .dcDaControlParam(newValue)}
  }

  public var dcDaGetFoldableStateParam: Inner_Types_DcDaGetFoldableStateParam {
    get {
      if case .dcDaGetFoldableStateParam(let v)? = value {return v}
      return Inner_Types_DcDaGetFoldableStateParam()
    }
    set {value = .dcDaGetFoldableStateParam(newValue)}
  }

  public var dcDaSetFoldableStateParam: Inner_Types_DcDaSetFoldableStateParam {
    get {
      if case .dcDaSetFoldableStateParam(let v)? = value {return v}
      return Inner_Types_DcDaSetFoldableStateParam()
    }
    set {value = .dcDaSetFoldableStateParam(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Value: Equatable {
    case dcDaConnectionParam(Inner_Types_DcDaConnectionParam)
    case dcDaQueryProfileParam(Inner_Types_DcDaQueryProfileParam)
    case dcDaApplyStreamingOptionParam(Inner_Types_DcDaApplyStreamingOptionParam)
    case dcDaControlParam(Inner_Types_DcDaControlParam)
    case dcDaGetFoldableStateParam(Inner_Types_DcDaGetFoldableStateParam)
    case dcDaSetFoldableStateParam(Inner_Types_DcDaSetFoldableStateParam)

  #if !swift(>=4.1)
    public static func ==(lhs: Inner_Params_DcDaParam.OneOf_Value, rhs: Inner_Params_DcDaParam.OneOf_Value) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.dcDaConnectionParam, .dcDaConnectionParam): return {
        guard case .dcDaConnectionParam(let l) = lhs, case .dcDaConnectionParam(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcDaQueryProfileParam, .dcDaQueryProfileParam): return {
        guard case .dcDaQueryProfileParam(let l) = lhs, case .dcDaQueryProfileParam(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcDaApplyStreamingOptionParam, .dcDaApplyStreamingOptionParam): return {
        guard case .dcDaApplyStreamingOptionParam(let l) = lhs, case .dcDaApplyStreamingOptionParam(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcDaControlParam, .dcDaControlParam): return {
        guard case .dcDaControlParam(let l) = lhs, case .dcDaControlParam(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcDaGetFoldableStateParam, .dcDaGetFoldableStateParam): return {
        guard case .dcDaGetFoldableStateParam(let l) = lhs, case .dcDaGetFoldableStateParam(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcDaSetFoldableStateParam, .dcDaSetFoldableStateParam): return {
        guard case .dcDaSetFoldableStateParam(let l) = lhs, case .dcDaSetFoldableStateParam(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Inner_Params_DcDaReturn {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var seq: UInt32 = 0

  public var value: Inner_Params_DcDaReturn.OneOf_Value? = nil

  public var dcDaConnectionReturn: Inner_Types_DcDaConnectionReturn {
    get {
      if case .dcDaConnectionReturn(let v)? = value {return v}
      return Inner_Types_DcDaConnectionReturn()
    }
    set {value = .dcDaConnectionReturn(newValue)}
  }

  public var dcDaQueryProfileReturn: Inner_Types_DcDaQueryProfileReturn {
    get {
      if case .dcDaQueryProfileReturn(let v)? = value {return v}
      return Inner_Types_DcDaQueryProfileReturn()
    }
    set {value = .dcDaQueryProfileReturn(newValue)}
  }

  public var dcDaApplyStreamingOptionReturn: Inner_Types_DcDaApplyStreamingOptionReturn {
    get {
      if case .dcDaApplyStreamingOptionReturn(let v)? = value {return v}
      return Inner_Types_DcDaApplyStreamingOptionReturn()
    }
    set {value = .dcDaApplyStreamingOptionReturn(newValue)}
  }

  public var dcDaControlReturn: Inner_Types_DcDaControlReturn {
    get {
      if case .dcDaControlReturn(let v)? = value {return v}
      return Inner_Types_DcDaControlReturn()
    }
    set {value = .dcDaControlReturn(newValue)}
  }

  public var dcDaGetFoldableStateReturn: Inner_Types_DcDaGetFoldableStateReturn {
    get {
      if case .dcDaGetFoldableStateReturn(let v)? = value {return v}
      return Inner_Types_DcDaGetFoldableStateReturn()
    }
    set {value = .dcDaGetFoldableStateReturn(newValue)}
  }

  public var dcDaSetFoldableStateReturn: Inner_Types_DcDaSetFoldableStateReturn {
    get {
      if case .dcDaSetFoldableStateReturn(let v)? = value {return v}
      return Inner_Types_DcDaSetFoldableStateReturn()
    }
    set {value = .dcDaSetFoldableStateReturn(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Value: Equatable {
    case dcDaConnectionReturn(Inner_Types_DcDaConnectionReturn)
    case dcDaQueryProfileReturn(Inner_Types_DcDaQueryProfileReturn)
    case dcDaApplyStreamingOptionReturn(Inner_Types_DcDaApplyStreamingOptionReturn)
    case dcDaControlReturn(Inner_Types_DcDaControlReturn)
    case dcDaGetFoldableStateReturn(Inner_Types_DcDaGetFoldableStateReturn)
    case dcDaSetFoldableStateReturn(Inner_Types_DcDaSetFoldableStateReturn)

  #if !swift(>=4.1)
    public static func ==(lhs: Inner_Params_DcDaReturn.OneOf_Value, rhs: Inner_Params_DcDaReturn.OneOf_Value) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.dcDaConnectionReturn, .dcDaConnectionReturn): return {
        guard case .dcDaConnectionReturn(let l) = lhs, case .dcDaConnectionReturn(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcDaQueryProfileReturn, .dcDaQueryProfileReturn): return {
        guard case .dcDaQueryProfileReturn(let l) = lhs, case .dcDaQueryProfileReturn(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcDaApplyStreamingOptionReturn, .dcDaApplyStreamingOptionReturn): return {
        guard case .dcDaApplyStreamingOptionReturn(let l) = lhs, case .dcDaApplyStreamingOptionReturn(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcDaControlReturn, .dcDaControlReturn): return {
        guard case .dcDaControlReturn(let l) = lhs, case .dcDaControlReturn(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcDaGetFoldableStateReturn, .dcDaGetFoldableStateReturn): return {
        guard case .dcDaGetFoldableStateReturn(let l) = lhs, case .dcDaGetFoldableStateReturn(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcDaSetFoldableStateReturn, .dcDaSetFoldableStateReturn): return {
        guard case .dcDaSetFoldableStateReturn(let l) = lhs, case .dcDaSetFoldableStateReturn(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Inner_Params_DcDaParam: @unchecked Sendable {}
extension Inner_Params_DcDaParam.OneOf_Value: @unchecked Sendable {}
extension Inner_Params_DcDaReturn: @unchecked Sendable {}
extension Inner_Params_DcDaReturn.OneOf_Value: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "inner.params"

extension Inner_Params_DcDaParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DcDaParam"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seq"),
    2: .standard(proto: "dc_da_connection_param"),
    3: .standard(proto: "dc_da_query_profile_param"),
    4: .standard(proto: "dc_da_apply_streaming_option_param"),
    5: .standard(proto: "dc_da_control_param"),
    6: .standard(proto: "dc_da_get_foldable_state_param"),
    7: .standard(proto: "dc_da_set_foldable_state_param"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self.seq) }()
      case 2: try {
        var v: Inner_Types_DcDaConnectionParam?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcDaConnectionParam(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcDaConnectionParam(v)
        }
      }()
      case 3: try {
        var v: Inner_Types_DcDaQueryProfileParam?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcDaQueryProfileParam(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcDaQueryProfileParam(v)
        }
      }()
      case 4: try {
        var v: Inner_Types_DcDaApplyStreamingOptionParam?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcDaApplyStreamingOptionParam(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcDaApplyStreamingOptionParam(v)
        }
      }()
      case 5: try {
        var v: Inner_Types_DcDaControlParam?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcDaControlParam(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcDaControlParam(v)
        }
      }()
      case 6: try {
        var v: Inner_Types_DcDaGetFoldableStateParam?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcDaGetFoldableStateParam(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcDaGetFoldableStateParam(v)
        }
      }()
      case 7: try {
        var v: Inner_Types_DcDaSetFoldableStateParam?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcDaSetFoldableStateParam(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcDaSetFoldableStateParam(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.seq != 0 {
      try visitor.visitSingularFixed32Field(value: self.seq, fieldNumber: 1)
    }
    switch self.value {
    case .dcDaConnectionParam?: try {
      guard case .dcDaConnectionParam(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .dcDaQueryProfileParam?: try {
      guard case .dcDaQueryProfileParam(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .dcDaApplyStreamingOptionParam?: try {
      guard case .dcDaApplyStreamingOptionParam(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .dcDaControlParam?: try {
      guard case .dcDaControlParam(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .dcDaGetFoldableStateParam?: try {
      guard case .dcDaGetFoldableStateParam(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .dcDaSetFoldableStateParam?: try {
      guard case .dcDaSetFoldableStateParam(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Inner_Params_DcDaParam, rhs: Inner_Params_DcDaParam) -> Bool {
    if lhs.seq != rhs.seq {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Inner_Params_DcDaReturn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DcDaReturn"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seq"),
    2: .standard(proto: "dc_da_connection_return"),
    3: .standard(proto: "dc_da_query_profile_return"),
    4: .standard(proto: "dc_da_apply_streaming_option_return"),
    5: .standard(proto: "dc_da_control_return"),
    6: .standard(proto: "dc_da_get_foldable_state_return"),
    7: .standard(proto: "dc_da_set_foldable_state_return"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self.seq) }()
      case 2: try {
        var v: Inner_Types_DcDaConnectionReturn?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcDaConnectionReturn(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcDaConnectionReturn(v)
        }
      }()
      case 3: try {
        var v: Inner_Types_DcDaQueryProfileReturn?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcDaQueryProfileReturn(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcDaQueryProfileReturn(v)
        }
      }()
      case 4: try {
        var v: Inner_Types_DcDaApplyStreamingOptionReturn?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcDaApplyStreamingOptionReturn(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcDaApplyStreamingOptionReturn(v)
        }
      }()
      case 5: try {
        var v: Inner_Types_DcDaControlReturn?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcDaControlReturn(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcDaControlReturn(v)
        }
      }()
      case 6: try {
        var v: Inner_Types_DcDaGetFoldableStateReturn?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcDaGetFoldableStateReturn(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcDaGetFoldableStateReturn(v)
        }
      }()
      case 7: try {
        var v: Inner_Types_DcDaSetFoldableStateReturn?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcDaSetFoldableStateReturn(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcDaSetFoldableStateReturn(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.seq != 0 {
      try visitor.visitSingularFixed32Field(value: self.seq, fieldNumber: 1)
    }
    switch self.value {
    case .dcDaConnectionReturn?: try {
      guard case .dcDaConnectionReturn(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .dcDaQueryProfileReturn?: try {
      guard case .dcDaQueryProfileReturn(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .dcDaApplyStreamingOptionReturn?: try {
      guard case .dcDaApplyStreamingOptionReturn(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .dcDaControlReturn?: try {
      guard case .dcDaControlReturn(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .dcDaGetFoldableStateReturn?: try {
      guard case .dcDaGetFoldableStateReturn(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .dcDaSetFoldableStateReturn?: try {
      guard case .dcDaSetFoldableStateReturn(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Inner_Params_DcDaReturn, rhs: Inner_Params_DcDaReturn) -> Bool {
    if lhs.seq != rhs.seq {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
