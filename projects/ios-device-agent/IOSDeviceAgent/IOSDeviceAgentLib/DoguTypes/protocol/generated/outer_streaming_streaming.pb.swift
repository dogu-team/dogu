// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: outer/streaming/streaming.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Outer_Streaming_StreamingOption {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var screen: Outer_Streaming_ScreenCaptureOption {
    get {return _screen ?? Outer_Streaming_ScreenCaptureOption()}
    set {_screen = newValue}
  }
  /// Returns true if `screen` has been explicitly set.
  public var hasScreen: Bool {return self._screen != nil}
  /// Clears the value of `screen`. Subsequent reads from it will return its default value.
  public mutating func clearScreen() {self._screen = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _screen: Outer_Streaming_ScreenCaptureOption? = nil
}

public struct Outer_Streaming_StartStreaming {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var peerDescription: Outer_Streaming_ProtoRTCPeerDescription {
    get {return _peerDescription ?? Outer_Streaming_ProtoRTCPeerDescription()}
    set {_peerDescription = newValue}
  }
  /// Returns true if `peerDescription` has been explicitly set.
  public var hasPeerDescription: Bool {return self._peerDescription != nil}
  /// Clears the value of `peerDescription`. Subsequent reads from it will return its default value.
  public mutating func clearPeerDescription() {self._peerDescription = nil}

  public var option: Outer_Streaming_StreamingOption {
    get {return _option ?? Outer_Streaming_StreamingOption()}
    set {_option = newValue}
  }
  /// Returns true if `option` has been explicitly set.
  public var hasOption: Bool {return self._option != nil}
  /// Clears the value of `option`. Subsequent reads from it will return its default value.
  public mutating func clearOption() {self._option = nil}

  public var turnServerURL: String = String()

  public var turnServerUsername: String = String()

  public var turnServerPassword: String = String()

  public var platform: Outer_Platform = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _peerDescription: Outer_Streaming_ProtoRTCPeerDescription? = nil
  fileprivate var _option: Outer_Streaming_StreamingOption? = nil
}

public struct Outer_Streaming_StreamingOffer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var serial: String = String()

  public var value: Outer_Streaming_StreamingOffer.OneOf_Value? = nil

  public var startStreaming: Outer_Streaming_StartStreaming {
    get {
      if case .startStreaming(let v)? = value {return v}
      return Outer_Streaming_StartStreaming()
    }
    set {value = .startStreaming(newValue)}
  }

  public var iceCandidate: Outer_Streaming_ProtoRTCIceCandidateInit {
    get {
      if case .iceCandidate(let v)? = value {return v}
      return Outer_Streaming_ProtoRTCIceCandidateInit()
    }
    set {value = .iceCandidate(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Value: Equatable {
    case startStreaming(Outer_Streaming_StartStreaming)
    case iceCandidate(Outer_Streaming_ProtoRTCIceCandidateInit)

  #if !swift(>=4.1)
    public static func ==(lhs: Outer_Streaming_StreamingOffer.OneOf_Value, rhs: Outer_Streaming_StreamingOffer.OneOf_Value) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.startStreaming, .startStreaming): return {
        guard case .startStreaming(let l) = lhs, case .startStreaming(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.iceCandidate, .iceCandidate): return {
        guard case .iceCandidate(let l) = lhs, case .iceCandidate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Outer_Streaming_StreamingAnswer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: Outer_Streaming_StreamingAnswer.OneOf_Value? = nil

  public var peerDescription: Outer_Streaming_ProtoRTCPeerDescription {
    get {
      if case .peerDescription(let v)? = value {return v}
      return Outer_Streaming_ProtoRTCPeerDescription()
    }
    set {value = .peerDescription(newValue)}
  }

  public var iceCandidate: Outer_Streaming_ProtoRTCIceCandidateInit {
    get {
      if case .iceCandidate(let v)? = value {return v}
      return Outer_Streaming_ProtoRTCIceCandidateInit()
    }
    set {value = .iceCandidate(newValue)}
  }

  public var errorResult: Outer_ErrorResult {
    get {
      if case .errorResult(let v)? = value {return v}
      return Outer_ErrorResult()
    }
    set {value = .errorResult(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Value: Equatable {
    case peerDescription(Outer_Streaming_ProtoRTCPeerDescription)
    case iceCandidate(Outer_Streaming_ProtoRTCIceCandidateInit)
    case errorResult(Outer_ErrorResult)

  #if !swift(>=4.1)
    public static func ==(lhs: Outer_Streaming_StreamingAnswer.OneOf_Value, rhs: Outer_Streaming_StreamingAnswer.OneOf_Value) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.peerDescription, .peerDescription): return {
        guard case .peerDescription(let l) = lhs, case .peerDescription(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.iceCandidate, .iceCandidate): return {
        guard case .iceCandidate(let l) = lhs, case .iceCandidate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.errorResult, .errorResult): return {
        guard case .errorResult(let l) = lhs, case .errorResult(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Outer_Streaming_StreamingOption: @unchecked Sendable {}
extension Outer_Streaming_StartStreaming: @unchecked Sendable {}
extension Outer_Streaming_StreamingOffer: @unchecked Sendable {}
extension Outer_Streaming_StreamingOffer.OneOf_Value: @unchecked Sendable {}
extension Outer_Streaming_StreamingAnswer: @unchecked Sendable {}
extension Outer_Streaming_StreamingAnswer.OneOf_Value: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "outer.streaming"

extension Outer_Streaming_StreamingOption: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingOption"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "screen"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._screen) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._screen {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Outer_Streaming_StreamingOption, rhs: Outer_Streaming_StreamingOption) -> Bool {
    if lhs._screen != rhs._screen {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Outer_Streaming_StartStreaming: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StartStreaming"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "peer_description"),
    2: .same(proto: "option"),
    3: .standard(proto: "turn_server_url"),
    4: .standard(proto: "turn_server_username"),
    5: .standard(proto: "turn_server_password"),
    6: .same(proto: "platform"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._peerDescription) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._option) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.turnServerURL) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.turnServerUsername) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.turnServerPassword) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.platform) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._peerDescription {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._option {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.turnServerURL.isEmpty {
      try visitor.visitSingularStringField(value: self.turnServerURL, fieldNumber: 3)
    }
    if !self.turnServerUsername.isEmpty {
      try visitor.visitSingularStringField(value: self.turnServerUsername, fieldNumber: 4)
    }
    if !self.turnServerPassword.isEmpty {
      try visitor.visitSingularStringField(value: self.turnServerPassword, fieldNumber: 5)
    }
    if self.platform != .unspecified {
      try visitor.visitSingularEnumField(value: self.platform, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Outer_Streaming_StartStreaming, rhs: Outer_Streaming_StartStreaming) -> Bool {
    if lhs._peerDescription != rhs._peerDescription {return false}
    if lhs._option != rhs._option {return false}
    if lhs.turnServerURL != rhs.turnServerURL {return false}
    if lhs.turnServerUsername != rhs.turnServerUsername {return false}
    if lhs.turnServerPassword != rhs.turnServerPassword {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Outer_Streaming_StreamingOffer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingOffer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "serial"),
    2: .standard(proto: "start_streaming"),
    3: .standard(proto: "ice_candidate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.serial) }()
      case 2: try {
        var v: Outer_Streaming_StartStreaming?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .startStreaming(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .startStreaming(v)
        }
      }()
      case 3: try {
        var v: Outer_Streaming_ProtoRTCIceCandidateInit?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .iceCandidate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .iceCandidate(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.serial.isEmpty {
      try visitor.visitSingularStringField(value: self.serial, fieldNumber: 1)
    }
    switch self.value {
    case .startStreaming?: try {
      guard case .startStreaming(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .iceCandidate?: try {
      guard case .iceCandidate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Outer_Streaming_StreamingOffer, rhs: Outer_Streaming_StreamingOffer) -> Bool {
    if lhs.serial != rhs.serial {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Outer_Streaming_StreamingAnswer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingAnswer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "peer_description"),
    2: .standard(proto: "ice_candidate"),
    3: .standard(proto: "error_result"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Outer_Streaming_ProtoRTCPeerDescription?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .peerDescription(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .peerDescription(v)
        }
      }()
      case 2: try {
        var v: Outer_Streaming_ProtoRTCIceCandidateInit?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .iceCandidate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .iceCandidate(v)
        }
      }()
      case 3: try {
        var v: Outer_ErrorResult?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .errorResult(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .errorResult(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.value {
    case .peerDescription?: try {
      guard case .peerDescription(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .iceCandidate?: try {
      guard case .iceCandidate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .errorResult?: try {
      guard case .errorResult(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Outer_Streaming_StreamingAnswer, rhs: Outer_Streaming_StreamingAnswer) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
