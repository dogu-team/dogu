// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: inner/params/dc_ida.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Inner_Params_DcIdaParam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var seq: UInt32 = 0

  public var value: Inner_Params_DcIdaParam.OneOf_Value? = nil

  public var dcIdaRunappParam: Inner_Types_DcIdaRunAppParam {
    get {
      if case .dcIdaRunappParam(let v)? = value {return v}
      return Inner_Types_DcIdaRunAppParam()
    }
    set {value = .dcIdaRunappParam(newValue)}
  }

  public var dcIdaGetSystemInfoParam: Inner_Types_DcIdaGetSystemInfoParam {
    get {
      if case .dcIdaGetSystemInfoParam(let v)? = value {return v}
      return Inner_Types_DcIdaGetSystemInfoParam()
    }
    set {value = .dcIdaGetSystemInfoParam(newValue)}
  }

  public var dcIdaIsPortListeningParam: Inner_Types_DcIdaIsPortListeningParam {
    get {
      if case .dcIdaIsPortListeningParam(let v)? = value {return v}
      return Inner_Types_DcIdaIsPortListeningParam()
    }
    set {value = .dcIdaIsPortListeningParam(newValue)}
  }

  public var dcIdaQueryProfileParam: Inner_Types_DcIdaQueryProfileParam {
    get {
      if case .dcIdaQueryProfileParam(let v)? = value {return v}
      return Inner_Types_DcIdaQueryProfileParam()
    }
    set {value = .dcIdaQueryProfileParam(newValue)}
  }

  public var dcGdcDaControlParam: Inner_Types_CfGdcDaControlParam {
    get {
      if case .dcGdcDaControlParam(let v)? = value {return v}
      return Inner_Types_CfGdcDaControlParam()
    }
    set {value = .dcGdcDaControlParam(newValue)}
  }

  public var dcIdaSwitchInputBlockParam: Inner_Types_DcIdaSwitchInputBlockParam {
    get {
      if case .dcIdaSwitchInputBlockParam(let v)? = value {return v}
      return Inner_Types_DcIdaSwitchInputBlockParam()
    }
    set {value = .dcIdaSwitchInputBlockParam(newValue)}
  }

  public var dcIdaQueryAlertParam: Inner_Types_DcIdaQueryAlertParam {
    get {
      if case .dcIdaQueryAlertParam(let v)? = value {return v}
      return Inner_Types_DcIdaQueryAlertParam()
    }
    set {value = .dcIdaQueryAlertParam(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Value: Equatable {
    case dcIdaRunappParam(Inner_Types_DcIdaRunAppParam)
    case dcIdaGetSystemInfoParam(Inner_Types_DcIdaGetSystemInfoParam)
    case dcIdaIsPortListeningParam(Inner_Types_DcIdaIsPortListeningParam)
    case dcIdaQueryProfileParam(Inner_Types_DcIdaQueryProfileParam)
    case dcGdcDaControlParam(Inner_Types_CfGdcDaControlParam)
    case dcIdaSwitchInputBlockParam(Inner_Types_DcIdaSwitchInputBlockParam)
    case dcIdaQueryAlertParam(Inner_Types_DcIdaQueryAlertParam)

  #if !swift(>=4.1)
    public static func ==(lhs: Inner_Params_DcIdaParam.OneOf_Value, rhs: Inner_Params_DcIdaParam.OneOf_Value) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.dcIdaRunappParam, .dcIdaRunappParam): return {
        guard case .dcIdaRunappParam(let l) = lhs, case .dcIdaRunappParam(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcIdaGetSystemInfoParam, .dcIdaGetSystemInfoParam): return {
        guard case .dcIdaGetSystemInfoParam(let l) = lhs, case .dcIdaGetSystemInfoParam(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcIdaIsPortListeningParam, .dcIdaIsPortListeningParam): return {
        guard case .dcIdaIsPortListeningParam(let l) = lhs, case .dcIdaIsPortListeningParam(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcIdaQueryProfileParam, .dcIdaQueryProfileParam): return {
        guard case .dcIdaQueryProfileParam(let l) = lhs, case .dcIdaQueryProfileParam(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcGdcDaControlParam, .dcGdcDaControlParam): return {
        guard case .dcGdcDaControlParam(let l) = lhs, case .dcGdcDaControlParam(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcIdaSwitchInputBlockParam, .dcIdaSwitchInputBlockParam): return {
        guard case .dcIdaSwitchInputBlockParam(let l) = lhs, case .dcIdaSwitchInputBlockParam(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcIdaQueryAlertParam, .dcIdaQueryAlertParam): return {
        guard case .dcIdaQueryAlertParam(let l) = lhs, case .dcIdaQueryAlertParam(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Inner_Params_DcIdaResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var seq: UInt32 = 0

  public var error: Outer_ErrorResult {
    get {return _error ?? Outer_ErrorResult()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {self._error = nil}

  public var value: Inner_Params_DcIdaResult.OneOf_Value? = nil

  public var dcIdaRunappResult: Inner_Types_DcIdaRunAppResult {
    get {
      if case .dcIdaRunappResult(let v)? = value {return v}
      return Inner_Types_DcIdaRunAppResult()
    }
    set {value = .dcIdaRunappResult(newValue)}
  }

  public var dcIdaGetSystemInfoResult: Inner_Types_DcIdaGetSystemInfoResult {
    get {
      if case .dcIdaGetSystemInfoResult(let v)? = value {return v}
      return Inner_Types_DcIdaGetSystemInfoResult()
    }
    set {value = .dcIdaGetSystemInfoResult(newValue)}
  }

  public var dcIdaIsPortListeningResult: Inner_Types_DcIdaIsPortListeningResult {
    get {
      if case .dcIdaIsPortListeningResult(let v)? = value {return v}
      return Inner_Types_DcIdaIsPortListeningResult()
    }
    set {value = .dcIdaIsPortListeningResult(newValue)}
  }

  public var dcIdaQueryProfileResult: Inner_Types_DcIdaQueryProfileResult {
    get {
      if case .dcIdaQueryProfileResult(let v)? = value {return v}
      return Inner_Types_DcIdaQueryProfileResult()
    }
    set {value = .dcIdaQueryProfileResult(newValue)}
  }

  public var dcGdcDaControlResult: Inner_Types_CfGdcDaControlResult {
    get {
      if case .dcGdcDaControlResult(let v)? = value {return v}
      return Inner_Types_CfGdcDaControlResult()
    }
    set {value = .dcGdcDaControlResult(newValue)}
  }

  public var dcIdaSwitchInputBlockResult: Inner_Types_DcIdaSwitchInputBlockResult {
    get {
      if case .dcIdaSwitchInputBlockResult(let v)? = value {return v}
      return Inner_Types_DcIdaSwitchInputBlockResult()
    }
    set {value = .dcIdaSwitchInputBlockResult(newValue)}
  }

  public var dcIdaQueryAlertResult: Inner_Types_DcIdaQueryAlertResult {
    get {
      if case .dcIdaQueryAlertResult(let v)? = value {return v}
      return Inner_Types_DcIdaQueryAlertResult()
    }
    set {value = .dcIdaQueryAlertResult(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Value: Equatable {
    case dcIdaRunappResult(Inner_Types_DcIdaRunAppResult)
    case dcIdaGetSystemInfoResult(Inner_Types_DcIdaGetSystemInfoResult)
    case dcIdaIsPortListeningResult(Inner_Types_DcIdaIsPortListeningResult)
    case dcIdaQueryProfileResult(Inner_Types_DcIdaQueryProfileResult)
    case dcGdcDaControlResult(Inner_Types_CfGdcDaControlResult)
    case dcIdaSwitchInputBlockResult(Inner_Types_DcIdaSwitchInputBlockResult)
    case dcIdaQueryAlertResult(Inner_Types_DcIdaQueryAlertResult)

  #if !swift(>=4.1)
    public static func ==(lhs: Inner_Params_DcIdaResult.OneOf_Value, rhs: Inner_Params_DcIdaResult.OneOf_Value) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.dcIdaRunappResult, .dcIdaRunappResult): return {
        guard case .dcIdaRunappResult(let l) = lhs, case .dcIdaRunappResult(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcIdaGetSystemInfoResult, .dcIdaGetSystemInfoResult): return {
        guard case .dcIdaGetSystemInfoResult(let l) = lhs, case .dcIdaGetSystemInfoResult(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcIdaIsPortListeningResult, .dcIdaIsPortListeningResult): return {
        guard case .dcIdaIsPortListeningResult(let l) = lhs, case .dcIdaIsPortListeningResult(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcIdaQueryProfileResult, .dcIdaQueryProfileResult): return {
        guard case .dcIdaQueryProfileResult(let l) = lhs, case .dcIdaQueryProfileResult(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcGdcDaControlResult, .dcGdcDaControlResult): return {
        guard case .dcGdcDaControlResult(let l) = lhs, case .dcGdcDaControlResult(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcIdaSwitchInputBlockResult, .dcIdaSwitchInputBlockResult): return {
        guard case .dcIdaSwitchInputBlockResult(let l) = lhs, case .dcIdaSwitchInputBlockResult(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcIdaQueryAlertResult, .dcIdaQueryAlertResult): return {
        guard case .dcIdaQueryAlertResult(let l) = lhs, case .dcIdaQueryAlertResult(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _error: Outer_ErrorResult? = nil
}

public struct Inner_Params_DcIdaParamList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var params: [Inner_Params_DcIdaParam] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Inner_Params_DcIdaResultList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var results: [Inner_Params_DcIdaResult] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Inner_Params_DcIdaParam: @unchecked Sendable {}
extension Inner_Params_DcIdaParam.OneOf_Value: @unchecked Sendable {}
extension Inner_Params_DcIdaResult: @unchecked Sendable {}
extension Inner_Params_DcIdaResult.OneOf_Value: @unchecked Sendable {}
extension Inner_Params_DcIdaParamList: @unchecked Sendable {}
extension Inner_Params_DcIdaResultList: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "inner.params"

extension Inner_Params_DcIdaParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DcIdaParam"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seq"),
    10: .standard(proto: "dc_ida_runapp_param"),
    11: .standard(proto: "dc_ida_get_system_info_param"),
    12: .standard(proto: "dc_ida_is_port_listening_param"),
    13: .standard(proto: "dc_ida_query_profile_param"),
    14: .standard(proto: "dc_gdc_da_control_param"),
    15: .standard(proto: "dc_ida_switch_input_block_param"),
    16: .standard(proto: "dc_ida_query_alert_param"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self.seq) }()
      case 10: try {
        var v: Inner_Types_DcIdaRunAppParam?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcIdaRunappParam(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcIdaRunappParam(v)
        }
      }()
      case 11: try {
        var v: Inner_Types_DcIdaGetSystemInfoParam?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcIdaGetSystemInfoParam(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcIdaGetSystemInfoParam(v)
        }
      }()
      case 12: try {
        var v: Inner_Types_DcIdaIsPortListeningParam?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcIdaIsPortListeningParam(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcIdaIsPortListeningParam(v)
        }
      }()
      case 13: try {
        var v: Inner_Types_DcIdaQueryProfileParam?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcIdaQueryProfileParam(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcIdaQueryProfileParam(v)
        }
      }()
      case 14: try {
        var v: Inner_Types_CfGdcDaControlParam?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcGdcDaControlParam(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcGdcDaControlParam(v)
        }
      }()
      case 15: try {
        var v: Inner_Types_DcIdaSwitchInputBlockParam?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcIdaSwitchInputBlockParam(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcIdaSwitchInputBlockParam(v)
        }
      }()
      case 16: try {
        var v: Inner_Types_DcIdaQueryAlertParam?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcIdaQueryAlertParam(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcIdaQueryAlertParam(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.seq != 0 {
      try visitor.visitSingularFixed32Field(value: self.seq, fieldNumber: 1)
    }
    switch self.value {
    case .dcIdaRunappParam?: try {
      guard case .dcIdaRunappParam(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .dcIdaGetSystemInfoParam?: try {
      guard case .dcIdaGetSystemInfoParam(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .dcIdaIsPortListeningParam?: try {
      guard case .dcIdaIsPortListeningParam(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .dcIdaQueryProfileParam?: try {
      guard case .dcIdaQueryProfileParam(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .dcGdcDaControlParam?: try {
      guard case .dcGdcDaControlParam(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .dcIdaSwitchInputBlockParam?: try {
      guard case .dcIdaSwitchInputBlockParam(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .dcIdaQueryAlertParam?: try {
      guard case .dcIdaQueryAlertParam(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Inner_Params_DcIdaParam, rhs: Inner_Params_DcIdaParam) -> Bool {
    if lhs.seq != rhs.seq {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Inner_Params_DcIdaResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DcIdaResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seq"),
    2: .same(proto: "error"),
    10: .standard(proto: "dc_ida_runapp_result"),
    11: .standard(proto: "dc_ida_get_system_info_result"),
    12: .standard(proto: "dc_ida_is_port_listening_result"),
    13: .standard(proto: "dc_ida_query_profile_result"),
    14: .standard(proto: "dc_gdc_da_control_result"),
    15: .standard(proto: "dc_ida_switch_input_block_result"),
    16: .standard(proto: "dc_ida_query_alert_result"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self.seq) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      case 10: try {
        var v: Inner_Types_DcIdaRunAppResult?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcIdaRunappResult(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcIdaRunappResult(v)
        }
      }()
      case 11: try {
        var v: Inner_Types_DcIdaGetSystemInfoResult?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcIdaGetSystemInfoResult(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcIdaGetSystemInfoResult(v)
        }
      }()
      case 12: try {
        var v: Inner_Types_DcIdaIsPortListeningResult?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcIdaIsPortListeningResult(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcIdaIsPortListeningResult(v)
        }
      }()
      case 13: try {
        var v: Inner_Types_DcIdaQueryProfileResult?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcIdaQueryProfileResult(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcIdaQueryProfileResult(v)
        }
      }()
      case 14: try {
        var v: Inner_Types_CfGdcDaControlResult?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcGdcDaControlResult(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcGdcDaControlResult(v)
        }
      }()
      case 15: try {
        var v: Inner_Types_DcIdaSwitchInputBlockResult?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcIdaSwitchInputBlockResult(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcIdaSwitchInputBlockResult(v)
        }
      }()
      case 16: try {
        var v: Inner_Types_DcIdaQueryAlertResult?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcIdaQueryAlertResult(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcIdaQueryAlertResult(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.seq != 0 {
      try visitor.visitSingularFixed32Field(value: self.seq, fieldNumber: 1)
    }
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    switch self.value {
    case .dcIdaRunappResult?: try {
      guard case .dcIdaRunappResult(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .dcIdaGetSystemInfoResult?: try {
      guard case .dcIdaGetSystemInfoResult(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .dcIdaIsPortListeningResult?: try {
      guard case .dcIdaIsPortListeningResult(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .dcIdaQueryProfileResult?: try {
      guard case .dcIdaQueryProfileResult(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .dcGdcDaControlResult?: try {
      guard case .dcGdcDaControlResult(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .dcIdaSwitchInputBlockResult?: try {
      guard case .dcIdaSwitchInputBlockResult(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .dcIdaQueryAlertResult?: try {
      guard case .dcIdaQueryAlertResult(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Inner_Params_DcIdaResult, rhs: Inner_Params_DcIdaResult) -> Bool {
    if lhs.seq != rhs.seq {return false}
    if lhs._error != rhs._error {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Inner_Params_DcIdaParamList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DcIdaParamList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.params) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.params.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.params, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Inner_Params_DcIdaParamList, rhs: Inner_Params_DcIdaParamList) -> Bool {
    if lhs.params != rhs.params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Inner_Params_DcIdaResultList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DcIdaResultList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "results"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.results) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.results.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.results, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Inner_Params_DcIdaResultList, rhs: Inner_Params_DcIdaResultList) -> Bool {
    if lhs.results != rhs.results {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
