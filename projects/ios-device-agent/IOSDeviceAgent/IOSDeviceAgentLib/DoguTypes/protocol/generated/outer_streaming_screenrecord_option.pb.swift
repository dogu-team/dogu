// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: outer/streaming/screenrecord_option.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Outer_Streaming_ScreenRecordOption {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var screen: Outer_Streaming_ScreenCaptureOption {
    get {return _screen ?? Outer_Streaming_ScreenCaptureOption()}
    set {_screen = newValue}
  }
  /// Returns true if `screen` has been explicitly set.
  public var hasScreen: Bool {return self._screen != nil}
  /// Clears the value of `screen`. Subsequent reads from it will return its default value.
  public mutating func clearScreen() {self._screen = nil}

  public var filePath: String = String()

  public var pid: Int32 {
    get {return _pid ?? 0}
    set {_pid = newValue}
  }
  /// Returns true if `pid` has been explicitly set.
  public var hasPid: Bool {return self._pid != nil}
  /// Clears the value of `pid`. Subsequent reads from it will return its default value.
  public mutating func clearPid() {self._pid = nil}

  public var etcParam: String {
    get {return _etcParam ?? String()}
    set {_etcParam = newValue}
  }
  /// Returns true if `etcParam` has been explicitly set.
  public var hasEtcParam: Bool {return self._etcParam != nil}
  /// Clears the value of `etcParam`. Subsequent reads from it will return its default value.
  public mutating func clearEtcParam() {self._etcParam = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _screen: Outer_Streaming_ScreenCaptureOption? = nil
  fileprivate var _pid: Int32? = nil
  fileprivate var _etcParam: String? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Outer_Streaming_ScreenRecordOption: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "outer.streaming"

extension Outer_Streaming_ScreenRecordOption: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ScreenRecordOption"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "screen"),
    2: .standard(proto: "file_path"),
    3: .same(proto: "pid"),
    10: .standard(proto: "etc_param"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._screen) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.filePath) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._pid) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self._etcParam) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._screen {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.filePath.isEmpty {
      try visitor.visitSingularStringField(value: self.filePath, fieldNumber: 2)
    }
    try { if let v = self._pid {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._etcParam {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Outer_Streaming_ScreenRecordOption, rhs: Outer_Streaming_ScreenRecordOption) -> Bool {
    if lhs._screen != rhs._screen {return false}
    if lhs.filePath != rhs.filePath {return false}
    if lhs._pid != rhs._pid {return false}
    if lhs._etcParam != rhs._etcParam {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
