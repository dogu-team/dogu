// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: inner/params/dc_gdc.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Inner_Params_DcGdcParam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: Inner_Params_DcGdcParam.OneOf_Value? = nil

  public var dcGdcUpdateDevicelistParam: Inner_Types_DcGdcUpdateDeviceListParam {
    get {
      if case .dcGdcUpdateDevicelistParam(let v)? = value {return v}
      return Inner_Types_DcGdcUpdateDeviceListParam()
    }
    set {value = .dcGdcUpdateDevicelistParam(newValue)}
  }

  public var dcGdcStartScreenRecordParam: Inner_Types_DcGdcStartScreenRecordParam {
    get {
      if case .dcGdcStartScreenRecordParam(let v)? = value {return v}
      return Inner_Types_DcGdcStartScreenRecordParam()
    }
    set {value = .dcGdcStartScreenRecordParam(newValue)}
  }

  public var dcGdcStopScreenRecordParam: Inner_Types_DcGdcStopScreenRecordParam {
    get {
      if case .dcGdcStopScreenRecordParam(let v)? = value {return v}
      return Inner_Types_DcGdcStopScreenRecordParam()
    }
    set {value = .dcGdcStopScreenRecordParam(newValue)}
  }

  public var dcGdcGetSurfaceStatusParam: Inner_Types_DcGdcGetSurfaceStatusParam {
    get {
      if case .dcGdcGetSurfaceStatusParam(let v)? = value {return v}
      return Inner_Types_DcGdcGetSurfaceStatusParam()
    }
    set {value = .dcGdcGetSurfaceStatusParam(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Value: Equatable {
    case dcGdcUpdateDevicelistParam(Inner_Types_DcGdcUpdateDeviceListParam)
    case dcGdcStartScreenRecordParam(Inner_Types_DcGdcStartScreenRecordParam)
    case dcGdcStopScreenRecordParam(Inner_Types_DcGdcStopScreenRecordParam)
    case dcGdcGetSurfaceStatusParam(Inner_Types_DcGdcGetSurfaceStatusParam)

  #if !swift(>=4.1)
    public static func ==(lhs: Inner_Params_DcGdcParam.OneOf_Value, rhs: Inner_Params_DcGdcParam.OneOf_Value) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.dcGdcUpdateDevicelistParam, .dcGdcUpdateDevicelistParam): return {
        guard case .dcGdcUpdateDevicelistParam(let l) = lhs, case .dcGdcUpdateDevicelistParam(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcGdcStartScreenRecordParam, .dcGdcStartScreenRecordParam): return {
        guard case .dcGdcStartScreenRecordParam(let l) = lhs, case .dcGdcStartScreenRecordParam(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcGdcStopScreenRecordParam, .dcGdcStopScreenRecordParam): return {
        guard case .dcGdcStopScreenRecordParam(let l) = lhs, case .dcGdcStopScreenRecordParam(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcGdcGetSurfaceStatusParam, .dcGdcGetSurfaceStatusParam): return {
        guard case .dcGdcGetSurfaceStatusParam(let l) = lhs, case .dcGdcGetSurfaceStatusParam(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Inner_Params_DcGdcResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: Inner_Params_DcGdcResult.OneOf_Value? = nil

  public var dcGdcUpdateDevicelistResult: Inner_Types_DcGdcUpdateDeviceListResult {
    get {
      if case .dcGdcUpdateDevicelistResult(let v)? = value {return v}
      return Inner_Types_DcGdcUpdateDeviceListResult()
    }
    set {value = .dcGdcUpdateDevicelistResult(newValue)}
  }

  public var dcGdcStartScreenRecordResult: Inner_Types_DcGdcStartScreenRecordResult {
    get {
      if case .dcGdcStartScreenRecordResult(let v)? = value {return v}
      return Inner_Types_DcGdcStartScreenRecordResult()
    }
    set {value = .dcGdcStartScreenRecordResult(newValue)}
  }

  public var dcGdcStopScreenRecordResult: Inner_Types_DcGdcStopScreenRecordResult {
    get {
      if case .dcGdcStopScreenRecordResult(let v)? = value {return v}
      return Inner_Types_DcGdcStopScreenRecordResult()
    }
    set {value = .dcGdcStopScreenRecordResult(newValue)}
  }

  public var dcGdcGetSurfaceStatusResult: Inner_Types_DcGdcGetSurfaceStatusResult {
    get {
      if case .dcGdcGetSurfaceStatusResult(let v)? = value {return v}
      return Inner_Types_DcGdcGetSurfaceStatusResult()
    }
    set {value = .dcGdcGetSurfaceStatusResult(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Value: Equatable {
    case dcGdcUpdateDevicelistResult(Inner_Types_DcGdcUpdateDeviceListResult)
    case dcGdcStartScreenRecordResult(Inner_Types_DcGdcStartScreenRecordResult)
    case dcGdcStopScreenRecordResult(Inner_Types_DcGdcStopScreenRecordResult)
    case dcGdcGetSurfaceStatusResult(Inner_Types_DcGdcGetSurfaceStatusResult)

  #if !swift(>=4.1)
    public static func ==(lhs: Inner_Params_DcGdcResult.OneOf_Value, rhs: Inner_Params_DcGdcResult.OneOf_Value) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.dcGdcUpdateDevicelistResult, .dcGdcUpdateDevicelistResult): return {
        guard case .dcGdcUpdateDevicelistResult(let l) = lhs, case .dcGdcUpdateDevicelistResult(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcGdcStartScreenRecordResult, .dcGdcStartScreenRecordResult): return {
        guard case .dcGdcStartScreenRecordResult(let l) = lhs, case .dcGdcStartScreenRecordResult(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcGdcStopScreenRecordResult, .dcGdcStopScreenRecordResult): return {
        guard case .dcGdcStopScreenRecordResult(let l) = lhs, case .dcGdcStopScreenRecordResult(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dcGdcGetSurfaceStatusResult, .dcGdcGetSurfaceStatusResult): return {
        guard case .dcGdcGetSurfaceStatusResult(let l) = lhs, case .dcGdcGetSurfaceStatusResult(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Inner_Params_DcGdcParam: @unchecked Sendable {}
extension Inner_Params_DcGdcParam.OneOf_Value: @unchecked Sendable {}
extension Inner_Params_DcGdcResult: @unchecked Sendable {}
extension Inner_Params_DcGdcResult.OneOf_Value: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "inner.params"

extension Inner_Params_DcGdcParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DcGdcParam"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .standard(proto: "dc_gdc_update_devicelist_param"),
    13: .standard(proto: "dc_gdc_start_screen_record_param"),
    14: .standard(proto: "dc_gdc_stop_screen_record_param"),
    15: .standard(proto: "dc_gdc_get_surface_status_param"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 10: try {
        var v: Inner_Types_DcGdcUpdateDeviceListParam?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcGdcUpdateDevicelistParam(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcGdcUpdateDevicelistParam(v)
        }
      }()
      case 13: try {
        var v: Inner_Types_DcGdcStartScreenRecordParam?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcGdcStartScreenRecordParam(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcGdcStartScreenRecordParam(v)
        }
      }()
      case 14: try {
        var v: Inner_Types_DcGdcStopScreenRecordParam?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcGdcStopScreenRecordParam(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcGdcStopScreenRecordParam(v)
        }
      }()
      case 15: try {
        var v: Inner_Types_DcGdcGetSurfaceStatusParam?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcGdcGetSurfaceStatusParam(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcGdcGetSurfaceStatusParam(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.value {
    case .dcGdcUpdateDevicelistParam?: try {
      guard case .dcGdcUpdateDevicelistParam(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .dcGdcStartScreenRecordParam?: try {
      guard case .dcGdcStartScreenRecordParam(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .dcGdcStopScreenRecordParam?: try {
      guard case .dcGdcStopScreenRecordParam(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .dcGdcGetSurfaceStatusParam?: try {
      guard case .dcGdcGetSurfaceStatusParam(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Inner_Params_DcGdcParam, rhs: Inner_Params_DcGdcParam) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Inner_Params_DcGdcResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DcGdcResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .standard(proto: "dc_gdc_update_devicelist_result"),
    13: .standard(proto: "dc_gdc_start_screen_record_result"),
    14: .standard(proto: "dc_gdc_stop_screen_record_result"),
    15: .standard(proto: "dc_gdc_get_surface_status_result"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 10: try {
        var v: Inner_Types_DcGdcUpdateDeviceListResult?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcGdcUpdateDevicelistResult(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcGdcUpdateDevicelistResult(v)
        }
      }()
      case 13: try {
        var v: Inner_Types_DcGdcStartScreenRecordResult?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcGdcStartScreenRecordResult(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcGdcStartScreenRecordResult(v)
        }
      }()
      case 14: try {
        var v: Inner_Types_DcGdcStopScreenRecordResult?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcGdcStopScreenRecordResult(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcGdcStopScreenRecordResult(v)
        }
      }()
      case 15: try {
        var v: Inner_Types_DcGdcGetSurfaceStatusResult?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .dcGdcGetSurfaceStatusResult(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .dcGdcGetSurfaceStatusResult(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.value {
    case .dcGdcUpdateDevicelistResult?: try {
      guard case .dcGdcUpdateDevicelistResult(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .dcGdcStartScreenRecordResult?: try {
      guard case .dcGdcStartScreenRecordResult(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .dcGdcStopScreenRecordResult?: try {
      guard case .dcGdcStopScreenRecordResult(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .dcGdcGetSurfaceStatusResult?: try {
      guard case .dcGdcGetSurfaceStatusResult(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Inner_Params_DcGdcResult, rhs: Inner_Params_DcGdcResult) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
