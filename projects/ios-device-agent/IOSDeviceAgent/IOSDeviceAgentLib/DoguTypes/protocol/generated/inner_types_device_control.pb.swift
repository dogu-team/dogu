// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: inner/types/device_control.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Inner_Types_DeviceControlType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case aosInjectKeycode // = 1
  case aosInjectText // = 2
  case aosInjectTouchEvent // = 3
  case aosInjectScrollEvent // = 4
  case aosBackOrScreenOn // = 5
  case aosExpandNotificationPanel // = 6
  case aosExpandSettingsPanel // = 7
  case aosCollapsePanels // = 8
  case aosGetClipboard // = 9
  case aosSetClipboard // = 10
  case aosSetScreenPowerMode // = 11
  case aosRotateDevice // = 12

  /// desktop
  public static let desktopInjectKeycode = aosInjectKeycode
  public static let desktopInjectText = aosInjectText
  public static let desktopInjectMouseEvent = aosInjectTouchEvent
  public static let desktopInjectScrollEvent = aosInjectScrollEvent
  public static let desktopGetClipboard = aosGetClipboard
  public static let desktopSetClipboard = aosSetClipboard
  case desktopOnscreenFocused // = 30
  case desktopOnscreenUnfocused // = 31
  public static let iosInjectKeycode = aosInjectKeycode
  public static let iosInjectText = aosInjectText
  public static let iosInjectTouchEvent = aosInjectTouchEvent
  public static let iosInjectScrollEvent = aosInjectScrollEvent
  public static let iosGetClipboard = aosGetClipboard
  public static let iosSetClipboard = aosSetClipboard
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .aosInjectKeycode
    case 2: self = .aosInjectText
    case 3: self = .aosInjectTouchEvent
    case 4: self = .aosInjectScrollEvent
    case 5: self = .aosBackOrScreenOn
    case 6: self = .aosExpandNotificationPanel
    case 7: self = .aosExpandSettingsPanel
    case 8: self = .aosCollapsePanels
    case 9: self = .aosGetClipboard
    case 10: self = .aosSetClipboard
    case 11: self = .aosSetScreenPowerMode
    case 12: self = .aosRotateDevice
    case 30: self = .desktopOnscreenFocused
    case 31: self = .desktopOnscreenUnfocused
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .aosInjectKeycode: return 1
    case .aosInjectText: return 2
    case .aosInjectTouchEvent: return 3
    case .aosInjectScrollEvent: return 4
    case .aosBackOrScreenOn: return 5
    case .aosExpandNotificationPanel: return 6
    case .aosExpandSettingsPanel: return 7
    case .aosCollapsePanels: return 8
    case .aosGetClipboard: return 9
    case .aosSetClipboard: return 10
    case .aosSetScreenPowerMode: return 11
    case .aosRotateDevice: return 12
    case .desktopOnscreenFocused: return 30
    case .desktopOnscreenUnfocused: return 31
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Inner_Types_DeviceControlType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Inner_Types_DeviceControlType] = [
    .unspecified,
    .aosInjectKeycode,
    .aosInjectText,
    .aosInjectTouchEvent,
    .aosInjectScrollEvent,
    .aosBackOrScreenOn,
    .aosExpandNotificationPanel,
    .aosExpandSettingsPanel,
    .aosCollapsePanels,
    .aosGetClipboard,
    .aosSetClipboard,
    .aosSetScreenPowerMode,
    .aosRotateDevice,
    .desktopOnscreenFocused,
    .desktopOnscreenUnfocused,
  ]
}

#endif  // swift(>=4.2)

public enum Inner_Types_DeviceControlMetaState: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/KeyEvent.java
  /// https://developer.android.com/reference/android/view/KeyEvent
  case unspecified // = 0
  case aosCapLocked // = 256
  case aosAltLocked // = 512
  case aosSymLocked // = 1024
  case aosSelecting // = 2048
  case aosAltOn // = 2
  case aosAltLeftOn // = 16
  case aosAltRightOn // = 32
  case aosShiftOn // = 1
  case aosShiftLeftOn // = 64
  case aosShiftRightOn // = 128
  case aosSymOn // = 4
  case aosFunctionOn // = 8
  case aosCtrlOn // = 4096
  case aosCtrlLeftOn // = 8192
  case aosCtrlRightOn // = 16384
  case aosMetaOn // = 65536
  case aosMetaLeftOn // = 131072
  case aosMetaRightOn // = 262144
  case aosCapsLockOn // = 1048576
  case aosNumLockOn // = 2097152
  case aosScrollLockOn // = 4194304

  /// META_SHIFT_ON | META_SHIFT_LEFT_ON | META_SHIFT_RIGHT_ON;
  case aosShiftMask // = 193

  /// META_ALT_ON | META_ALT_LEFT_ON | META_ALT_RIGHT_ON;
  case aosAltMask // = 50

  /// META_CTRL_ON | META_CTRL_LEFT_ON | META_CTRL_RIGHT_ON;
  case aosCtrlMask // = 28672

  /// META_META_ON | META_META_LEFT_ON | META_META_RIGHT_ON;
  case aosMetaMask // = 458752

  /// desktop
  public static let desktopShift = aosShiftOn
  public static let desktopAlt = aosAltOn
  public static let desktopCtrl = aosCtrlOn
  public static let desktopMeta = aosMetaOn
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .aosShiftOn
    case 2: self = .aosAltOn
    case 4: self = .aosSymOn
    case 8: self = .aosFunctionOn
    case 16: self = .aosAltLeftOn
    case 32: self = .aosAltRightOn
    case 50: self = .aosAltMask
    case 64: self = .aosShiftLeftOn
    case 128: self = .aosShiftRightOn
    case 193: self = .aosShiftMask
    case 256: self = .aosCapLocked
    case 512: self = .aosAltLocked
    case 1024: self = .aosSymLocked
    case 2048: self = .aosSelecting
    case 4096: self = .aosCtrlOn
    case 8192: self = .aosCtrlLeftOn
    case 16384: self = .aosCtrlRightOn
    case 28672: self = .aosCtrlMask
    case 65536: self = .aosMetaOn
    case 131072: self = .aosMetaLeftOn
    case 262144: self = .aosMetaRightOn
    case 458752: self = .aosMetaMask
    case 1048576: self = .aosCapsLockOn
    case 2097152: self = .aosNumLockOn
    case 4194304: self = .aosScrollLockOn
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .aosShiftOn: return 1
    case .aosAltOn: return 2
    case .aosSymOn: return 4
    case .aosFunctionOn: return 8
    case .aosAltLeftOn: return 16
    case .aosAltRightOn: return 32
    case .aosAltMask: return 50
    case .aosShiftLeftOn: return 64
    case .aosShiftRightOn: return 128
    case .aosShiftMask: return 193
    case .aosCapLocked: return 256
    case .aosAltLocked: return 512
    case .aosSymLocked: return 1024
    case .aosSelecting: return 2048
    case .aosCtrlOn: return 4096
    case .aosCtrlLeftOn: return 8192
    case .aosCtrlRightOn: return 16384
    case .aosCtrlMask: return 28672
    case .aosMetaOn: return 65536
    case .aosMetaLeftOn: return 131072
    case .aosMetaRightOn: return 262144
    case .aosMetaMask: return 458752
    case .aosCapsLockOn: return 1048576
    case .aosNumLockOn: return 2097152
    case .aosScrollLockOn: return 4194304
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Inner_Types_DeviceControlMetaState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Inner_Types_DeviceControlMetaState] = [
    .unspecified,
    .aosCapLocked,
    .aosAltLocked,
    .aosSymLocked,
    .aosSelecting,
    .aosAltOn,
    .aosAltLeftOn,
    .aosAltRightOn,
    .aosShiftOn,
    .aosShiftLeftOn,
    .aosShiftRightOn,
    .aosSymOn,
    .aosFunctionOn,
    .aosCtrlOn,
    .aosCtrlLeftOn,
    .aosCtrlRightOn,
    .aosMetaOn,
    .aosMetaLeftOn,
    .aosMetaRightOn,
    .aosCapsLockOn,
    .aosNumLockOn,
    .aosScrollLockOn,
    .aosShiftMask,
    .aosAltMask,
    .aosCtrlMask,
    .aosMetaMask,
  ]
}

#endif  // swift(>=4.2)

public enum Inner_Types_DeviceControlAction: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0

  /// https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/KeyEvent.java
  /// https://developer.android.com/reference/android/view/KeyEvent
  public static let aosKeyeventActionDownUnspecified = unspecified
  case aosKeyeventActionUp // = 1
  case aosKeyeventActionMultiple // = 2

  /// https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/MotionEvent.java
  /// https://developer.android.com/reference/android/view/MotionEvent
  public static let aosMotioneventActionDownUnspecified = unspecified
  public static let aosMotioneventActionUp = aosKeyeventActionUp
  public static let aosMotioneventActionMove = aosKeyeventActionMultiple
  case aosMotioneventActionCancel // = 3
  case aosMotioneventActionOutside // = 4
  case aosMotioneventActionPointerDown // = 5
  case aosMotioneventActionPointerUp // = 6
  case aosMotioneventActionHoverMove // = 7
  case aosMotioneventActionScroll // = 8
  case aosMotioneventActionHoverEnter // = 9
  case aosMotioneventActionHoverExit // = 10
  case aosMotioneventActionButtonPress // = 11
  case aosMotioneventActionButtonRelease // = 12

  /// desktop
  public static let desktopActionDownUnspecified = unspecified
  public static let desktopActionUp = aosKeyeventActionUp
  public static let desktopActionMove = aosKeyeventActionMultiple
  case desktopActionDownup // = 20
  public static let iosActionDownUnspecified = unspecified
  public static let iosActionUp = aosKeyeventActionUp
  public static let iosActionMove = aosKeyeventActionMultiple
  public static let iosActionScroll = aosMotioneventActionScroll
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .aosKeyeventActionUp
    case 2: self = .aosKeyeventActionMultiple
    case 3: self = .aosMotioneventActionCancel
    case 4: self = .aosMotioneventActionOutside
    case 5: self = .aosMotioneventActionPointerDown
    case 6: self = .aosMotioneventActionPointerUp
    case 7: self = .aosMotioneventActionHoverMove
    case 8: self = .aosMotioneventActionScroll
    case 9: self = .aosMotioneventActionHoverEnter
    case 10: self = .aosMotioneventActionHoverExit
    case 11: self = .aosMotioneventActionButtonPress
    case 12: self = .aosMotioneventActionButtonRelease
    case 20: self = .desktopActionDownup
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .aosKeyeventActionUp: return 1
    case .aosKeyeventActionMultiple: return 2
    case .aosMotioneventActionCancel: return 3
    case .aosMotioneventActionOutside: return 4
    case .aosMotioneventActionPointerDown: return 5
    case .aosMotioneventActionPointerUp: return 6
    case .aosMotioneventActionHoverMove: return 7
    case .aosMotioneventActionScroll: return 8
    case .aosMotioneventActionHoverEnter: return 9
    case .aosMotioneventActionHoverExit: return 10
    case .aosMotioneventActionButtonPress: return 11
    case .aosMotioneventActionButtonRelease: return 12
    case .desktopActionDownup: return 20
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Inner_Types_DeviceControlAction: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Inner_Types_DeviceControlAction] = [
    .unspecified,
    .aosKeyeventActionUp,
    .aosKeyeventActionMultiple,
    .aosMotioneventActionCancel,
    .aosMotioneventActionOutside,
    .aosMotioneventActionPointerDown,
    .aosMotioneventActionPointerUp,
    .aosMotioneventActionHoverMove,
    .aosMotioneventActionScroll,
    .aosMotioneventActionHoverEnter,
    .aosMotioneventActionHoverExit,
    .aosMotioneventActionButtonPress,
    .aosMotioneventActionButtonRelease,
    .desktopActionDownup,
  ]
}

#endif  // swift(>=4.2)

public enum Inner_Types_DeviceControlKeycode: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0

  /// https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/KeyEvent.java
  /// https://developer.android.com/reference/android/view/KeyEvent
  case softLeft // = 1
  case softRight // = 2
  case home // = 3
  case back // = 4
  case call // = 5
  case endcall // = 6
  case deviceControlKeycode0 // = 7
  case deviceControlKeycode1 // = 8
  case deviceControlKeycode2 // = 9
  case deviceControlKeycode3 // = 10
  case deviceControlKeycode4 // = 11
  case deviceControlKeycode5 // = 12
  case deviceControlKeycode6 // = 13
  case deviceControlKeycode7 // = 14
  case deviceControlKeycode8 // = 15
  case deviceControlKeycode9 // = 16
  case star // = 17
  case pound // = 18
  case dpadUp // = 19
  case dpadDown // = 20
  case dpadLeft // = 21
  case dpadRight // = 22
  case dpadCenter // = 23
  case volumeUp // = 24
  case volumeDown // = 25
  case power // = 26
  case camera // = 27
  case clear // = 28
  case a // = 29
  case b // = 30
  case c // = 31
  case d // = 32
  case e // = 33
  case f // = 34
  case g // = 35
  case h // = 36
  case i // = 37
  case j // = 38
  case k // = 39
  case l // = 40
  case m // = 41
  case n // = 42
  case o // = 43
  case p // = 44
  case q // = 45
  case r // = 46
  case s // = 47
  case t // = 48
  case u // = 49
  case v // = 50
  case w // = 51
  case x // = 52
  case y // = 53
  case z // = 54
  case comma // = 55
  case period // = 56
  case altLeft // = 57
  case altRight // = 58
  case shiftLeft // = 59
  case shiftRight // = 60
  case tab // = 61
  case space // = 62
  case sym // = 63
  case explorer // = 64
  case envelope // = 65
  case enter // = 66
  case del // = 67
  case grave // = 68
  case minus // = 69
  case equals // = 70
  case leftBracket // = 71
  case rightBracket // = 72
  case backslash // = 73
  case semicolon // = 74
  case apostrophe // = 75
  case slash // = 76
  case at // = 77
  case num // = 78
  case headsethook // = 79

  ///*Camera* focus
  case focus // = 80
  case plus // = 81
  case menu // = 82
  case notification // = 83
  case search // = 84
  case mediaPlayPause // = 85
  case mediaStop // = 86
  case mediaNext // = 87
  case mediaPrevious // = 88
  case mediaRewind // = 89
  case mediaFastForward // = 90
  case mute // = 91
  case pageUp // = 92
  case pageDown // = 93

  /// switch symbol-sets (Emoji,Kao-moji)
  case pictsymbols // = 94

  /// switch char-sets (Kanji,Katakana)
  case switchCharset // = 95
  case buttonA // = 96
  case buttonB // = 97
  case buttonC // = 98
  case buttonX // = 99
  case buttonY // = 100
  case buttonZ // = 101
  case buttonL1 // = 102
  case buttonR1 // = 103
  case buttonL2 // = 104
  case buttonR2 // = 105
  case buttonThumbl // = 106
  case buttonThumbr // = 107
  case buttonStart // = 108
  case buttonSelect // = 109
  case buttonMode // = 110
  case escape // = 111
  case forwardDel // = 112
  case ctrlLeft // = 113
  case ctrlRight // = 114
  case capsLock // = 115
  case scrollLock // = 116
  case metaLeft // = 117
  case metaRight // = 118
  case function // = 119
  case sysrq // = 120
  case `break` // = 121
  case moveHome // = 122
  case moveEnd // = 123
  case insert // = 124
  case forward // = 125
  case mediaPlay // = 126
  case mediaPause // = 127
  case mediaClose // = 128
  case mediaEject // = 129
  case mediaRecord // = 130
  case f1 // = 131
  case f2 // = 132
  case f3 // = 133
  case f4 // = 134
  case f5 // = 135
  case f6 // = 136
  case f7 // = 137
  case f8 // = 138
  case f9 // = 139
  case f10 // = 140
  case f11 // = 141
  case f12 // = 142
  case numLock // = 143
  case numpad0 // = 144
  case numpad1 // = 145
  case numpad2 // = 146
  case numpad3 // = 147
  case numpad4 // = 148
  case numpad5 // = 149
  case numpad6 // = 150
  case numpad7 // = 151
  case numpad8 // = 152
  case numpad9 // = 153
  case numpadDivide // = 154
  case numpadMultiply // = 155
  case numpadSubtract // = 156
  case numpadAdd // = 157
  case numpadDot // = 158
  case numpadComma // = 159
  case numpadEnter // = 160
  case numpadEquals // = 161
  case numpadLeftParen // = 162
  case numpadRightParen // = 163
  case volumeMute // = 164
  case info // = 165
  case channelUp // = 166
  case channelDown // = 167
  case zoomIn // = 168
  case zoomOut // = 169
  case tv // = 170
  case window // = 171
  case guide // = 172
  case dvr // = 173
  case bookmark // = 174
  case captions // = 175
  case settings // = 176
  case tvPower // = 177
  case tvInput // = 178
  case stbPower // = 179
  case stbInput // = 180
  case avrPower // = 181
  case avrInput // = 182
  case progRed // = 183
  case progGreen // = 184
  case progYellow // = 185
  case progBlue // = 186
  case appSwitch // = 187
  case button1 // = 188
  case button2 // = 189
  case button3 // = 190
  case button4 // = 191
  case button5 // = 192
  case button6 // = 193
  case button7 // = 194
  case button8 // = 195
  case button9 // = 196
  case button10 // = 197
  case button11 // = 198
  case button12 // = 199
  case button13 // = 200
  case button14 // = 201
  case button15 // = 202
  case button16 // = 203
  case languageSwitch // = 204
  case mannerMode // = 205
  case deviceControlKeycode3DMode // = 206
  case contacts // = 207
  case calendar // = 208
  case music // = 209
  case calculator // = 210
  case zenkakuHankaku // = 211
  case eisu // = 212
  case muhenkan // = 213
  case henkan // = 214
  case katakanaHiragana // = 215
  case yen // = 216
  case ro // = 217
  case kana // = 218
  case assist // = 219
  case brightnessDown // = 220
  case brightnessUp // = 221
  case mediaAudioTrack // = 222
  case sleep // = 223
  case wakeup // = 224
  case pairing // = 225
  case mediaTopMenu // = 226
  case deviceControlKeycode11 // = 227
  case deviceControlKeycode12 // = 228
  case lastChannel // = 229
  case tvDataService // = 230
  case voiceAssist // = 231
  case tvRadioService // = 232
  case tvTeletext // = 233
  case tvNumberEntry // = 234
  case tvTerrestrialAnalog // = 235
  case tvTerrestrialDigital // = 236
  case tvSatellite // = 237
  case tvSatelliteBs // = 238
  case tvSatelliteCs // = 239
  case tvSatelliteService // = 240
  case tvNetwork // = 241
  case tvAntennaCable // = 242
  case tvInputHdmi1 // = 243
  case tvInputHdmi2 // = 244
  case tvInputHdmi3 // = 245
  case tvInputHdmi4 // = 246
  case tvInputComposite1 // = 247
  case tvInputComposite2 // = 248
  case tvInputComponent1 // = 249
  case tvInputComponent2 // = 250
  case tvInputVga1 // = 251
  case tvAudioDescription // = 252
  case tvAudioDescriptionMixUp // = 253
  case tvAudioDescriptionMixDown // = 254
  case tvZoomMode // = 255
  case tvContentsMenu // = 256
  case tvMediaContextMenu // = 257
  case tvTimerProgramming // = 258
  case help // = 259
  case navigatePrevious // = 260
  case navigateNext // = 261
  case navigateIn // = 262
  case navigateOut // = 263
  case stemPrimary // = 264
  case stem1 // = 265
  case stem2 // = 266
  case stem3 // = 267
  case dpadUpLeft // = 268
  case dpadDownLeft // = 269
  case dpadUpRight // = 270
  case dpadDownRight // = 271
  case mediaSkipForward // = 272
  case mediaSkipBackward // = 273
  case mediaStepForward // = 274
  case mediaStepBackward // = 275
  case softSleep // = 276
  case cut // = 277
  case copy // = 278
  case paste // = 279
  case systemNavigationUp // = 280
  case systemNavigationDown // = 281
  case systemNavigationLeft // = 282
  case systemNavigationRight // = 283
  case allApps // = 284
  case refresh // = 285
  case thumbsUp // = 286
  case thumbsDown // = 287
  case profileSwitch // = 288
  case videoApp1 // = 289
  case videoApp2 // = 290
  case videoApp3 // = 291
  case videoApp4 // = 292
  case videoApp5 // = 293
  case videoApp6 // = 294
  case videoApp7 // = 295
  case videoApp8 // = 296
  case featuredApp1 // = 297
  case featuredApp2 // = 298
  case featuredApp3 // = 299
  case featuredApp4 // = 300
  case demoApp1 // = 301
  case demoApp2 // = 302
  case demoApp3 // = 303
  case demoApp4 // = 304
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .softLeft
    case 2: self = .softRight
    case 3: self = .home
    case 4: self = .back
    case 5: self = .call
    case 6: self = .endcall
    case 7: self = .deviceControlKeycode0
    case 8: self = .deviceControlKeycode1
    case 9: self = .deviceControlKeycode2
    case 10: self = .deviceControlKeycode3
    case 11: self = .deviceControlKeycode4
    case 12: self = .deviceControlKeycode5
    case 13: self = .deviceControlKeycode6
    case 14: self = .deviceControlKeycode7
    case 15: self = .deviceControlKeycode8
    case 16: self = .deviceControlKeycode9
    case 17: self = .star
    case 18: self = .pound
    case 19: self = .dpadUp
    case 20: self = .dpadDown
    case 21: self = .dpadLeft
    case 22: self = .dpadRight
    case 23: self = .dpadCenter
    case 24: self = .volumeUp
    case 25: self = .volumeDown
    case 26: self = .power
    case 27: self = .camera
    case 28: self = .clear
    case 29: self = .a
    case 30: self = .b
    case 31: self = .c
    case 32: self = .d
    case 33: self = .e
    case 34: self = .f
    case 35: self = .g
    case 36: self = .h
    case 37: self = .i
    case 38: self = .j
    case 39: self = .k
    case 40: self = .l
    case 41: self = .m
    case 42: self = .n
    case 43: self = .o
    case 44: self = .p
    case 45: self = .q
    case 46: self = .r
    case 47: self = .s
    case 48: self = .t
    case 49: self = .u
    case 50: self = .v
    case 51: self = .w
    case 52: self = .x
    case 53: self = .y
    case 54: self = .z
    case 55: self = .comma
    case 56: self = .period
    case 57: self = .altLeft
    case 58: self = .altRight
    case 59: self = .shiftLeft
    case 60: self = .shiftRight
    case 61: self = .tab
    case 62: self = .space
    case 63: self = .sym
    case 64: self = .explorer
    case 65: self = .envelope
    case 66: self = .enter
    case 67: self = .del
    case 68: self = .grave
    case 69: self = .minus
    case 70: self = .equals
    case 71: self = .leftBracket
    case 72: self = .rightBracket
    case 73: self = .backslash
    case 74: self = .semicolon
    case 75: self = .apostrophe
    case 76: self = .slash
    case 77: self = .at
    case 78: self = .num
    case 79: self = .headsethook
    case 80: self = .focus
    case 81: self = .plus
    case 82: self = .menu
    case 83: self = .notification
    case 84: self = .search
    case 85: self = .mediaPlayPause
    case 86: self = .mediaStop
    case 87: self = .mediaNext
    case 88: self = .mediaPrevious
    case 89: self = .mediaRewind
    case 90: self = .mediaFastForward
    case 91: self = .mute
    case 92: self = .pageUp
    case 93: self = .pageDown
    case 94: self = .pictsymbols
    case 95: self = .switchCharset
    case 96: self = .buttonA
    case 97: self = .buttonB
    case 98: self = .buttonC
    case 99: self = .buttonX
    case 100: self = .buttonY
    case 101: self = .buttonZ
    case 102: self = .buttonL1
    case 103: self = .buttonR1
    case 104: self = .buttonL2
    case 105: self = .buttonR2
    case 106: self = .buttonThumbl
    case 107: self = .buttonThumbr
    case 108: self = .buttonStart
    case 109: self = .buttonSelect
    case 110: self = .buttonMode
    case 111: self = .escape
    case 112: self = .forwardDel
    case 113: self = .ctrlLeft
    case 114: self = .ctrlRight
    case 115: self = .capsLock
    case 116: self = .scrollLock
    case 117: self = .metaLeft
    case 118: self = .metaRight
    case 119: self = .function
    case 120: self = .sysrq
    case 121: self = .break
    case 122: self = .moveHome
    case 123: self = .moveEnd
    case 124: self = .insert
    case 125: self = .forward
    case 126: self = .mediaPlay
    case 127: self = .mediaPause
    case 128: self = .mediaClose
    case 129: self = .mediaEject
    case 130: self = .mediaRecord
    case 131: self = .f1
    case 132: self = .f2
    case 133: self = .f3
    case 134: self = .f4
    case 135: self = .f5
    case 136: self = .f6
    case 137: self = .f7
    case 138: self = .f8
    case 139: self = .f9
    case 140: self = .f10
    case 141: self = .f11
    case 142: self = .f12
    case 143: self = .numLock
    case 144: self = .numpad0
    case 145: self = .numpad1
    case 146: self = .numpad2
    case 147: self = .numpad3
    case 148: self = .numpad4
    case 149: self = .numpad5
    case 150: self = .numpad6
    case 151: self = .numpad7
    case 152: self = .numpad8
    case 153: self = .numpad9
    case 154: self = .numpadDivide
    case 155: self = .numpadMultiply
    case 156: self = .numpadSubtract
    case 157: self = .numpadAdd
    case 158: self = .numpadDot
    case 159: self = .numpadComma
    case 160: self = .numpadEnter
    case 161: self = .numpadEquals
    case 162: self = .numpadLeftParen
    case 163: self = .numpadRightParen
    case 164: self = .volumeMute
    case 165: self = .info
    case 166: self = .channelUp
    case 167: self = .channelDown
    case 168: self = .zoomIn
    case 169: self = .zoomOut
    case 170: self = .tv
    case 171: self = .window
    case 172: self = .guide
    case 173: self = .dvr
    case 174: self = .bookmark
    case 175: self = .captions
    case 176: self = .settings
    case 177: self = .tvPower
    case 178: self = .tvInput
    case 179: self = .stbPower
    case 180: self = .stbInput
    case 181: self = .avrPower
    case 182: self = .avrInput
    case 183: self = .progRed
    case 184: self = .progGreen
    case 185: self = .progYellow
    case 186: self = .progBlue
    case 187: self = .appSwitch
    case 188: self = .button1
    case 189: self = .button2
    case 190: self = .button3
    case 191: self = .button4
    case 192: self = .button5
    case 193: self = .button6
    case 194: self = .button7
    case 195: self = .button8
    case 196: self = .button9
    case 197: self = .button10
    case 198: self = .button11
    case 199: self = .button12
    case 200: self = .button13
    case 201: self = .button14
    case 202: self = .button15
    case 203: self = .button16
    case 204: self = .languageSwitch
    case 205: self = .mannerMode
    case 206: self = .deviceControlKeycode3DMode
    case 207: self = .contacts
    case 208: self = .calendar
    case 209: self = .music
    case 210: self = .calculator
    case 211: self = .zenkakuHankaku
    case 212: self = .eisu
    case 213: self = .muhenkan
    case 214: self = .henkan
    case 215: self = .katakanaHiragana
    case 216: self = .yen
    case 217: self = .ro
    case 218: self = .kana
    case 219: self = .assist
    case 220: self = .brightnessDown
    case 221: self = .brightnessUp
    case 222: self = .mediaAudioTrack
    case 223: self = .sleep
    case 224: self = .wakeup
    case 225: self = .pairing
    case 226: self = .mediaTopMenu
    case 227: self = .deviceControlKeycode11
    case 228: self = .deviceControlKeycode12
    case 229: self = .lastChannel
    case 230: self = .tvDataService
    case 231: self = .voiceAssist
    case 232: self = .tvRadioService
    case 233: self = .tvTeletext
    case 234: self = .tvNumberEntry
    case 235: self = .tvTerrestrialAnalog
    case 236: self = .tvTerrestrialDigital
    case 237: self = .tvSatellite
    case 238: self = .tvSatelliteBs
    case 239: self = .tvSatelliteCs
    case 240: self = .tvSatelliteService
    case 241: self = .tvNetwork
    case 242: self = .tvAntennaCable
    case 243: self = .tvInputHdmi1
    case 244: self = .tvInputHdmi2
    case 245: self = .tvInputHdmi3
    case 246: self = .tvInputHdmi4
    case 247: self = .tvInputComposite1
    case 248: self = .tvInputComposite2
    case 249: self = .tvInputComponent1
    case 250: self = .tvInputComponent2
    case 251: self = .tvInputVga1
    case 252: self = .tvAudioDescription
    case 253: self = .tvAudioDescriptionMixUp
    case 254: self = .tvAudioDescriptionMixDown
    case 255: self = .tvZoomMode
    case 256: self = .tvContentsMenu
    case 257: self = .tvMediaContextMenu
    case 258: self = .tvTimerProgramming
    case 259: self = .help
    case 260: self = .navigatePrevious
    case 261: self = .navigateNext
    case 262: self = .navigateIn
    case 263: self = .navigateOut
    case 264: self = .stemPrimary
    case 265: self = .stem1
    case 266: self = .stem2
    case 267: self = .stem3
    case 268: self = .dpadUpLeft
    case 269: self = .dpadDownLeft
    case 270: self = .dpadUpRight
    case 271: self = .dpadDownRight
    case 272: self = .mediaSkipForward
    case 273: self = .mediaSkipBackward
    case 274: self = .mediaStepForward
    case 275: self = .mediaStepBackward
    case 276: self = .softSleep
    case 277: self = .cut
    case 278: self = .copy
    case 279: self = .paste
    case 280: self = .systemNavigationUp
    case 281: self = .systemNavigationDown
    case 282: self = .systemNavigationLeft
    case 283: self = .systemNavigationRight
    case 284: self = .allApps
    case 285: self = .refresh
    case 286: self = .thumbsUp
    case 287: self = .thumbsDown
    case 288: self = .profileSwitch
    case 289: self = .videoApp1
    case 290: self = .videoApp2
    case 291: self = .videoApp3
    case 292: self = .videoApp4
    case 293: self = .videoApp5
    case 294: self = .videoApp6
    case 295: self = .videoApp7
    case 296: self = .videoApp8
    case 297: self = .featuredApp1
    case 298: self = .featuredApp2
    case 299: self = .featuredApp3
    case 300: self = .featuredApp4
    case 301: self = .demoApp1
    case 302: self = .demoApp2
    case 303: self = .demoApp3
    case 304: self = .demoApp4
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .softLeft: return 1
    case .softRight: return 2
    case .home: return 3
    case .back: return 4
    case .call: return 5
    case .endcall: return 6
    case .deviceControlKeycode0: return 7
    case .deviceControlKeycode1: return 8
    case .deviceControlKeycode2: return 9
    case .deviceControlKeycode3: return 10
    case .deviceControlKeycode4: return 11
    case .deviceControlKeycode5: return 12
    case .deviceControlKeycode6: return 13
    case .deviceControlKeycode7: return 14
    case .deviceControlKeycode8: return 15
    case .deviceControlKeycode9: return 16
    case .star: return 17
    case .pound: return 18
    case .dpadUp: return 19
    case .dpadDown: return 20
    case .dpadLeft: return 21
    case .dpadRight: return 22
    case .dpadCenter: return 23
    case .volumeUp: return 24
    case .volumeDown: return 25
    case .power: return 26
    case .camera: return 27
    case .clear: return 28
    case .a: return 29
    case .b: return 30
    case .c: return 31
    case .d: return 32
    case .e: return 33
    case .f: return 34
    case .g: return 35
    case .h: return 36
    case .i: return 37
    case .j: return 38
    case .k: return 39
    case .l: return 40
    case .m: return 41
    case .n: return 42
    case .o: return 43
    case .p: return 44
    case .q: return 45
    case .r: return 46
    case .s: return 47
    case .t: return 48
    case .u: return 49
    case .v: return 50
    case .w: return 51
    case .x: return 52
    case .y: return 53
    case .z: return 54
    case .comma: return 55
    case .period: return 56
    case .altLeft: return 57
    case .altRight: return 58
    case .shiftLeft: return 59
    case .shiftRight: return 60
    case .tab: return 61
    case .space: return 62
    case .sym: return 63
    case .explorer: return 64
    case .envelope: return 65
    case .enter: return 66
    case .del: return 67
    case .grave: return 68
    case .minus: return 69
    case .equals: return 70
    case .leftBracket: return 71
    case .rightBracket: return 72
    case .backslash: return 73
    case .semicolon: return 74
    case .apostrophe: return 75
    case .slash: return 76
    case .at: return 77
    case .num: return 78
    case .headsethook: return 79
    case .focus: return 80
    case .plus: return 81
    case .menu: return 82
    case .notification: return 83
    case .search: return 84
    case .mediaPlayPause: return 85
    case .mediaStop: return 86
    case .mediaNext: return 87
    case .mediaPrevious: return 88
    case .mediaRewind: return 89
    case .mediaFastForward: return 90
    case .mute: return 91
    case .pageUp: return 92
    case .pageDown: return 93
    case .pictsymbols: return 94
    case .switchCharset: return 95
    case .buttonA: return 96
    case .buttonB: return 97
    case .buttonC: return 98
    case .buttonX: return 99
    case .buttonY: return 100
    case .buttonZ: return 101
    case .buttonL1: return 102
    case .buttonR1: return 103
    case .buttonL2: return 104
    case .buttonR2: return 105
    case .buttonThumbl: return 106
    case .buttonThumbr: return 107
    case .buttonStart: return 108
    case .buttonSelect: return 109
    case .buttonMode: return 110
    case .escape: return 111
    case .forwardDel: return 112
    case .ctrlLeft: return 113
    case .ctrlRight: return 114
    case .capsLock: return 115
    case .scrollLock: return 116
    case .metaLeft: return 117
    case .metaRight: return 118
    case .function: return 119
    case .sysrq: return 120
    case .break: return 121
    case .moveHome: return 122
    case .moveEnd: return 123
    case .insert: return 124
    case .forward: return 125
    case .mediaPlay: return 126
    case .mediaPause: return 127
    case .mediaClose: return 128
    case .mediaEject: return 129
    case .mediaRecord: return 130
    case .f1: return 131
    case .f2: return 132
    case .f3: return 133
    case .f4: return 134
    case .f5: return 135
    case .f6: return 136
    case .f7: return 137
    case .f8: return 138
    case .f9: return 139
    case .f10: return 140
    case .f11: return 141
    case .f12: return 142
    case .numLock: return 143
    case .numpad0: return 144
    case .numpad1: return 145
    case .numpad2: return 146
    case .numpad3: return 147
    case .numpad4: return 148
    case .numpad5: return 149
    case .numpad6: return 150
    case .numpad7: return 151
    case .numpad8: return 152
    case .numpad9: return 153
    case .numpadDivide: return 154
    case .numpadMultiply: return 155
    case .numpadSubtract: return 156
    case .numpadAdd: return 157
    case .numpadDot: return 158
    case .numpadComma: return 159
    case .numpadEnter: return 160
    case .numpadEquals: return 161
    case .numpadLeftParen: return 162
    case .numpadRightParen: return 163
    case .volumeMute: return 164
    case .info: return 165
    case .channelUp: return 166
    case .channelDown: return 167
    case .zoomIn: return 168
    case .zoomOut: return 169
    case .tv: return 170
    case .window: return 171
    case .guide: return 172
    case .dvr: return 173
    case .bookmark: return 174
    case .captions: return 175
    case .settings: return 176
    case .tvPower: return 177
    case .tvInput: return 178
    case .stbPower: return 179
    case .stbInput: return 180
    case .avrPower: return 181
    case .avrInput: return 182
    case .progRed: return 183
    case .progGreen: return 184
    case .progYellow: return 185
    case .progBlue: return 186
    case .appSwitch: return 187
    case .button1: return 188
    case .button2: return 189
    case .button3: return 190
    case .button4: return 191
    case .button5: return 192
    case .button6: return 193
    case .button7: return 194
    case .button8: return 195
    case .button9: return 196
    case .button10: return 197
    case .button11: return 198
    case .button12: return 199
    case .button13: return 200
    case .button14: return 201
    case .button15: return 202
    case .button16: return 203
    case .languageSwitch: return 204
    case .mannerMode: return 205
    case .deviceControlKeycode3DMode: return 206
    case .contacts: return 207
    case .calendar: return 208
    case .music: return 209
    case .calculator: return 210
    case .zenkakuHankaku: return 211
    case .eisu: return 212
    case .muhenkan: return 213
    case .henkan: return 214
    case .katakanaHiragana: return 215
    case .yen: return 216
    case .ro: return 217
    case .kana: return 218
    case .assist: return 219
    case .brightnessDown: return 220
    case .brightnessUp: return 221
    case .mediaAudioTrack: return 222
    case .sleep: return 223
    case .wakeup: return 224
    case .pairing: return 225
    case .mediaTopMenu: return 226
    case .deviceControlKeycode11: return 227
    case .deviceControlKeycode12: return 228
    case .lastChannel: return 229
    case .tvDataService: return 230
    case .voiceAssist: return 231
    case .tvRadioService: return 232
    case .tvTeletext: return 233
    case .tvNumberEntry: return 234
    case .tvTerrestrialAnalog: return 235
    case .tvTerrestrialDigital: return 236
    case .tvSatellite: return 237
    case .tvSatelliteBs: return 238
    case .tvSatelliteCs: return 239
    case .tvSatelliteService: return 240
    case .tvNetwork: return 241
    case .tvAntennaCable: return 242
    case .tvInputHdmi1: return 243
    case .tvInputHdmi2: return 244
    case .tvInputHdmi3: return 245
    case .tvInputHdmi4: return 246
    case .tvInputComposite1: return 247
    case .tvInputComposite2: return 248
    case .tvInputComponent1: return 249
    case .tvInputComponent2: return 250
    case .tvInputVga1: return 251
    case .tvAudioDescription: return 252
    case .tvAudioDescriptionMixUp: return 253
    case .tvAudioDescriptionMixDown: return 254
    case .tvZoomMode: return 255
    case .tvContentsMenu: return 256
    case .tvMediaContextMenu: return 257
    case .tvTimerProgramming: return 258
    case .help: return 259
    case .navigatePrevious: return 260
    case .navigateNext: return 261
    case .navigateIn: return 262
    case .navigateOut: return 263
    case .stemPrimary: return 264
    case .stem1: return 265
    case .stem2: return 266
    case .stem3: return 267
    case .dpadUpLeft: return 268
    case .dpadDownLeft: return 269
    case .dpadUpRight: return 270
    case .dpadDownRight: return 271
    case .mediaSkipForward: return 272
    case .mediaSkipBackward: return 273
    case .mediaStepForward: return 274
    case .mediaStepBackward: return 275
    case .softSleep: return 276
    case .cut: return 277
    case .copy: return 278
    case .paste: return 279
    case .systemNavigationUp: return 280
    case .systemNavigationDown: return 281
    case .systemNavigationLeft: return 282
    case .systemNavigationRight: return 283
    case .allApps: return 284
    case .refresh: return 285
    case .thumbsUp: return 286
    case .thumbsDown: return 287
    case .profileSwitch: return 288
    case .videoApp1: return 289
    case .videoApp2: return 290
    case .videoApp3: return 291
    case .videoApp4: return 292
    case .videoApp5: return 293
    case .videoApp6: return 294
    case .videoApp7: return 295
    case .videoApp8: return 296
    case .featuredApp1: return 297
    case .featuredApp2: return 298
    case .featuredApp3: return 299
    case .featuredApp4: return 300
    case .demoApp1: return 301
    case .demoApp2: return 302
    case .demoApp3: return 303
    case .demoApp4: return 304
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Inner_Types_DeviceControlKeycode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Inner_Types_DeviceControlKeycode] = [
    .unspecified,
    .softLeft,
    .softRight,
    .home,
    .back,
    .call,
    .endcall,
    .deviceControlKeycode0,
    .deviceControlKeycode1,
    .deviceControlKeycode2,
    .deviceControlKeycode3,
    .deviceControlKeycode4,
    .deviceControlKeycode5,
    .deviceControlKeycode6,
    .deviceControlKeycode7,
    .deviceControlKeycode8,
    .deviceControlKeycode9,
    .star,
    .pound,
    .dpadUp,
    .dpadDown,
    .dpadLeft,
    .dpadRight,
    .dpadCenter,
    .volumeUp,
    .volumeDown,
    .power,
    .camera,
    .clear,
    .a,
    .b,
    .c,
    .d,
    .e,
    .f,
    .g,
    .h,
    .i,
    .j,
    .k,
    .l,
    .m,
    .n,
    .o,
    .p,
    .q,
    .r,
    .s,
    .t,
    .u,
    .v,
    .w,
    .x,
    .y,
    .z,
    .comma,
    .period,
    .altLeft,
    .altRight,
    .shiftLeft,
    .shiftRight,
    .tab,
    .space,
    .sym,
    .explorer,
    .envelope,
    .enter,
    .del,
    .grave,
    .minus,
    .equals,
    .leftBracket,
    .rightBracket,
    .backslash,
    .semicolon,
    .apostrophe,
    .slash,
    .at,
    .num,
    .headsethook,
    .focus,
    .plus,
    .menu,
    .notification,
    .search,
    .mediaPlayPause,
    .mediaStop,
    .mediaNext,
    .mediaPrevious,
    .mediaRewind,
    .mediaFastForward,
    .mute,
    .pageUp,
    .pageDown,
    .pictsymbols,
    .switchCharset,
    .buttonA,
    .buttonB,
    .buttonC,
    .buttonX,
    .buttonY,
    .buttonZ,
    .buttonL1,
    .buttonR1,
    .buttonL2,
    .buttonR2,
    .buttonThumbl,
    .buttonThumbr,
    .buttonStart,
    .buttonSelect,
    .buttonMode,
    .escape,
    .forwardDel,
    .ctrlLeft,
    .ctrlRight,
    .capsLock,
    .scrollLock,
    .metaLeft,
    .metaRight,
    .function,
    .sysrq,
    .break,
    .moveHome,
    .moveEnd,
    .insert,
    .forward,
    .mediaPlay,
    .mediaPause,
    .mediaClose,
    .mediaEject,
    .mediaRecord,
    .f1,
    .f2,
    .f3,
    .f4,
    .f5,
    .f6,
    .f7,
    .f8,
    .f9,
    .f10,
    .f11,
    .f12,
    .numLock,
    .numpad0,
    .numpad1,
    .numpad2,
    .numpad3,
    .numpad4,
    .numpad5,
    .numpad6,
    .numpad7,
    .numpad8,
    .numpad9,
    .numpadDivide,
    .numpadMultiply,
    .numpadSubtract,
    .numpadAdd,
    .numpadDot,
    .numpadComma,
    .numpadEnter,
    .numpadEquals,
    .numpadLeftParen,
    .numpadRightParen,
    .volumeMute,
    .info,
    .channelUp,
    .channelDown,
    .zoomIn,
    .zoomOut,
    .tv,
    .window,
    .guide,
    .dvr,
    .bookmark,
    .captions,
    .settings,
    .tvPower,
    .tvInput,
    .stbPower,
    .stbInput,
    .avrPower,
    .avrInput,
    .progRed,
    .progGreen,
    .progYellow,
    .progBlue,
    .appSwitch,
    .button1,
    .button2,
    .button3,
    .button4,
    .button5,
    .button6,
    .button7,
    .button8,
    .button9,
    .button10,
    .button11,
    .button12,
    .button13,
    .button14,
    .button15,
    .button16,
    .languageSwitch,
    .mannerMode,
    .deviceControlKeycode3DMode,
    .contacts,
    .calendar,
    .music,
    .calculator,
    .zenkakuHankaku,
    .eisu,
    .muhenkan,
    .henkan,
    .katakanaHiragana,
    .yen,
    .ro,
    .kana,
    .assist,
    .brightnessDown,
    .brightnessUp,
    .mediaAudioTrack,
    .sleep,
    .wakeup,
    .pairing,
    .mediaTopMenu,
    .deviceControlKeycode11,
    .deviceControlKeycode12,
    .lastChannel,
    .tvDataService,
    .voiceAssist,
    .tvRadioService,
    .tvTeletext,
    .tvNumberEntry,
    .tvTerrestrialAnalog,
    .tvTerrestrialDigital,
    .tvSatellite,
    .tvSatelliteBs,
    .tvSatelliteCs,
    .tvSatelliteService,
    .tvNetwork,
    .tvAntennaCable,
    .tvInputHdmi1,
    .tvInputHdmi2,
    .tvInputHdmi3,
    .tvInputHdmi4,
    .tvInputComposite1,
    .tvInputComposite2,
    .tvInputComponent1,
    .tvInputComponent2,
    .tvInputVga1,
    .tvAudioDescription,
    .tvAudioDescriptionMixUp,
    .tvAudioDescriptionMixDown,
    .tvZoomMode,
    .tvContentsMenu,
    .tvMediaContextMenu,
    .tvTimerProgramming,
    .help,
    .navigatePrevious,
    .navigateNext,
    .navigateIn,
    .navigateOut,
    .stemPrimary,
    .stem1,
    .stem2,
    .stem3,
    .dpadUpLeft,
    .dpadDownLeft,
    .dpadUpRight,
    .dpadDownRight,
    .mediaSkipForward,
    .mediaSkipBackward,
    .mediaStepForward,
    .mediaStepBackward,
    .softSleep,
    .cut,
    .copy,
    .paste,
    .systemNavigationUp,
    .systemNavigationDown,
    .systemNavigationLeft,
    .systemNavigationRight,
    .allApps,
    .refresh,
    .thumbsUp,
    .thumbsDown,
    .profileSwitch,
    .videoApp1,
    .videoApp2,
    .videoApp3,
    .videoApp4,
    .videoApp5,
    .videoApp6,
    .videoApp7,
    .videoApp8,
    .featuredApp1,
    .featuredApp2,
    .featuredApp3,
    .featuredApp4,
    .demoApp1,
    .demoApp2,
    .demoApp3,
    .demoApp4,
  ]
}

#endif  // swift(>=4.2)

public enum Inner_Types_DeviceControlButton: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/MotionEvent.java
  /// https://developer.android.com/reference/android/view/MotionEvent
  case unspecified // = 0

  /// left mouse
  case primary // = 1

  /// right mouse
  case secondary // = 2

  /// middle mouse
  case tertiary // = 4
  case back // = 8
  case forward // = 16
  case stylusPrimary // = 32
  case stylusSecondary // = 64
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .primary
    case 2: self = .secondary
    case 4: self = .tertiary
    case 8: self = .back
    case 16: self = .forward
    case 32: self = .stylusPrimary
    case 64: self = .stylusSecondary
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .primary: return 1
    case .secondary: return 2
    case .tertiary: return 4
    case .back: return 8
    case .forward: return 16
    case .stylusPrimary: return 32
    case .stylusSecondary: return 64
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Inner_Types_DeviceControlButton: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Inner_Types_DeviceControlButton] = [
    .unspecified,
    .primary,
    .secondary,
    .tertiary,
    .back,
    .forward,
    .stylusPrimary,
    .stylusSecondary,
  ]
}

#endif  // swift(>=4.2)

public enum Inner_Types_DeviceControlCopyKey: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case copy // = 1
  case cut // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .copy
    case 2: self = .cut
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .copy: return 1
    case .cut: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Inner_Types_DeviceControlCopyKey: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Inner_Types_DeviceControlCopyKey] = [
    .unspecified,
    .copy,
    .cut,
  ]
}

#endif  // swift(>=4.2)

public enum Inner_Types_DeviceControlSequece: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Inner_Types_DeviceControlSequece: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Inner_Types_DeviceControlSequece] = [
    .unspecified,
  ]
}

#endif  // swift(>=4.2)

public struct Inner_Types_DevicePosition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var x: Int32 = 0

  public var y: Int32 = 0

  public var screenWidth: UInt32 = 0

  public var screenHeight: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// reference
/// https://github.com/Genymobile/scrcpy/blob/master/server/src/main/java/com/genymobile/scrcpy/ControlMessage.java
public struct Inner_Types_DeviceControl {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Inner_Types_DeviceControlType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  public var metaState: Inner_Types_DeviceControlMetaState {
    get {return _storage._metaState}
    set {_uniqueStorage()._metaState = newValue}
  }

  public var action: Inner_Types_DeviceControlAction {
    get {return _storage._action}
    set {_uniqueStorage()._action = newValue}
  }

  public var keycode: Inner_Types_DeviceControlKeycode {
    get {return _storage._keycode}
    set {_uniqueStorage()._keycode = newValue}
  }

  public var buttons: Int32 {
    get {return _storage._buttons}
    set {_uniqueStorage()._buttons = newValue}
  }

  public var pointerID: Int64 {
    get {return _storage._pointerID}
    set {_uniqueStorage()._pointerID = newValue}
  }

  public var pressure: Float {
    get {return _storage._pressure}
    set {_uniqueStorage()._pressure = newValue}
  }

  public var position: Inner_Types_DevicePosition {
    get {return _storage._position ?? Inner_Types_DevicePosition()}
    set {_uniqueStorage()._position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return _storage._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {_uniqueStorage()._position = nil}

  public var hScroll: Int32 {
    get {return _storage._hScroll}
    set {_uniqueStorage()._hScroll = newValue}
  }

  public var vScroll: Int32 {
    get {return _storage._vScroll}
    set {_uniqueStorage()._vScroll = newValue}
  }

  public var copyKey: Inner_Types_DeviceControlCopyKey {
    get {return _storage._copyKey}
    set {_uniqueStorage()._copyKey = newValue}
  }

  public var paste: Bool {
    get {return _storage._paste}
    set {_uniqueStorage()._paste = newValue}
  }

  public var `repeat`: Int32 {
    get {return _storage._repeat}
    set {_uniqueStorage()._repeat = newValue}
  }

  public var sequence: Int64 {
    get {return _storage._sequence}
    set {_uniqueStorage()._sequence = newValue}
  }

  /// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
  /// required for ios key input.
  public var key: String {
    get {return _storage._key}
    set {_uniqueStorage()._key = newValue}
  }

  /// https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp
  /// required for ios touch input move time calculation.
  public var timeStamp: UInt64 {
    get {return _storage._timeStamp}
    set {_uniqueStorage()._timeStamp = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Inner_Types_DeviceControlType: @unchecked Sendable {}
extension Inner_Types_DeviceControlMetaState: @unchecked Sendable {}
extension Inner_Types_DeviceControlAction: @unchecked Sendable {}
extension Inner_Types_DeviceControlKeycode: @unchecked Sendable {}
extension Inner_Types_DeviceControlButton: @unchecked Sendable {}
extension Inner_Types_DeviceControlCopyKey: @unchecked Sendable {}
extension Inner_Types_DeviceControlSequece: @unchecked Sendable {}
extension Inner_Types_DevicePosition: @unchecked Sendable {}
extension Inner_Types_DeviceControl: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "inner.types"

extension Inner_Types_DeviceControlType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEVICE_CONTROL_TYPE_UNSPECIFIED"),
    1: .aliased(proto: "DEVICE_CONTROL_TYPE_AOS_INJECT_KEYCODE", aliases: ["DEVICE_CONTROL_TYPE_DESKTOP_INJECT_KEYCODE", "DEVICE_CONTROL_TYPE_IOS_INJECT_KEYCODE"]),
    2: .aliased(proto: "DEVICE_CONTROL_TYPE_AOS_INJECT_TEXT", aliases: ["DEVICE_CONTROL_TYPE_DESKTOP_INJECT_TEXT", "DEVICE_CONTROL_TYPE_IOS_INJECT_TEXT"]),
    3: .aliased(proto: "DEVICE_CONTROL_TYPE_AOS_INJECT_TOUCH_EVENT", aliases: ["DEVICE_CONTROL_TYPE_DESKTOP_INJECT_MOUSE_EVENT", "DEVICE_CONTROL_TYPE_IOS_INJECT_TOUCH_EVENT"]),
    4: .aliased(proto: "DEVICE_CONTROL_TYPE_AOS_INJECT_SCROLL_EVENT", aliases: ["DEVICE_CONTROL_TYPE_DESKTOP_INJECT_SCROLL_EVENT", "DEVICE_CONTROL_TYPE_IOS_INJECT_SCROLL_EVENT"]),
    5: .same(proto: "DEVICE_CONTROL_TYPE_AOS_BACK_OR_SCREEN_ON"),
    6: .same(proto: "DEVICE_CONTROL_TYPE_AOS_EXPAND_NOTIFICATION_PANEL"),
    7: .same(proto: "DEVICE_CONTROL_TYPE_AOS_EXPAND_SETTINGS_PANEL"),
    8: .same(proto: "DEVICE_CONTROL_TYPE_AOS_COLLAPSE_PANELS"),
    9: .aliased(proto: "DEVICE_CONTROL_TYPE_AOS_GET_CLIPBOARD", aliases: ["DEVICE_CONTROL_TYPE_DESKTOP_GET_CLIPBOARD", "DEVICE_CONTROL_TYPE_IOS_GET_CLIPBOARD"]),
    10: .aliased(proto: "DEVICE_CONTROL_TYPE_AOS_SET_CLIPBOARD", aliases: ["DEVICE_CONTROL_TYPE_DESKTOP_SET_CLIPBOARD", "DEVICE_CONTROL_TYPE_IOS_SET_CLIPBOARD"]),
    11: .same(proto: "DEVICE_CONTROL_TYPE_AOS_SET_SCREEN_POWER_MODE"),
    12: .same(proto: "DEVICE_CONTROL_TYPE_AOS_ROTATE_DEVICE"),
    30: .same(proto: "DEVICE_CONTROL_TYPE_DESKTOP_ONSCREEN_FOCUSED"),
    31: .same(proto: "DEVICE_CONTROL_TYPE_DESKTOP_ONSCREEN_UNFOCUSED"),
  ]
}

extension Inner_Types_DeviceControlMetaState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEVICE_CONTROL_META_STATE_UNSPECIFIED"),
    1: .aliased(proto: "DEVICE_CONTROL_META_STATE_AOS_SHIFT_ON", aliases: ["DEVICE_CONTROL_META_STATE_DESKTOP_SHIFT"]),
    2: .aliased(proto: "DEVICE_CONTROL_META_STATE_AOS_ALT_ON", aliases: ["DEVICE_CONTROL_META_STATE_DESKTOP_ALT"]),
    4: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_SYM_ON"),
    8: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_FUNCTION_ON"),
    16: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_ALT_LEFT_ON"),
    32: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_ALT_RIGHT_ON"),
    50: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_ALT_MASK"),
    64: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_SHIFT_LEFT_ON"),
    128: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_SHIFT_RIGHT_ON"),
    193: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_SHIFT_MASK"),
    256: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_CAP_LOCKED"),
    512: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_ALT_LOCKED"),
    1024: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_SYM_LOCKED"),
    2048: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_SELECTING"),
    4096: .aliased(proto: "DEVICE_CONTROL_META_STATE_AOS_CTRL_ON", aliases: ["DEVICE_CONTROL_META_STATE_DESKTOP_CTRL"]),
    8192: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_CTRL_LEFT_ON"),
    16384: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_CTRL_RIGHT_ON"),
    28672: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_CTRL_MASK"),
    65536: .aliased(proto: "DEVICE_CONTROL_META_STATE_AOS_META_ON", aliases: ["DEVICE_CONTROL_META_STATE_DESKTOP_META"]),
    131072: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_META_LEFT_ON"),
    262144: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_META_RIGHT_ON"),
    458752: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_META_MASK"),
    1048576: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_CAPS_LOCK_ON"),
    2097152: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_NUM_LOCK_ON"),
    4194304: .same(proto: "DEVICE_CONTROL_META_STATE_AOS_SCROLL_LOCK_ON"),
  ]
}

extension Inner_Types_DeviceControlAction: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .aliased(proto: "DEVICE_CONTROL_ACTION_UNSPECIFIED", aliases: ["DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_DOWN_UNSPECIFIED", "DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_DOWN_UNSPECIFIED", "DEVICE_CONTROL_ACTION_DESKTOP_ACTION_DOWN_UNSPECIFIED", "DEVICE_CONTROL_ACTION_IOS_ACTION_DOWN_UNSPECIFIED"]),
    1: .aliased(proto: "DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_UP", aliases: ["DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_UP", "DEVICE_CONTROL_ACTION_DESKTOP_ACTION_UP", "DEVICE_CONTROL_ACTION_IOS_ACTION_UP"]),
    2: .aliased(proto: "DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_MULTIPLE", aliases: ["DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_MOVE", "DEVICE_CONTROL_ACTION_DESKTOP_ACTION_MOVE", "DEVICE_CONTROL_ACTION_IOS_ACTION_MOVE"]),
    3: .same(proto: "DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_CANCEL"),
    4: .same(proto: "DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_OUTSIDE"),
    5: .same(proto: "DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_POINTER_DOWN"),
    6: .same(proto: "DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_POINTER_UP"),
    7: .same(proto: "DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_HOVER_MOVE"),
    8: .aliased(proto: "DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_SCROLL", aliases: ["DEVICE_CONTROL_ACTION_IOS_ACTION_SCROLL"]),
    9: .same(proto: "DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_HOVER_ENTER"),
    10: .same(proto: "DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_HOVER_EXIT"),
    11: .same(proto: "DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_BUTTON_PRESS"),
    12: .same(proto: "DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_BUTTON_RELEASE"),
    20: .same(proto: "DEVICE_CONTROL_ACTION_DESKTOP_ACTION_DOWNUP"),
  ]
}

extension Inner_Types_DeviceControlKeycode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEVICE_CONTROL_KEYCODE_UNSPECIFIED"),
    1: .same(proto: "DEVICE_CONTROL_KEYCODE_SOFT_LEFT"),
    2: .same(proto: "DEVICE_CONTROL_KEYCODE_SOFT_RIGHT"),
    3: .same(proto: "DEVICE_CONTROL_KEYCODE_HOME"),
    4: .same(proto: "DEVICE_CONTROL_KEYCODE_BACK"),
    5: .same(proto: "DEVICE_CONTROL_KEYCODE_CALL"),
    6: .same(proto: "DEVICE_CONTROL_KEYCODE_ENDCALL"),
    7: .same(proto: "DEVICE_CONTROL_KEYCODE_0"),
    8: .same(proto: "DEVICE_CONTROL_KEYCODE_1"),
    9: .same(proto: "DEVICE_CONTROL_KEYCODE_2"),
    10: .same(proto: "DEVICE_CONTROL_KEYCODE_3"),
    11: .same(proto: "DEVICE_CONTROL_KEYCODE_4"),
    12: .same(proto: "DEVICE_CONTROL_KEYCODE_5"),
    13: .same(proto: "DEVICE_CONTROL_KEYCODE_6"),
    14: .same(proto: "DEVICE_CONTROL_KEYCODE_7"),
    15: .same(proto: "DEVICE_CONTROL_KEYCODE_8"),
    16: .same(proto: "DEVICE_CONTROL_KEYCODE_9"),
    17: .same(proto: "DEVICE_CONTROL_KEYCODE_STAR"),
    18: .same(proto: "DEVICE_CONTROL_KEYCODE_POUND"),
    19: .same(proto: "DEVICE_CONTROL_KEYCODE_DPAD_UP"),
    20: .same(proto: "DEVICE_CONTROL_KEYCODE_DPAD_DOWN"),
    21: .same(proto: "DEVICE_CONTROL_KEYCODE_DPAD_LEFT"),
    22: .same(proto: "DEVICE_CONTROL_KEYCODE_DPAD_RIGHT"),
    23: .same(proto: "DEVICE_CONTROL_KEYCODE_DPAD_CENTER"),
    24: .same(proto: "DEVICE_CONTROL_KEYCODE_VOLUME_UP"),
    25: .same(proto: "DEVICE_CONTROL_KEYCODE_VOLUME_DOWN"),
    26: .same(proto: "DEVICE_CONTROL_KEYCODE_POWER"),
    27: .same(proto: "DEVICE_CONTROL_KEYCODE_CAMERA"),
    28: .same(proto: "DEVICE_CONTROL_KEYCODE_CLEAR"),
    29: .same(proto: "DEVICE_CONTROL_KEYCODE_A"),
    30: .same(proto: "DEVICE_CONTROL_KEYCODE_B"),
    31: .same(proto: "DEVICE_CONTROL_KEYCODE_C"),
    32: .same(proto: "DEVICE_CONTROL_KEYCODE_D"),
    33: .same(proto: "DEVICE_CONTROL_KEYCODE_E"),
    34: .same(proto: "DEVICE_CONTROL_KEYCODE_F"),
    35: .same(proto: "DEVICE_CONTROL_KEYCODE_G"),
    36: .same(proto: "DEVICE_CONTROL_KEYCODE_H"),
    37: .same(proto: "DEVICE_CONTROL_KEYCODE_I"),
    38: .same(proto: "DEVICE_CONTROL_KEYCODE_J"),
    39: .same(proto: "DEVICE_CONTROL_KEYCODE_K"),
    40: .same(proto: "DEVICE_CONTROL_KEYCODE_L"),
    41: .same(proto: "DEVICE_CONTROL_KEYCODE_M"),
    42: .same(proto: "DEVICE_CONTROL_KEYCODE_N"),
    43: .same(proto: "DEVICE_CONTROL_KEYCODE_O"),
    44: .same(proto: "DEVICE_CONTROL_KEYCODE_P"),
    45: .same(proto: "DEVICE_CONTROL_KEYCODE_Q"),
    46: .same(proto: "DEVICE_CONTROL_KEYCODE_R"),
    47: .same(proto: "DEVICE_CONTROL_KEYCODE_S"),
    48: .same(proto: "DEVICE_CONTROL_KEYCODE_T"),
    49: .same(proto: "DEVICE_CONTROL_KEYCODE_U"),
    50: .same(proto: "DEVICE_CONTROL_KEYCODE_V"),
    51: .same(proto: "DEVICE_CONTROL_KEYCODE_W"),
    52: .same(proto: "DEVICE_CONTROL_KEYCODE_X"),
    53: .same(proto: "DEVICE_CONTROL_KEYCODE_Y"),
    54: .same(proto: "DEVICE_CONTROL_KEYCODE_Z"),
    55: .same(proto: "DEVICE_CONTROL_KEYCODE_COMMA"),
    56: .same(proto: "DEVICE_CONTROL_KEYCODE_PERIOD"),
    57: .same(proto: "DEVICE_CONTROL_KEYCODE_ALT_LEFT"),
    58: .same(proto: "DEVICE_CONTROL_KEYCODE_ALT_RIGHT"),
    59: .same(proto: "DEVICE_CONTROL_KEYCODE_SHIFT_LEFT"),
    60: .same(proto: "DEVICE_CONTROL_KEYCODE_SHIFT_RIGHT"),
    61: .same(proto: "DEVICE_CONTROL_KEYCODE_TAB"),
    62: .same(proto: "DEVICE_CONTROL_KEYCODE_SPACE"),
    63: .same(proto: "DEVICE_CONTROL_KEYCODE_SYM"),
    64: .same(proto: "DEVICE_CONTROL_KEYCODE_EXPLORER"),
    65: .same(proto: "DEVICE_CONTROL_KEYCODE_ENVELOPE"),
    66: .same(proto: "DEVICE_CONTROL_KEYCODE_ENTER"),
    67: .same(proto: "DEVICE_CONTROL_KEYCODE_DEL"),
    68: .same(proto: "DEVICE_CONTROL_KEYCODE_GRAVE"),
    69: .same(proto: "DEVICE_CONTROL_KEYCODE_MINUS"),
    70: .same(proto: "DEVICE_CONTROL_KEYCODE_EQUALS"),
    71: .same(proto: "DEVICE_CONTROL_KEYCODE_LEFT_BRACKET"),
    72: .same(proto: "DEVICE_CONTROL_KEYCODE_RIGHT_BRACKET"),
    73: .same(proto: "DEVICE_CONTROL_KEYCODE_BACKSLASH"),
    74: .same(proto: "DEVICE_CONTROL_KEYCODE_SEMICOLON"),
    75: .same(proto: "DEVICE_CONTROL_KEYCODE_APOSTROPHE"),
    76: .same(proto: "DEVICE_CONTROL_KEYCODE_SLASH"),
    77: .same(proto: "DEVICE_CONTROL_KEYCODE_AT"),
    78: .same(proto: "DEVICE_CONTROL_KEYCODE_NUM"),
    79: .same(proto: "DEVICE_CONTROL_KEYCODE_HEADSETHOOK"),
    80: .same(proto: "DEVICE_CONTROL_KEYCODE_FOCUS"),
    81: .same(proto: "DEVICE_CONTROL_KEYCODE_PLUS"),
    82: .same(proto: "DEVICE_CONTROL_KEYCODE_MENU"),
    83: .same(proto: "DEVICE_CONTROL_KEYCODE_NOTIFICATION"),
    84: .same(proto: "DEVICE_CONTROL_KEYCODE_SEARCH"),
    85: .same(proto: "DEVICE_CONTROL_KEYCODE_MEDIA_PLAY_PAUSE"),
    86: .same(proto: "DEVICE_CONTROL_KEYCODE_MEDIA_STOP"),
    87: .same(proto: "DEVICE_CONTROL_KEYCODE_MEDIA_NEXT"),
    88: .same(proto: "DEVICE_CONTROL_KEYCODE_MEDIA_PREVIOUS"),
    89: .same(proto: "DEVICE_CONTROL_KEYCODE_MEDIA_REWIND"),
    90: .same(proto: "DEVICE_CONTROL_KEYCODE_MEDIA_FAST_FORWARD"),
    91: .same(proto: "DEVICE_CONTROL_KEYCODE_MUTE"),
    92: .same(proto: "DEVICE_CONTROL_KEYCODE_PAGE_UP"),
    93: .same(proto: "DEVICE_CONTROL_KEYCODE_PAGE_DOWN"),
    94: .same(proto: "DEVICE_CONTROL_KEYCODE_PICTSYMBOLS"),
    95: .same(proto: "DEVICE_CONTROL_KEYCODE_SWITCH_CHARSET"),
    96: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_A"),
    97: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_B"),
    98: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_C"),
    99: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_X"),
    100: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_Y"),
    101: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_Z"),
    102: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_L1"),
    103: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_R1"),
    104: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_L2"),
    105: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_R2"),
    106: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_THUMBL"),
    107: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_THUMBR"),
    108: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_START"),
    109: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_SELECT"),
    110: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_MODE"),
    111: .same(proto: "DEVICE_CONTROL_KEYCODE_ESCAPE"),
    112: .same(proto: "DEVICE_CONTROL_KEYCODE_FORWARD_DEL"),
    113: .same(proto: "DEVICE_CONTROL_KEYCODE_CTRL_LEFT"),
    114: .same(proto: "DEVICE_CONTROL_KEYCODE_CTRL_RIGHT"),
    115: .same(proto: "DEVICE_CONTROL_KEYCODE_CAPS_LOCK"),
    116: .same(proto: "DEVICE_CONTROL_KEYCODE_SCROLL_LOCK"),
    117: .same(proto: "DEVICE_CONTROL_KEYCODE_META_LEFT"),
    118: .same(proto: "DEVICE_CONTROL_KEYCODE_META_RIGHT"),
    119: .same(proto: "DEVICE_CONTROL_KEYCODE_FUNCTION"),
    120: .same(proto: "DEVICE_CONTROL_KEYCODE_SYSRQ"),
    121: .same(proto: "DEVICE_CONTROL_KEYCODE_BREAK"),
    122: .same(proto: "DEVICE_CONTROL_KEYCODE_MOVE_HOME"),
    123: .same(proto: "DEVICE_CONTROL_KEYCODE_MOVE_END"),
    124: .same(proto: "DEVICE_CONTROL_KEYCODE_INSERT"),
    125: .same(proto: "DEVICE_CONTROL_KEYCODE_FORWARD"),
    126: .same(proto: "DEVICE_CONTROL_KEYCODE_MEDIA_PLAY"),
    127: .same(proto: "DEVICE_CONTROL_KEYCODE_MEDIA_PAUSE"),
    128: .same(proto: "DEVICE_CONTROL_KEYCODE_MEDIA_CLOSE"),
    129: .same(proto: "DEVICE_CONTROL_KEYCODE_MEDIA_EJECT"),
    130: .same(proto: "DEVICE_CONTROL_KEYCODE_MEDIA_RECORD"),
    131: .same(proto: "DEVICE_CONTROL_KEYCODE_F1"),
    132: .same(proto: "DEVICE_CONTROL_KEYCODE_F2"),
    133: .same(proto: "DEVICE_CONTROL_KEYCODE_F3"),
    134: .same(proto: "DEVICE_CONTROL_KEYCODE_F4"),
    135: .same(proto: "DEVICE_CONTROL_KEYCODE_F5"),
    136: .same(proto: "DEVICE_CONTROL_KEYCODE_F6"),
    137: .same(proto: "DEVICE_CONTROL_KEYCODE_F7"),
    138: .same(proto: "DEVICE_CONTROL_KEYCODE_F8"),
    139: .same(proto: "DEVICE_CONTROL_KEYCODE_F9"),
    140: .same(proto: "DEVICE_CONTROL_KEYCODE_F10"),
    141: .same(proto: "DEVICE_CONTROL_KEYCODE_F11"),
    142: .same(proto: "DEVICE_CONTROL_KEYCODE_F12"),
    143: .same(proto: "DEVICE_CONTROL_KEYCODE_NUM_LOCK"),
    144: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_0"),
    145: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_1"),
    146: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_2"),
    147: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_3"),
    148: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_4"),
    149: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_5"),
    150: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_6"),
    151: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_7"),
    152: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_8"),
    153: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_9"),
    154: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_DIVIDE"),
    155: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_MULTIPLY"),
    156: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_SUBTRACT"),
    157: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_ADD"),
    158: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_DOT"),
    159: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_COMMA"),
    160: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_ENTER"),
    161: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_EQUALS"),
    162: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_LEFT_PAREN"),
    163: .same(proto: "DEVICE_CONTROL_KEYCODE_NUMPAD_RIGHT_PAREN"),
    164: .same(proto: "DEVICE_CONTROL_KEYCODE_VOLUME_MUTE"),
    165: .same(proto: "DEVICE_CONTROL_KEYCODE_INFO"),
    166: .same(proto: "DEVICE_CONTROL_KEYCODE_CHANNEL_UP"),
    167: .same(proto: "DEVICE_CONTROL_KEYCODE_CHANNEL_DOWN"),
    168: .same(proto: "DEVICE_CONTROL_KEYCODE_ZOOM_IN"),
    169: .same(proto: "DEVICE_CONTROL_KEYCODE_ZOOM_OUT"),
    170: .same(proto: "DEVICE_CONTROL_KEYCODE_TV"),
    171: .same(proto: "DEVICE_CONTROL_KEYCODE_WINDOW"),
    172: .same(proto: "DEVICE_CONTROL_KEYCODE_GUIDE"),
    173: .same(proto: "DEVICE_CONTROL_KEYCODE_DVR"),
    174: .same(proto: "DEVICE_CONTROL_KEYCODE_BOOKMARK"),
    175: .same(proto: "DEVICE_CONTROL_KEYCODE_CAPTIONS"),
    176: .same(proto: "DEVICE_CONTROL_KEYCODE_SETTINGS"),
    177: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_POWER"),
    178: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_INPUT"),
    179: .same(proto: "DEVICE_CONTROL_KEYCODE_STB_POWER"),
    180: .same(proto: "DEVICE_CONTROL_KEYCODE_STB_INPUT"),
    181: .same(proto: "DEVICE_CONTROL_KEYCODE_AVR_POWER"),
    182: .same(proto: "DEVICE_CONTROL_KEYCODE_AVR_INPUT"),
    183: .same(proto: "DEVICE_CONTROL_KEYCODE_PROG_RED"),
    184: .same(proto: "DEVICE_CONTROL_KEYCODE_PROG_GREEN"),
    185: .same(proto: "DEVICE_CONTROL_KEYCODE_PROG_YELLOW"),
    186: .same(proto: "DEVICE_CONTROL_KEYCODE_PROG_BLUE"),
    187: .same(proto: "DEVICE_CONTROL_KEYCODE_APP_SWITCH"),
    188: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_1"),
    189: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_2"),
    190: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_3"),
    191: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_4"),
    192: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_5"),
    193: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_6"),
    194: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_7"),
    195: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_8"),
    196: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_9"),
    197: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_10"),
    198: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_11"),
    199: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_12"),
    200: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_13"),
    201: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_14"),
    202: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_15"),
    203: .same(proto: "DEVICE_CONTROL_KEYCODE_BUTTON_16"),
    204: .same(proto: "DEVICE_CONTROL_KEYCODE_LANGUAGE_SWITCH"),
    205: .same(proto: "DEVICE_CONTROL_KEYCODE_MANNER_MODE"),
    206: .same(proto: "DEVICE_CONTROL_KEYCODE_3D_MODE"),
    207: .same(proto: "DEVICE_CONTROL_KEYCODE_CONTACTS"),
    208: .same(proto: "DEVICE_CONTROL_KEYCODE_CALENDAR"),
    209: .same(proto: "DEVICE_CONTROL_KEYCODE_MUSIC"),
    210: .same(proto: "DEVICE_CONTROL_KEYCODE_CALCULATOR"),
    211: .same(proto: "DEVICE_CONTROL_KEYCODE_ZENKAKU_HANKAKU"),
    212: .same(proto: "DEVICE_CONTROL_KEYCODE_EISU"),
    213: .same(proto: "DEVICE_CONTROL_KEYCODE_MUHENKAN"),
    214: .same(proto: "DEVICE_CONTROL_KEYCODE_HENKAN"),
    215: .same(proto: "DEVICE_CONTROL_KEYCODE_KATAKANA_HIRAGANA"),
    216: .same(proto: "DEVICE_CONTROL_KEYCODE_YEN"),
    217: .same(proto: "DEVICE_CONTROL_KEYCODE_RO"),
    218: .same(proto: "DEVICE_CONTROL_KEYCODE_KANA"),
    219: .same(proto: "DEVICE_CONTROL_KEYCODE_ASSIST"),
    220: .same(proto: "DEVICE_CONTROL_KEYCODE_BRIGHTNESS_DOWN"),
    221: .same(proto: "DEVICE_CONTROL_KEYCODE_BRIGHTNESS_UP"),
    222: .same(proto: "DEVICE_CONTROL_KEYCODE_MEDIA_AUDIO_TRACK"),
    223: .same(proto: "DEVICE_CONTROL_KEYCODE_SLEEP"),
    224: .same(proto: "DEVICE_CONTROL_KEYCODE_WAKEUP"),
    225: .same(proto: "DEVICE_CONTROL_KEYCODE_PAIRING"),
    226: .same(proto: "DEVICE_CONTROL_KEYCODE_MEDIA_TOP_MENU"),
    227: .same(proto: "DEVICE_CONTROL_KEYCODE_11"),
    228: .same(proto: "DEVICE_CONTROL_KEYCODE_12"),
    229: .same(proto: "DEVICE_CONTROL_KEYCODE_LAST_CHANNEL"),
    230: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_DATA_SERVICE"),
    231: .same(proto: "DEVICE_CONTROL_KEYCODE_VOICE_ASSIST"),
    232: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_RADIO_SERVICE"),
    233: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_TELETEXT"),
    234: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_NUMBER_ENTRY"),
    235: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_TERRESTRIAL_ANALOG"),
    236: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_TERRESTRIAL_DIGITAL"),
    237: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_SATELLITE"),
    238: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_SATELLITE_BS"),
    239: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_SATELLITE_CS"),
    240: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_SATELLITE_SERVICE"),
    241: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_NETWORK"),
    242: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_ANTENNA_CABLE"),
    243: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_1"),
    244: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_2"),
    245: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_3"),
    246: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_4"),
    247: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPOSITE_1"),
    248: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPOSITE_2"),
    249: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPONENT_1"),
    250: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPONENT_2"),
    251: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_INPUT_VGA_1"),
    252: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_AUDIO_DESCRIPTION"),
    253: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP"),
    254: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN"),
    255: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_ZOOM_MODE"),
    256: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_CONTENTS_MENU"),
    257: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_MEDIA_CONTEXT_MENU"),
    258: .same(proto: "DEVICE_CONTROL_KEYCODE_TV_TIMER_PROGRAMMING"),
    259: .same(proto: "DEVICE_CONTROL_KEYCODE_HELP"),
    260: .same(proto: "DEVICE_CONTROL_KEYCODE_NAVIGATE_PREVIOUS"),
    261: .same(proto: "DEVICE_CONTROL_KEYCODE_NAVIGATE_NEXT"),
    262: .same(proto: "DEVICE_CONTROL_KEYCODE_NAVIGATE_IN"),
    263: .same(proto: "DEVICE_CONTROL_KEYCODE_NAVIGATE_OUT"),
    264: .same(proto: "DEVICE_CONTROL_KEYCODE_STEM_PRIMARY"),
    265: .same(proto: "DEVICE_CONTROL_KEYCODE_STEM_1"),
    266: .same(proto: "DEVICE_CONTROL_KEYCODE_STEM_2"),
    267: .same(proto: "DEVICE_CONTROL_KEYCODE_STEM_3"),
    268: .same(proto: "DEVICE_CONTROL_KEYCODE_DPAD_UP_LEFT"),
    269: .same(proto: "DEVICE_CONTROL_KEYCODE_DPAD_DOWN_LEFT"),
    270: .same(proto: "DEVICE_CONTROL_KEYCODE_DPAD_UP_RIGHT"),
    271: .same(proto: "DEVICE_CONTROL_KEYCODE_DPAD_DOWN_RIGHT"),
    272: .same(proto: "DEVICE_CONTROL_KEYCODE_MEDIA_SKIP_FORWARD"),
    273: .same(proto: "DEVICE_CONTROL_KEYCODE_MEDIA_SKIP_BACKWARD"),
    274: .same(proto: "DEVICE_CONTROL_KEYCODE_MEDIA_STEP_FORWARD"),
    275: .same(proto: "DEVICE_CONTROL_KEYCODE_MEDIA_STEP_BACKWARD"),
    276: .same(proto: "DEVICE_CONTROL_KEYCODE_SOFT_SLEEP"),
    277: .same(proto: "DEVICE_CONTROL_KEYCODE_CUT"),
    278: .same(proto: "DEVICE_CONTROL_KEYCODE_COPY"),
    279: .same(proto: "DEVICE_CONTROL_KEYCODE_PASTE"),
    280: .same(proto: "DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_UP"),
    281: .same(proto: "DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_DOWN"),
    282: .same(proto: "DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_LEFT"),
    283: .same(proto: "DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_RIGHT"),
    284: .same(proto: "DEVICE_CONTROL_KEYCODE_ALL_APPS"),
    285: .same(proto: "DEVICE_CONTROL_KEYCODE_REFRESH"),
    286: .same(proto: "DEVICE_CONTROL_KEYCODE_THUMBS_UP"),
    287: .same(proto: "DEVICE_CONTROL_KEYCODE_THUMBS_DOWN"),
    288: .same(proto: "DEVICE_CONTROL_KEYCODE_PROFILE_SWITCH"),
    289: .same(proto: "DEVICE_CONTROL_KEYCODE_VIDEO_APP_1"),
    290: .same(proto: "DEVICE_CONTROL_KEYCODE_VIDEO_APP_2"),
    291: .same(proto: "DEVICE_CONTROL_KEYCODE_VIDEO_APP_3"),
    292: .same(proto: "DEVICE_CONTROL_KEYCODE_VIDEO_APP_4"),
    293: .same(proto: "DEVICE_CONTROL_KEYCODE_VIDEO_APP_5"),
    294: .same(proto: "DEVICE_CONTROL_KEYCODE_VIDEO_APP_6"),
    295: .same(proto: "DEVICE_CONTROL_KEYCODE_VIDEO_APP_7"),
    296: .same(proto: "DEVICE_CONTROL_KEYCODE_VIDEO_APP_8"),
    297: .same(proto: "DEVICE_CONTROL_KEYCODE_FEATURED_APP_1"),
    298: .same(proto: "DEVICE_CONTROL_KEYCODE_FEATURED_APP_2"),
    299: .same(proto: "DEVICE_CONTROL_KEYCODE_FEATURED_APP_3"),
    300: .same(proto: "DEVICE_CONTROL_KEYCODE_FEATURED_APP_4"),
    301: .same(proto: "DEVICE_CONTROL_KEYCODE_DEMO_APP_1"),
    302: .same(proto: "DEVICE_CONTROL_KEYCODE_DEMO_APP_2"),
    303: .same(proto: "DEVICE_CONTROL_KEYCODE_DEMO_APP_3"),
    304: .same(proto: "DEVICE_CONTROL_KEYCODE_DEMO_APP_4"),
  ]
}

extension Inner_Types_DeviceControlButton: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEVICE_CONTROL_BUTTON_UNSPECIFIED"),
    1: .same(proto: "DEVICE_CONTROL_BUTTON_PRIMARY"),
    2: .same(proto: "DEVICE_CONTROL_BUTTON_SECONDARY"),
    4: .same(proto: "DEVICE_CONTROL_BUTTON_TERTIARY"),
    8: .same(proto: "DEVICE_CONTROL_BUTTON_BACK"),
    16: .same(proto: "DEVICE_CONTROL_BUTTON_FORWARD"),
    32: .same(proto: "DEVICE_CONTROL_BUTTON_STYLUS_PRIMARY"),
    64: .same(proto: "DEVICE_CONTROL_BUTTON_STYLUS_SECONDARY"),
  ]
}

extension Inner_Types_DeviceControlCopyKey: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEVICE_CONTROL_COPY_KEY_UNSPECIFIED"),
    1: .same(proto: "DEVICE_CONTROL_COPY_KEY_COPY"),
    2: .same(proto: "DEVICE_CONTROL_COPY_KEY_CUT"),
  ]
}

extension Inner_Types_DeviceControlSequece: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEVICE_CONTROL_SEQUECE_UNSPECIFIED"),
  ]
}

extension Inner_Types_DevicePosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DevicePosition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .standard(proto: "screen_width"),
    4: .standard(proto: "screen_height"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularSFixed32Field(value: &self.x) }()
      case 2: try { try decoder.decodeSingularSFixed32Field(value: &self.y) }()
      case 3: try { try decoder.decodeSingularFixed32Field(value: &self.screenWidth) }()
      case 4: try { try decoder.decodeSingularFixed32Field(value: &self.screenHeight) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularSFixed32Field(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularSFixed32Field(value: self.y, fieldNumber: 2)
    }
    if self.screenWidth != 0 {
      try visitor.visitSingularFixed32Field(value: self.screenWidth, fieldNumber: 3)
    }
    if self.screenHeight != 0 {
      try visitor.visitSingularFixed32Field(value: self.screenHeight, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Inner_Types_DevicePosition, rhs: Inner_Types_DevicePosition) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.screenWidth != rhs.screenWidth {return false}
    if lhs.screenHeight != rhs.screenHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Inner_Types_DeviceControl: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeviceControl"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "text"),
    3: .standard(proto: "meta_state"),
    4: .same(proto: "action"),
    5: .same(proto: "keycode"),
    6: .same(proto: "buttons"),
    7: .standard(proto: "pointer_id"),
    8: .same(proto: "pressure"),
    9: .same(proto: "position"),
    10: .standard(proto: "h_scroll"),
    11: .standard(proto: "v_scroll"),
    12: .standard(proto: "copy_key"),
    13: .same(proto: "paste"),
    14: .same(proto: "repeat"),
    15: .same(proto: "sequence"),
    16: .same(proto: "key"),
    17: .standard(proto: "time_stamp"),
  ]

  fileprivate class _StorageClass {
    var _type: Inner_Types_DeviceControlType = .unspecified
    var _text: String = String()
    var _metaState: Inner_Types_DeviceControlMetaState = .unspecified
    var _action: Inner_Types_DeviceControlAction = .unspecified
    var _keycode: Inner_Types_DeviceControlKeycode = .unspecified
    var _buttons: Int32 = 0
    var _pointerID: Int64 = 0
    var _pressure: Float = 0
    var _position: Inner_Types_DevicePosition? = nil
    var _hScroll: Int32 = 0
    var _vScroll: Int32 = 0
    var _copyKey: Inner_Types_DeviceControlCopyKey = .unspecified
    var _paste: Bool = false
    var _repeat: Int32 = 0
    var _sequence: Int64 = 0
    var _key: String = String()
    var _timeStamp: UInt64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _text = source._text
      _metaState = source._metaState
      _action = source._action
      _keycode = source._keycode
      _buttons = source._buttons
      _pointerID = source._pointerID
      _pressure = source._pressure
      _position = source._position
      _hScroll = source._hScroll
      _vScroll = source._vScroll
      _copyKey = source._copyKey
      _paste = source._paste
      _repeat = source._repeat
      _sequence = source._sequence
      _key = source._key
      _timeStamp = source._timeStamp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._type) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._text) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._metaState) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._action) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._keycode) }()
        case 6: try { try decoder.decodeSingularSFixed32Field(value: &_storage._buttons) }()
        case 7: try { try decoder.decodeSingularSFixed64Field(value: &_storage._pointerID) }()
        case 8: try { try decoder.decodeSingularFloatField(value: &_storage._pressure) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._position) }()
        case 10: try { try decoder.decodeSingularSFixed32Field(value: &_storage._hScroll) }()
        case 11: try { try decoder.decodeSingularSFixed32Field(value: &_storage._vScroll) }()
        case 12: try { try decoder.decodeSingularEnumField(value: &_storage._copyKey) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._paste) }()
        case 14: try { try decoder.decodeSingularSFixed32Field(value: &_storage._repeat) }()
        case 15: try { try decoder.decodeSingularSFixed64Field(value: &_storage._sequence) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._key) }()
        case 17: try { try decoder.decodeSingularFixed64Field(value: &_storage._timeStamp) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._type != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      if !_storage._text.isEmpty {
        try visitor.visitSingularStringField(value: _storage._text, fieldNumber: 2)
      }
      if _storage._metaState != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._metaState, fieldNumber: 3)
      }
      if _storage._action != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._action, fieldNumber: 4)
      }
      if _storage._keycode != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._keycode, fieldNumber: 5)
      }
      if _storage._buttons != 0 {
        try visitor.visitSingularSFixed32Field(value: _storage._buttons, fieldNumber: 6)
      }
      if _storage._pointerID != 0 {
        try visitor.visitSingularSFixed64Field(value: _storage._pointerID, fieldNumber: 7)
      }
      if _storage._pressure != 0 {
        try visitor.visitSingularFloatField(value: _storage._pressure, fieldNumber: 8)
      }
      try { if let v = _storage._position {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if _storage._hScroll != 0 {
        try visitor.visitSingularSFixed32Field(value: _storage._hScroll, fieldNumber: 10)
      }
      if _storage._vScroll != 0 {
        try visitor.visitSingularSFixed32Field(value: _storage._vScroll, fieldNumber: 11)
      }
      if _storage._copyKey != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._copyKey, fieldNumber: 12)
      }
      if _storage._paste != false {
        try visitor.visitSingularBoolField(value: _storage._paste, fieldNumber: 13)
      }
      if _storage._repeat != 0 {
        try visitor.visitSingularSFixed32Field(value: _storage._repeat, fieldNumber: 14)
      }
      if _storage._sequence != 0 {
        try visitor.visitSingularSFixed64Field(value: _storage._sequence, fieldNumber: 15)
      }
      if !_storage._key.isEmpty {
        try visitor.visitSingularStringField(value: _storage._key, fieldNumber: 16)
      }
      if _storage._timeStamp != 0 {
        try visitor.visitSingularFixed64Field(value: _storage._timeStamp, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Inner_Types_DeviceControl, rhs: Inner_Types_DeviceControl) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._text != rhs_storage._text {return false}
        if _storage._metaState != rhs_storage._metaState {return false}
        if _storage._action != rhs_storage._action {return false}
        if _storage._keycode != rhs_storage._keycode {return false}
        if _storage._buttons != rhs_storage._buttons {return false}
        if _storage._pointerID != rhs_storage._pointerID {return false}
        if _storage._pressure != rhs_storage._pressure {return false}
        if _storage._position != rhs_storage._position {return false}
        if _storage._hScroll != rhs_storage._hScroll {return false}
        if _storage._vScroll != rhs_storage._vScroll {return false}
        if _storage._copyKey != rhs_storage._copyKey {return false}
        if _storage._paste != rhs_storage._paste {return false}
        if _storage._repeat != rhs_storage._repeat {return false}
        if _storage._sequence != rhs_storage._sequence {return false}
        if _storage._key != rhs_storage._key {return false}
        if _storage._timeStamp != rhs_storage._timeStamp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
