// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: outer/profile/runtime_process_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Outer_Profile_RuntimeProcessInfoCpu {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var percent: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Outer_Profile_RuntimeProcessInfoMem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var percent: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Outer_Profile_RuntimeProcessInfoFs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var writeBytes: UInt64 = 0

  public var readBytes: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Outer_Profile_RuntimeProcessInfoNet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var sendBytes: UInt64 = 0

  public var readBytes: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Outer_Profile_RuntimeProcessInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var pid: UInt32 = 0

  public var isForeground: Bool = false

  public var cpues: [Outer_Profile_RuntimeProcessInfoCpu] = []

  public var mems: [Outer_Profile_RuntimeProcessInfoMem] = []

  public var fses: [Outer_Profile_RuntimeProcessInfoFs] = []

  public var nets: [Outer_Profile_RuntimeProcessInfoNet] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Outer_Profile_RuntimeProcessInfoCpu: @unchecked Sendable {}
extension Outer_Profile_RuntimeProcessInfoMem: @unchecked Sendable {}
extension Outer_Profile_RuntimeProcessInfoFs: @unchecked Sendable {}
extension Outer_Profile_RuntimeProcessInfoNet: @unchecked Sendable {}
extension Outer_Profile_RuntimeProcessInfo: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "outer.profile"

extension Outer_Profile_RuntimeProcessInfoCpu: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RuntimeProcessInfoCpu"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "percent"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.percent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.percent != 0 {
      try visitor.visitSingularFloatField(value: self.percent, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Outer_Profile_RuntimeProcessInfoCpu, rhs: Outer_Profile_RuntimeProcessInfoCpu) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.percent != rhs.percent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Outer_Profile_RuntimeProcessInfoMem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RuntimeProcessInfoMem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "percent"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.percent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.percent != 0 {
      try visitor.visitSingularFloatField(value: self.percent, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Outer_Profile_RuntimeProcessInfoMem, rhs: Outer_Profile_RuntimeProcessInfoMem) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.percent != rhs.percent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Outer_Profile_RuntimeProcessInfoFs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RuntimeProcessInfoFs"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "write_bytes"),
    3: .standard(proto: "read_bytes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularFixed64Field(value: &self.writeBytes) }()
      case 3: try { try decoder.decodeSingularFixed64Field(value: &self.readBytes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.writeBytes != 0 {
      try visitor.visitSingularFixed64Field(value: self.writeBytes, fieldNumber: 2)
    }
    if self.readBytes != 0 {
      try visitor.visitSingularFixed64Field(value: self.readBytes, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Outer_Profile_RuntimeProcessInfoFs, rhs: Outer_Profile_RuntimeProcessInfoFs) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.writeBytes != rhs.writeBytes {return false}
    if lhs.readBytes != rhs.readBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Outer_Profile_RuntimeProcessInfoNet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RuntimeProcessInfoNet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "send_bytes"),
    3: .standard(proto: "read_bytes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularFixed64Field(value: &self.sendBytes) }()
      case 3: try { try decoder.decodeSingularFixed64Field(value: &self.readBytes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.sendBytes != 0 {
      try visitor.visitSingularFixed64Field(value: self.sendBytes, fieldNumber: 2)
    }
    if self.readBytes != 0 {
      try visitor.visitSingularFixed64Field(value: self.readBytes, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Outer_Profile_RuntimeProcessInfoNet, rhs: Outer_Profile_RuntimeProcessInfoNet) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.sendBytes != rhs.sendBytes {return false}
    if lhs.readBytes != rhs.readBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Outer_Profile_RuntimeProcessInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RuntimeProcessInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "pid"),
    3: .standard(proto: "is_foreground"),
    5: .same(proto: "cpues"),
    6: .same(proto: "mems"),
    7: .same(proto: "fses"),
    8: .same(proto: "nets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self.pid) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isForeground) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.cpues) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.mems) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.fses) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.nets) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.pid != 0 {
      try visitor.visitSingularFixed32Field(value: self.pid, fieldNumber: 2)
    }
    if self.isForeground != false {
      try visitor.visitSingularBoolField(value: self.isForeground, fieldNumber: 3)
    }
    if !self.cpues.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cpues, fieldNumber: 5)
    }
    if !self.mems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mems, fieldNumber: 6)
    }
    if !self.fses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fses, fieldNumber: 7)
    }
    if !self.nets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nets, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Outer_Profile_RuntimeProcessInfo, rhs: Outer_Profile_RuntimeProcessInfo) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.pid != rhs.pid {return false}
    if lhs.isForeground != rhs.isForeground {return false}
    if lhs.cpues != rhs.cpues {return false}
    if lhs.mems != rhs.mems {return false}
    if lhs.fses != rhs.fses {return false}
    if lhs.nets != rhs.nets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
