// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: outer/errors.proto

package com.dogu.protocol.generated.outer;

public final class Errors {
  private Errors() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * <pre>
   **
   * &#64;note To maintain the uniqueness of error codes, duplicate codes are not
   * allowed.
   * </pre>
   *
   * Protobuf enum {@code outer.Code}
   */
  public enum Code
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     **
     * &#64;note Common errors.
     * 0 ~ 999 is used for common errors.
     * 0 means success code.
     * </pre>
     *
     * <code>CODE_SUCCESS_COMMON_BEGIN_UNSPECIFIED = 0;</code>
     */
    CODE_SUCCESS_COMMON_BEGIN_UNSPECIFIED(0),
    /**
     * <pre>
     **
     * &#64;note Unexpected error.
     * </pre>
     *
     * <code>CODE_UNEXPECTED_ERROR = 1;</code>
     */
    CODE_UNEXPECTED_ERROR(1),
    /**
     * <pre>
     **
     * &#64;note Number errors.
     * </pre>
     *
     * <code>CODE_NUMBER_UNDER_RANGE = 2;</code>
     */
    CODE_NUMBER_UNDER_RANGE(2),
    /**
     * <code>CODE_NUMBER_OVER_RANGE = 3;</code>
     */
    CODE_NUMBER_OVER_RANGE(3),
    /**
     * <code>CODE_NUMBER_ZERO = 4;</code>
     */
    CODE_NUMBER_ZERO(4),
    /**
     * <code>CODE_NUMBER_NULL = 5;</code>
     */
    CODE_NUMBER_NULL(5),
    /**
     * <pre>
     **
     * &#64;note String errors.
     * </pre>
     *
     * <code>CODE_STRING_UNDER_RANGE = 10;</code>
     */
    CODE_STRING_UNDER_RANGE(10),
    /**
     * <code>CODE_STRING_OVER_RANGE = 11;</code>
     */
    CODE_STRING_OVER_RANGE(11),
    /**
     * <code>CODE_STRING_EMPTY = 12;</code>
     */
    CODE_STRING_EMPTY(12),
    /**
     * <code>CODE_STRING_NULL = 13;</code>
     */
    CODE_STRING_NULL(13),
    /**
     * <code>CODE_STRING_PARSE_FAILED = 14;</code>
     */
    CODE_STRING_PARSE_FAILED(14),
    /**
     * <code>CODE_STRING_INVALID_CHARACTER = 15;</code>
     */
    CODE_STRING_INVALID_CHARACTER(15),
    /**
     * <code>CODE_STRING_ENCODING_FAILED = 16;</code>
     */
    CODE_STRING_ENCODING_FAILED(16),
    /**
     * <code>CODE_STRING_DECODING_FAILED = 17;</code>
     */
    CODE_STRING_DECODING_FAILED(17),
    /**
     * <code>CODE_STRING_CONVERSION_FAILED = 18;</code>
     */
    CODE_STRING_CONVERSION_FAILED(18),
    /**
     * <code>CODE_STRING_INVALID_SYNTAX = 19;</code>
     */
    CODE_STRING_INVALID_SYNTAX(19),
    /**
     * <pre>
     **
     * &#64;note Binary errors.
     * </pre>
     *
     * <code>CODE_BINARY_UNDER_RANGE = 20;</code>
     */
    CODE_BINARY_UNDER_RANGE(20),
    /**
     * <code>CODE_BINARY_OVER_RANGE = 21;</code>
     */
    CODE_BINARY_OVER_RANGE(21),
    /**
     * <code>CODE_BINARY_EMPTY = 22;</code>
     */
    CODE_BINARY_EMPTY(22),
    /**
     * <code>CODE_BINARY_NULL = 23;</code>
     */
    CODE_BINARY_NULL(23),
    /**
     * <code>CODE_BINARY_ENCODING_FAILED = 24;</code>
     */
    CODE_BINARY_ENCODING_FAILED(24),
    /**
     * <code>CODE_BINARY_DECODING_FAILED = 25;</code>
     */
    CODE_BINARY_DECODING_FAILED(25),
    /**
     * <code>CODE_BINARY_CONVERSION_FAILED = 26;</code>
     */
    CODE_BINARY_CONVERSION_FAILED(26),
    /**
     * <code>CODE_BINARY_VALIDATION_FAILED = 27;</code>
     */
    CODE_BINARY_VALIDATION_FAILED(27),
    /**
     * <pre>
     **
     * &#64;note Date errors.
     * </pre>
     *
     * <code>CODE_DATE_INVALID_YEAR = 30;</code>
     */
    CODE_DATE_INVALID_YEAR(30),
    /**
     * <code>CODE_DATE_INVALID_MONTH = 31;</code>
     */
    CODE_DATE_INVALID_MONTH(31),
    /**
     * <code>CODE_DATE_INVALID_DAY = 32;</code>
     */
    CODE_DATE_INVALID_DAY(32),
    /**
     * <code>CODE_DATE_INVALID_HOUR = 33;</code>
     */
    CODE_DATE_INVALID_HOUR(33),
    /**
     * <code>CODE_DATE_INVALID_MINITE = 34;</code>
     */
    CODE_DATE_INVALID_MINITE(34),
    /**
     * <code>CODE_DATE_INVALID_SECOND = 35;</code>
     */
    CODE_DATE_INVALID_SECOND(35),
    /**
     * <pre>
     **
     * &#64;note Time errors.
     * </pre>
     *
     * <code>CODE_TIME_INVALID_TIMEZONE = 40;</code>
     */
    CODE_TIME_INVALID_TIMEZONE(40),
    /**
     * <pre>
     **
     * &#64;note Array errors.
     * </pre>
     *
     * <code>CODE_ARRAY_UNDER_RANGE = 50;</code>
     */
    CODE_ARRAY_UNDER_RANGE(50),
    /**
     * <code>CODE_ARRAY_OVER_RANGE = 51;</code>
     */
    CODE_ARRAY_OVER_RANGE(51),
    /**
     * <code>CODE_ARRAY_EMPTY = 52;</code>
     */
    CODE_ARRAY_EMPTY(52),
    /**
     * <code>CODE_ARRAY_KEY_NOTFOUND = 53;</code>
     */
    CODE_ARRAY_KEY_NOTFOUND(53),
    /**
     * <pre>
     **
     * &#64;note Map errors.
     * map means key-value storage like dictionary.
     * </pre>
     *
     * <code>CODE_MAP_KEY_NOTFOUND = 60;</code>
     */
    CODE_MAP_KEY_NOTFOUND(60),
    /**
     * <pre>
     **
     * &#64;note Concurrency errors.
     * </pre>
     *
     * <code>CODE_CONCURRENCY_LOCK_FAILED = 70;</code>
     */
    CODE_CONCURRENCY_LOCK_FAILED(70),
    /**
     * <code>CODE_CONCURRENCY_DEADLOCK = 71;</code>
     */
    CODE_CONCURRENCY_DEADLOCK(71),
    /**
     * <code>CODE_CONCURRENCY_RACE = 72;</code>
     */
    CODE_CONCURRENCY_RACE(72),
    /**
     * <pre>
     **
     * &#64;note Filesystem errors.
     * </pre>
     *
     * <code>CODE_FILESYSTEM_FILE_NOTFOUND = 90;</code>
     */
    CODE_FILESYSTEM_FILE_NOTFOUND(90),
    /**
     * <code>CODE_FILESYSTEM_DIRECTORY_NOTFOUND = 91;</code>
     */
    CODE_FILESYSTEM_DIRECTORY_NOTFOUND(91),
    /**
     * <code>CODE_FILESYSTEM_FILE_OPEN_FAILED = 92;</code>
     */
    CODE_FILESYSTEM_FILE_OPEN_FAILED(92),
    /**
     * <code>CODE_FILESYSTEM_FILE_CLOSE_FAILED = 93;</code>
     */
    CODE_FILESYSTEM_FILE_CLOSE_FAILED(93),
    /**
     * <code>CODE_FILESYSTEM_FILE_READ_FAILED = 94;</code>
     */
    CODE_FILESYSTEM_FILE_READ_FAILED(94),
    /**
     * <code>CODE_FILESYSTEM_FILE_WRITE_FAILED = 95;</code>
     */
    CODE_FILESYSTEM_FILE_WRITE_FAILED(95),
    /**
     * <code>CODE_FILESYSTEM_DISK_FULL = 96;</code>
     */
    CODE_FILESYSTEM_DISK_FULL(96),
    /**
     * <pre>
     **
     * &#64;note Network errors.
     * </pre>
     *
     * <code>CODE_NETWORK_CONNECTION_FAILED = 100;</code>
     */
    CODE_NETWORK_CONNECTION_FAILED(100),
    /**
     * <code>CODE_NETWORK_CONNECTION_CLOSED = 101;</code>
     */
    CODE_NETWORK_CONNECTION_CLOSED(101),
    /**
     * <code>CODE_NETWORK_CONNECTION_TIMEOUT = 102;</code>
     */
    CODE_NETWORK_CONNECTION_TIMEOUT(102),
    /**
     * <code>CODE_NETWORK_CONNECTION_REFUSED = 103;</code>
     */
    CODE_NETWORK_CONNECTION_REFUSED(103),
    /**
     * <code>CODE_NETWORK_CONNECTION_ABORTED = 104;</code>
     */
    CODE_NETWORK_CONNECTION_ABORTED(104),
    /**
     * <code>CODE_NETWORK_CONNECTION_ALREADY_CONNECTED = 105;</code>
     */
    CODE_NETWORK_CONNECTION_ALREADY_CONNECTED(105),
    /**
     * <code>CODE_NETWORK_CONNECTION_INVALID_URI = 106;</code>
     */
    CODE_NETWORK_CONNECTION_INVALID_URI(106),
    /**
     * <pre>
     **
     * &#64;note Process errors.
     * </pre>
     *
     * <code>CODE_PROCESS_FORK_FAILED = 110;</code>
     */
    CODE_PROCESS_FORK_FAILED(110),
    /**
     * <code>CODE_PROCESS_EXEC_FAILED = 111;</code>
     */
    CODE_PROCESS_EXEC_FAILED(111),
    /**
     * <code>CODE_PROCESS_WAIT_FAILED = 112;</code>
     */
    CODE_PROCESS_WAIT_FAILED(112),
    /**
     * <code>CODE_PROCESS_KILL_FAILED = 113;</code>
     */
    CODE_PROCESS_KILL_FAILED(113),
    /**
     * <code>CODE_PROCESS_SIGNAL_FAILED = 114;</code>
     */
    CODE_PROCESS_SIGNAL_FAILED(114),
    /**
     * <code>CODE_PROCESS_SIGNAL_NOT_SUPPORTED = 115;</code>
     */
    CODE_PROCESS_SIGNAL_NOT_SUPPORTED(115),
    /**
     * <pre>
     **
     * &#64;note Memory errors.
     * </pre>
     *
     * <code>CODE_MEMORY_ALLOCATION_FAILED = 120;</code>
     */
    CODE_MEMORY_ALLOCATION_FAILED(120),
    /**
     * <code>CODE_MEMORY_REALLOCATION_FAILED = 121;</code>
     */
    CODE_MEMORY_REALLOCATION_FAILED(121),
    /**
     * <code>CODE_MEMORY_FREE_FAILED = 122;</code>
     */
    CODE_MEMORY_FREE_FAILED(122),
    /**
     * <code>CODE_MEMORY_OUT_OF_MEMORY = 123;</code>
     */
    CODE_MEMORY_OUT_OF_MEMORY(123),
    /**
     * <pre>
     **
     * &#64;note Security errors
     * </pre>
     *
     * <code>CODE_SECURITY_UNAUTHENTICATED = 130;</code>
     */
    CODE_SECURITY_UNAUTHENTICATED(130),
    /**
     * <code>CODE_SECURITY_UNAUTHORISED = 131;</code>
     */
    CODE_SECURITY_UNAUTHORISED(131),
    /**
     * <code>CODE_SECURITY_PERMISSION_DENIED = 132;</code>
     */
    CODE_SECURITY_PERMISSION_DENIED(132),
    /**
     * <code>CODE_SECURITY_INVALID_TOKEN = 133;</code>
     */
    CODE_SECURITY_INVALID_TOKEN(133),
    /**
     * <pre>
     **
     * &#64;note Input errors.
     * </pre>
     *
     * <code>CODE_INPUT_NOTREADY = 140;</code>
     */
    CODE_INPUT_NOTREADY(140),
    /**
     * <code>CODE_INPUT_DISCARDED = 141;</code>
     */
    CODE_INPUT_DISCARDED(141),
    /**
     * <code>CODE_INPUT_UNKNOWN = 142;</code>
     */
    CODE_INPUT_UNKNOWN(142),
    /**
     * <pre>
     **
     * &#64;note Screen record errors.
     * </pre>
     *
     * <code>CODE_SCREENRECORD_NOTREADY = 150;</code>
     */
    CODE_SCREENRECORD_NOTREADY(150),
    /**
     * <code>CODE_SCREENRECORD_ALREADY_RECORDING = 151;</code>
     */
    CODE_SCREENRECORD_ALREADY_RECORDING(151),
    /**
     * <code>CODE_SCREENRECORD_NOTSTARTED = 152;</code>
     */
    CODE_SCREENRECORD_NOTSTARTED(152),
    /**
     * <code>CODE_SCREENRECORD_MULTIPLE_RECORDING = 153;</code>
     */
    CODE_SCREENRECORD_MULTIPLE_RECORDING(153),
    /**
     * <code>CODE_SCREENRECORD_NOTFOUND = 154;</code>
     */
    CODE_SCREENRECORD_NOTFOUND(154),
    /**
     * <code>CODE_SCREENRECORD_NOTSUPPORTED = 155;</code>
     */
    CODE_SCREENRECORD_NOTSUPPORTED(155),
    /**
     * <pre>
     **
     * &#64;note WebRTC errors.
     * </pre>
     *
     * <code>CODE_WEBRTC_PEERCONNECTION_FAILED = 160;</code>
     */
    CODE_WEBRTC_PEERCONNECTION_FAILED(160),
    /**
     * <code>CODE_WEBRTC_CODEC_NOTSUPPORTED = 161;</code>
     */
    CODE_WEBRTC_CODEC_NOTSUPPORTED(161),
    /**
     * <pre>
     **
     * &#64;note Device errors.
     * </pre>
     *
     * <code>CODE_DEVICE_NOTFOUND = 200;</code>
     */
    CODE_DEVICE_NOTFOUND(200),
    /**
     * <pre>
     **
     * &#64;note Common errors end.
     * </pre>
     *
     * <code>CODE_COMMON_END = 999;</code>
     */
    CODE_COMMON_END(999),
    /**
     * <pre>
     **
     * &#64;note Dost errors.
     * 1000 ~ 1999 is used for dost app.
     * 1000 ~ 1255 are used for exit codes 0 ~ 255.
     * 1000 means success code.
     * </pre>
     *
     * <code>CODE_DOST_SUCCESS_BEGIN = 1000;</code>
     */
    CODE_DOST_SUCCESS_BEGIN(1000),
    /**
     * <pre>
     **
     * &#64;note Dost errors end.
     * </pre>
     *
     * <code>CODE_DOST_END = 1999;</code>
     */
    CODE_DOST_END(1999),
    /**
     * <pre>
     * &#64;note Host Agent errors.
     * 2000 ~ 2999 is used for host agent process.
     * 2000 ~ 2255 are used for exit codes 0 ~ 255.
     * 2000 means success code.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SUCCESS_BEGIN = 2000;</code>
     */
    CODE_HOST_AGENT_SUCCESS_BEGIN(2000),
    /**
     * <code>CODE_HOST_AGENT_UNEXPECTED_ERROR = 2001;</code>
     */
    CODE_HOST_AGENT_UNEXPECTED_ERROR(2001),
    /**
     * <code>CODE_HOST_AGENT_INVALID_ENV = 2002;</code>
     */
    CODE_HOST_AGENT_INVALID_ENV(2002),
    /**
     * <code>CODE_HOST_AGENT_PORT_IN_USE = 2003;</code>
     */
    CODE_HOST_AGENT_PORT_IN_USE(2003),
    /**
     * <pre>
     * &#64;note reserved for host agent exit code 255.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_EXIT_CODE_END = 2255;</code>
     */
    CODE_HOST_AGENT_EXIT_CODE_END(2255),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGHUP = 2301;</code>
     */
    CODE_HOST_AGENT_SIGHUP(2301),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGINT = 2302;</code>
     */
    CODE_HOST_AGENT_SIGINT(2302),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGQUIT = 2303;</code>
     */
    CODE_HOST_AGENT_SIGQUIT(2303),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGILL = 2304;</code>
     */
    CODE_HOST_AGENT_SIGILL(2304),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGTRAP = 2305;</code>
     */
    CODE_HOST_AGENT_SIGTRAP(2305),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGABRT = 2306;</code>
     */
    CODE_HOST_AGENT_SIGABRT(2306),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGFPE = 2308;</code>
     */
    CODE_HOST_AGENT_SIGFPE(2308),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGKILL = 2309;</code>
     */
    CODE_HOST_AGENT_SIGKILL(2309),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGSEGV = 2311;</code>
     */
    CODE_HOST_AGENT_SIGSEGV(2311),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGPIPE = 2313;</code>
     */
    CODE_HOST_AGENT_SIGPIPE(2313),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGALRM = 2314;</code>
     */
    CODE_HOST_AGENT_SIGALRM(2314),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGTERM = 2315;</code>
     */
    CODE_HOST_AGENT_SIGTERM(2315),
    /**
     * <code>CODE_HOST_AGENT_DEVICE_REQUEST_FAILED = 2400;</code>
     */
    CODE_HOST_AGENT_DEVICE_REQUEST_FAILED(2400),
    /**
     * <code>CODE_HOST_AGENT_INVALID_TOKEN = 2401;</code>
     */
    CODE_HOST_AGENT_INVALID_TOKEN(2401),
    /**
     * <code>CODE_HOST_AGENT_CONNECTION_REFUSED = 2402;</code>
     */
    CODE_HOST_AGENT_CONNECTION_REFUSED(2402),
    /**
     * <code>CODE_HOST_AGENT_NOT_RUNNING = 2403;</code>
     */
    CODE_HOST_AGENT_NOT_RUNNING(2403),
    /**
     * <code>CODE_HOST_AGENT_REQUEST_FAILED = 2404;</code>
     */
    CODE_HOST_AGENT_REQUEST_FAILED(2404),
    /**
     * <pre>
     **
     * &#64;note Host Agent errors end.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_END = 2999;</code>
     */
    CODE_HOST_AGENT_END(2999),
    /**
     * <pre>
     * &#64;note Device server errors.
     * 3000 ~ 3999 is used for device server process.
     * 3000 ~ 3255 are used for exit codes 0 ~ 255.
     * 3000 means success code.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SUCCESS_BEGIN = 3000;</code>
     */
    CODE_DEVICE_SERVER_SUCCESS_BEGIN(3000),
    /**
     * <code>CODE_DEVICE_SERVER_UNEXPECTED_ERROR = 3001;</code>
     */
    CODE_DEVICE_SERVER_UNEXPECTED_ERROR(3001),
    /**
     * <code>CODE_DEVICE_SERVER_INVALID_ENV = 3002;</code>
     */
    CODE_DEVICE_SERVER_INVALID_ENV(3002),
    /**
     * <pre>
     **
     * &#64;note Device server port in use.
     * check if the port is in use by other process.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_PORT_IN_USE = 3003;</code>
     */
    CODE_DEVICE_SERVER_PORT_IN_USE(3003),
    /**
     * <pre>
     * &#64;note reserved for device server exit code 255.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_EXIT_CODE_END = 3255;</code>
     */
    CODE_DEVICE_SERVER_EXIT_CODE_END(3255),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGHUP = 3301;</code>
     */
    CODE_DEVICE_SERVER_SIGHUP(3301),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGINT = 3302;</code>
     */
    CODE_DEVICE_SERVER_SIGINT(3302),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGQUIT = 3303;</code>
     */
    CODE_DEVICE_SERVER_SIGQUIT(3303),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGILL = 3304;</code>
     */
    CODE_DEVICE_SERVER_SIGILL(3304),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGTRAP = 3305;</code>
     */
    CODE_DEVICE_SERVER_SIGTRAP(3305),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGABRT = 3306;</code>
     */
    CODE_DEVICE_SERVER_SIGABRT(3306),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGFPE = 3308;</code>
     */
    CODE_DEVICE_SERVER_SIGFPE(3308),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGKILL = 3309;</code>
     */
    CODE_DEVICE_SERVER_SIGKILL(3309),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGSEGV = 3311;</code>
     */
    CODE_DEVICE_SERVER_SIGSEGV(3311),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGPIPE = 3313;</code>
     */
    CODE_DEVICE_SERVER_SIGPIPE(3313),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGALRM = 3314;</code>
     */
    CODE_DEVICE_SERVER_SIGALRM(3314),
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGTERM = 3315;</code>
     */
    CODE_DEVICE_SERVER_SIGTERM(3315),
    /**
     * <code>CODE_DEVICE_SERVER_DEVICE_NOT_FOUND = 3400;</code>
     */
    CODE_DEVICE_SERVER_DEVICE_NOT_FOUND(3400),
    /**
     * <code>CODE_DEVICE_SERVER_APPIUM_CONTEXT_NOT_FOUND = 3401;</code>
     */
    CODE_DEVICE_SERVER_APPIUM_CONTEXT_NOT_FOUND(3401),
    /**
     * <code>CODE_DEVICE_SERVER_GAMIUM_CONTEXT_NOT_FOUND = 3402;</code>
     */
    CODE_DEVICE_SERVER_GAMIUM_CONTEXT_NOT_FOUND(3402),
    /**
     * <code>CODE_DEVICE_SERVER_APPIUM_CONTEXT_INFO_NOT_FOUND = 3403;</code>
     */
    CODE_DEVICE_SERVER_APPIUM_CONTEXT_INFO_NOT_FOUND(3403),
    /**
     * <pre>
     **
     * &#64;note Device server errors end.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_END = 3999;</code>
     */
    CODE_DEVICE_SERVER_END(3999),
    /**
     * <pre>
     * &#64;note Device Controller errors.
     * 4000 ~ 4999 is used for device controller.
     * 4000 means success code.
     * </pre>
     *
     * <code>CODE_DEVICE_CONTROLLER_BEGIN = 4000;</code>
     */
    CODE_DEVICE_CONTROLLER_BEGIN(4000),
    /**
     * <code>CODE_DEVICE_CONTROLLER_INPUT_NOTSUPPORTED = 4001;</code>
     */
    CODE_DEVICE_CONTROLLER_INPUT_NOTSUPPORTED(4001),
    /**
     * <code>CODE_DEVICE_CONTROLLER_INPUT_PERMISSION_DENIED = 4002;</code>
     */
    CODE_DEVICE_CONTROLLER_INPUT_PERMISSION_DENIED(4002),
    /**
     * <code>CODE_DEVICE_CONTROLLER_INPUT_UNKNOWN = 4003;</code>
     */
    CODE_DEVICE_CONTROLLER_INPUT_UNKNOWN(4003),
    /**
     * <pre>
     **
     * &#64;note Device Controller errors end.
     * </pre>
     *
     * <code>CODE_DEVICE_CONTROLLER_END = 4999;</code>
     */
    CODE_DEVICE_CONTROLLER_END(4999),
    /**
     * <pre>
     * &#64;note Android Device Agent errors.
     * 5000 ~ 5999 is used for android device agent.
     * 5000 means success code.
     * </pre>
     *
     * <code>CODE_ANDROID_DEVICE_AGENT_BEGIN = 5000;</code>
     */
    CODE_ANDROID_DEVICE_AGENT_BEGIN(5000),
    /**
     * <code>CODE_ANDROID_DEVICE_AGENT_INPUT_UNKNOWN = 5001;</code>
     */
    CODE_ANDROID_DEVICE_AGENT_INPUT_UNKNOWN(5001),
    /**
     * <code>CODE_ANDROID_DEVICE_AGENT_CLIPBOARD_NOTAVAILABLE = 5002;</code>
     */
    CODE_ANDROID_DEVICE_AGENT_CLIPBOARD_NOTAVAILABLE(5002),
    /**
     * <pre>
     **
     * &#64;note Android Device Agent errors end.
     * </pre>
     *
     * <code>CODE_ANDROID_DEVICE_AGENT_END = 5999;</code>
     */
    CODE_ANDROID_DEVICE_AGENT_END(5999),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     **
     * &#64;note Common errors.
     * 0 ~ 999 is used for common errors.
     * 0 means success code.
     * </pre>
     *
     * <code>CODE_SUCCESS_COMMON_BEGIN_UNSPECIFIED = 0;</code>
     */
    public static final int CODE_SUCCESS_COMMON_BEGIN_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     **
     * &#64;note Unexpected error.
     * </pre>
     *
     * <code>CODE_UNEXPECTED_ERROR = 1;</code>
     */
    public static final int CODE_UNEXPECTED_ERROR_VALUE = 1;
    /**
     * <pre>
     **
     * &#64;note Number errors.
     * </pre>
     *
     * <code>CODE_NUMBER_UNDER_RANGE = 2;</code>
     */
    public static final int CODE_NUMBER_UNDER_RANGE_VALUE = 2;
    /**
     * <code>CODE_NUMBER_OVER_RANGE = 3;</code>
     */
    public static final int CODE_NUMBER_OVER_RANGE_VALUE = 3;
    /**
     * <code>CODE_NUMBER_ZERO = 4;</code>
     */
    public static final int CODE_NUMBER_ZERO_VALUE = 4;
    /**
     * <code>CODE_NUMBER_NULL = 5;</code>
     */
    public static final int CODE_NUMBER_NULL_VALUE = 5;
    /**
     * <pre>
     **
     * &#64;note String errors.
     * </pre>
     *
     * <code>CODE_STRING_UNDER_RANGE = 10;</code>
     */
    public static final int CODE_STRING_UNDER_RANGE_VALUE = 10;
    /**
     * <code>CODE_STRING_OVER_RANGE = 11;</code>
     */
    public static final int CODE_STRING_OVER_RANGE_VALUE = 11;
    /**
     * <code>CODE_STRING_EMPTY = 12;</code>
     */
    public static final int CODE_STRING_EMPTY_VALUE = 12;
    /**
     * <code>CODE_STRING_NULL = 13;</code>
     */
    public static final int CODE_STRING_NULL_VALUE = 13;
    /**
     * <code>CODE_STRING_PARSE_FAILED = 14;</code>
     */
    public static final int CODE_STRING_PARSE_FAILED_VALUE = 14;
    /**
     * <code>CODE_STRING_INVALID_CHARACTER = 15;</code>
     */
    public static final int CODE_STRING_INVALID_CHARACTER_VALUE = 15;
    /**
     * <code>CODE_STRING_ENCODING_FAILED = 16;</code>
     */
    public static final int CODE_STRING_ENCODING_FAILED_VALUE = 16;
    /**
     * <code>CODE_STRING_DECODING_FAILED = 17;</code>
     */
    public static final int CODE_STRING_DECODING_FAILED_VALUE = 17;
    /**
     * <code>CODE_STRING_CONVERSION_FAILED = 18;</code>
     */
    public static final int CODE_STRING_CONVERSION_FAILED_VALUE = 18;
    /**
     * <code>CODE_STRING_INVALID_SYNTAX = 19;</code>
     */
    public static final int CODE_STRING_INVALID_SYNTAX_VALUE = 19;
    /**
     * <pre>
     **
     * &#64;note Binary errors.
     * </pre>
     *
     * <code>CODE_BINARY_UNDER_RANGE = 20;</code>
     */
    public static final int CODE_BINARY_UNDER_RANGE_VALUE = 20;
    /**
     * <code>CODE_BINARY_OVER_RANGE = 21;</code>
     */
    public static final int CODE_BINARY_OVER_RANGE_VALUE = 21;
    /**
     * <code>CODE_BINARY_EMPTY = 22;</code>
     */
    public static final int CODE_BINARY_EMPTY_VALUE = 22;
    /**
     * <code>CODE_BINARY_NULL = 23;</code>
     */
    public static final int CODE_BINARY_NULL_VALUE = 23;
    /**
     * <code>CODE_BINARY_ENCODING_FAILED = 24;</code>
     */
    public static final int CODE_BINARY_ENCODING_FAILED_VALUE = 24;
    /**
     * <code>CODE_BINARY_DECODING_FAILED = 25;</code>
     */
    public static final int CODE_BINARY_DECODING_FAILED_VALUE = 25;
    /**
     * <code>CODE_BINARY_CONVERSION_FAILED = 26;</code>
     */
    public static final int CODE_BINARY_CONVERSION_FAILED_VALUE = 26;
    /**
     * <code>CODE_BINARY_VALIDATION_FAILED = 27;</code>
     */
    public static final int CODE_BINARY_VALIDATION_FAILED_VALUE = 27;
    /**
     * <pre>
     **
     * &#64;note Date errors.
     * </pre>
     *
     * <code>CODE_DATE_INVALID_YEAR = 30;</code>
     */
    public static final int CODE_DATE_INVALID_YEAR_VALUE = 30;
    /**
     * <code>CODE_DATE_INVALID_MONTH = 31;</code>
     */
    public static final int CODE_DATE_INVALID_MONTH_VALUE = 31;
    /**
     * <code>CODE_DATE_INVALID_DAY = 32;</code>
     */
    public static final int CODE_DATE_INVALID_DAY_VALUE = 32;
    /**
     * <code>CODE_DATE_INVALID_HOUR = 33;</code>
     */
    public static final int CODE_DATE_INVALID_HOUR_VALUE = 33;
    /**
     * <code>CODE_DATE_INVALID_MINITE = 34;</code>
     */
    public static final int CODE_DATE_INVALID_MINITE_VALUE = 34;
    /**
     * <code>CODE_DATE_INVALID_SECOND = 35;</code>
     */
    public static final int CODE_DATE_INVALID_SECOND_VALUE = 35;
    /**
     * <pre>
     **
     * &#64;note Time errors.
     * </pre>
     *
     * <code>CODE_TIME_INVALID_TIMEZONE = 40;</code>
     */
    public static final int CODE_TIME_INVALID_TIMEZONE_VALUE = 40;
    /**
     * <pre>
     **
     * &#64;note Array errors.
     * </pre>
     *
     * <code>CODE_ARRAY_UNDER_RANGE = 50;</code>
     */
    public static final int CODE_ARRAY_UNDER_RANGE_VALUE = 50;
    /**
     * <code>CODE_ARRAY_OVER_RANGE = 51;</code>
     */
    public static final int CODE_ARRAY_OVER_RANGE_VALUE = 51;
    /**
     * <code>CODE_ARRAY_EMPTY = 52;</code>
     */
    public static final int CODE_ARRAY_EMPTY_VALUE = 52;
    /**
     * <code>CODE_ARRAY_KEY_NOTFOUND = 53;</code>
     */
    public static final int CODE_ARRAY_KEY_NOTFOUND_VALUE = 53;
    /**
     * <pre>
     **
     * &#64;note Map errors.
     * map means key-value storage like dictionary.
     * </pre>
     *
     * <code>CODE_MAP_KEY_NOTFOUND = 60;</code>
     */
    public static final int CODE_MAP_KEY_NOTFOUND_VALUE = 60;
    /**
     * <pre>
     **
     * &#64;note Concurrency errors.
     * </pre>
     *
     * <code>CODE_CONCURRENCY_LOCK_FAILED = 70;</code>
     */
    public static final int CODE_CONCURRENCY_LOCK_FAILED_VALUE = 70;
    /**
     * <code>CODE_CONCURRENCY_DEADLOCK = 71;</code>
     */
    public static final int CODE_CONCURRENCY_DEADLOCK_VALUE = 71;
    /**
     * <code>CODE_CONCURRENCY_RACE = 72;</code>
     */
    public static final int CODE_CONCURRENCY_RACE_VALUE = 72;
    /**
     * <pre>
     **
     * &#64;note Filesystem errors.
     * </pre>
     *
     * <code>CODE_FILESYSTEM_FILE_NOTFOUND = 90;</code>
     */
    public static final int CODE_FILESYSTEM_FILE_NOTFOUND_VALUE = 90;
    /**
     * <code>CODE_FILESYSTEM_DIRECTORY_NOTFOUND = 91;</code>
     */
    public static final int CODE_FILESYSTEM_DIRECTORY_NOTFOUND_VALUE = 91;
    /**
     * <code>CODE_FILESYSTEM_FILE_OPEN_FAILED = 92;</code>
     */
    public static final int CODE_FILESYSTEM_FILE_OPEN_FAILED_VALUE = 92;
    /**
     * <code>CODE_FILESYSTEM_FILE_CLOSE_FAILED = 93;</code>
     */
    public static final int CODE_FILESYSTEM_FILE_CLOSE_FAILED_VALUE = 93;
    /**
     * <code>CODE_FILESYSTEM_FILE_READ_FAILED = 94;</code>
     */
    public static final int CODE_FILESYSTEM_FILE_READ_FAILED_VALUE = 94;
    /**
     * <code>CODE_FILESYSTEM_FILE_WRITE_FAILED = 95;</code>
     */
    public static final int CODE_FILESYSTEM_FILE_WRITE_FAILED_VALUE = 95;
    /**
     * <code>CODE_FILESYSTEM_DISK_FULL = 96;</code>
     */
    public static final int CODE_FILESYSTEM_DISK_FULL_VALUE = 96;
    /**
     * <pre>
     **
     * &#64;note Network errors.
     * </pre>
     *
     * <code>CODE_NETWORK_CONNECTION_FAILED = 100;</code>
     */
    public static final int CODE_NETWORK_CONNECTION_FAILED_VALUE = 100;
    /**
     * <code>CODE_NETWORK_CONNECTION_CLOSED = 101;</code>
     */
    public static final int CODE_NETWORK_CONNECTION_CLOSED_VALUE = 101;
    /**
     * <code>CODE_NETWORK_CONNECTION_TIMEOUT = 102;</code>
     */
    public static final int CODE_NETWORK_CONNECTION_TIMEOUT_VALUE = 102;
    /**
     * <code>CODE_NETWORK_CONNECTION_REFUSED = 103;</code>
     */
    public static final int CODE_NETWORK_CONNECTION_REFUSED_VALUE = 103;
    /**
     * <code>CODE_NETWORK_CONNECTION_ABORTED = 104;</code>
     */
    public static final int CODE_NETWORK_CONNECTION_ABORTED_VALUE = 104;
    /**
     * <code>CODE_NETWORK_CONNECTION_ALREADY_CONNECTED = 105;</code>
     */
    public static final int CODE_NETWORK_CONNECTION_ALREADY_CONNECTED_VALUE = 105;
    /**
     * <code>CODE_NETWORK_CONNECTION_INVALID_URI = 106;</code>
     */
    public static final int CODE_NETWORK_CONNECTION_INVALID_URI_VALUE = 106;
    /**
     * <pre>
     **
     * &#64;note Process errors.
     * </pre>
     *
     * <code>CODE_PROCESS_FORK_FAILED = 110;</code>
     */
    public static final int CODE_PROCESS_FORK_FAILED_VALUE = 110;
    /**
     * <code>CODE_PROCESS_EXEC_FAILED = 111;</code>
     */
    public static final int CODE_PROCESS_EXEC_FAILED_VALUE = 111;
    /**
     * <code>CODE_PROCESS_WAIT_FAILED = 112;</code>
     */
    public static final int CODE_PROCESS_WAIT_FAILED_VALUE = 112;
    /**
     * <code>CODE_PROCESS_KILL_FAILED = 113;</code>
     */
    public static final int CODE_PROCESS_KILL_FAILED_VALUE = 113;
    /**
     * <code>CODE_PROCESS_SIGNAL_FAILED = 114;</code>
     */
    public static final int CODE_PROCESS_SIGNAL_FAILED_VALUE = 114;
    /**
     * <code>CODE_PROCESS_SIGNAL_NOT_SUPPORTED = 115;</code>
     */
    public static final int CODE_PROCESS_SIGNAL_NOT_SUPPORTED_VALUE = 115;
    /**
     * <pre>
     **
     * &#64;note Memory errors.
     * </pre>
     *
     * <code>CODE_MEMORY_ALLOCATION_FAILED = 120;</code>
     */
    public static final int CODE_MEMORY_ALLOCATION_FAILED_VALUE = 120;
    /**
     * <code>CODE_MEMORY_REALLOCATION_FAILED = 121;</code>
     */
    public static final int CODE_MEMORY_REALLOCATION_FAILED_VALUE = 121;
    /**
     * <code>CODE_MEMORY_FREE_FAILED = 122;</code>
     */
    public static final int CODE_MEMORY_FREE_FAILED_VALUE = 122;
    /**
     * <code>CODE_MEMORY_OUT_OF_MEMORY = 123;</code>
     */
    public static final int CODE_MEMORY_OUT_OF_MEMORY_VALUE = 123;
    /**
     * <pre>
     **
     * &#64;note Security errors
     * </pre>
     *
     * <code>CODE_SECURITY_UNAUTHENTICATED = 130;</code>
     */
    public static final int CODE_SECURITY_UNAUTHENTICATED_VALUE = 130;
    /**
     * <code>CODE_SECURITY_UNAUTHORISED = 131;</code>
     */
    public static final int CODE_SECURITY_UNAUTHORISED_VALUE = 131;
    /**
     * <code>CODE_SECURITY_PERMISSION_DENIED = 132;</code>
     */
    public static final int CODE_SECURITY_PERMISSION_DENIED_VALUE = 132;
    /**
     * <code>CODE_SECURITY_INVALID_TOKEN = 133;</code>
     */
    public static final int CODE_SECURITY_INVALID_TOKEN_VALUE = 133;
    /**
     * <pre>
     **
     * &#64;note Input errors.
     * </pre>
     *
     * <code>CODE_INPUT_NOTREADY = 140;</code>
     */
    public static final int CODE_INPUT_NOTREADY_VALUE = 140;
    /**
     * <code>CODE_INPUT_DISCARDED = 141;</code>
     */
    public static final int CODE_INPUT_DISCARDED_VALUE = 141;
    /**
     * <code>CODE_INPUT_UNKNOWN = 142;</code>
     */
    public static final int CODE_INPUT_UNKNOWN_VALUE = 142;
    /**
     * <pre>
     **
     * &#64;note Screen record errors.
     * </pre>
     *
     * <code>CODE_SCREENRECORD_NOTREADY = 150;</code>
     */
    public static final int CODE_SCREENRECORD_NOTREADY_VALUE = 150;
    /**
     * <code>CODE_SCREENRECORD_ALREADY_RECORDING = 151;</code>
     */
    public static final int CODE_SCREENRECORD_ALREADY_RECORDING_VALUE = 151;
    /**
     * <code>CODE_SCREENRECORD_NOTSTARTED = 152;</code>
     */
    public static final int CODE_SCREENRECORD_NOTSTARTED_VALUE = 152;
    /**
     * <code>CODE_SCREENRECORD_MULTIPLE_RECORDING = 153;</code>
     */
    public static final int CODE_SCREENRECORD_MULTIPLE_RECORDING_VALUE = 153;
    /**
     * <code>CODE_SCREENRECORD_NOTFOUND = 154;</code>
     */
    public static final int CODE_SCREENRECORD_NOTFOUND_VALUE = 154;
    /**
     * <code>CODE_SCREENRECORD_NOTSUPPORTED = 155;</code>
     */
    public static final int CODE_SCREENRECORD_NOTSUPPORTED_VALUE = 155;
    /**
     * <pre>
     **
     * &#64;note WebRTC errors.
     * </pre>
     *
     * <code>CODE_WEBRTC_PEERCONNECTION_FAILED = 160;</code>
     */
    public static final int CODE_WEBRTC_PEERCONNECTION_FAILED_VALUE = 160;
    /**
     * <code>CODE_WEBRTC_CODEC_NOTSUPPORTED = 161;</code>
     */
    public static final int CODE_WEBRTC_CODEC_NOTSUPPORTED_VALUE = 161;
    /**
     * <pre>
     **
     * &#64;note Device errors.
     * </pre>
     *
     * <code>CODE_DEVICE_NOTFOUND = 200;</code>
     */
    public static final int CODE_DEVICE_NOTFOUND_VALUE = 200;
    /**
     * <pre>
     **
     * &#64;note Common errors end.
     * </pre>
     *
     * <code>CODE_COMMON_END = 999;</code>
     */
    public static final int CODE_COMMON_END_VALUE = 999;
    /**
     * <pre>
     **
     * &#64;note Dost errors.
     * 1000 ~ 1999 is used for dost app.
     * 1000 ~ 1255 are used for exit codes 0 ~ 255.
     * 1000 means success code.
     * </pre>
     *
     * <code>CODE_DOST_SUCCESS_BEGIN = 1000;</code>
     */
    public static final int CODE_DOST_SUCCESS_BEGIN_VALUE = 1000;
    /**
     * <pre>
     **
     * &#64;note Dost errors end.
     * </pre>
     *
     * <code>CODE_DOST_END = 1999;</code>
     */
    public static final int CODE_DOST_END_VALUE = 1999;
    /**
     * <pre>
     * &#64;note Host Agent errors.
     * 2000 ~ 2999 is used for host agent process.
     * 2000 ~ 2255 are used for exit codes 0 ~ 255.
     * 2000 means success code.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SUCCESS_BEGIN = 2000;</code>
     */
    public static final int CODE_HOST_AGENT_SUCCESS_BEGIN_VALUE = 2000;
    /**
     * <code>CODE_HOST_AGENT_UNEXPECTED_ERROR = 2001;</code>
     */
    public static final int CODE_HOST_AGENT_UNEXPECTED_ERROR_VALUE = 2001;
    /**
     * <code>CODE_HOST_AGENT_INVALID_ENV = 2002;</code>
     */
    public static final int CODE_HOST_AGENT_INVALID_ENV_VALUE = 2002;
    /**
     * <code>CODE_HOST_AGENT_PORT_IN_USE = 2003;</code>
     */
    public static final int CODE_HOST_AGENT_PORT_IN_USE_VALUE = 2003;
    /**
     * <pre>
     * &#64;note reserved for host agent exit code 255.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_EXIT_CODE_END = 2255;</code>
     */
    public static final int CODE_HOST_AGENT_EXIT_CODE_END_VALUE = 2255;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGHUP = 2301;</code>
     */
    public static final int CODE_HOST_AGENT_SIGHUP_VALUE = 2301;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGINT = 2302;</code>
     */
    public static final int CODE_HOST_AGENT_SIGINT_VALUE = 2302;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGQUIT = 2303;</code>
     */
    public static final int CODE_HOST_AGENT_SIGQUIT_VALUE = 2303;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGILL = 2304;</code>
     */
    public static final int CODE_HOST_AGENT_SIGILL_VALUE = 2304;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGTRAP = 2305;</code>
     */
    public static final int CODE_HOST_AGENT_SIGTRAP_VALUE = 2305;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGABRT = 2306;</code>
     */
    public static final int CODE_HOST_AGENT_SIGABRT_VALUE = 2306;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGFPE = 2308;</code>
     */
    public static final int CODE_HOST_AGENT_SIGFPE_VALUE = 2308;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGKILL = 2309;</code>
     */
    public static final int CODE_HOST_AGENT_SIGKILL_VALUE = 2309;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGSEGV = 2311;</code>
     */
    public static final int CODE_HOST_AGENT_SIGSEGV_VALUE = 2311;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGPIPE = 2313;</code>
     */
    public static final int CODE_HOST_AGENT_SIGPIPE_VALUE = 2313;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGALRM = 2314;</code>
     */
    public static final int CODE_HOST_AGENT_SIGALRM_VALUE = 2314;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_SIGTERM = 2315;</code>
     */
    public static final int CODE_HOST_AGENT_SIGTERM_VALUE = 2315;
    /**
     * <code>CODE_HOST_AGENT_DEVICE_REQUEST_FAILED = 2400;</code>
     */
    public static final int CODE_HOST_AGENT_DEVICE_REQUEST_FAILED_VALUE = 2400;
    /**
     * <code>CODE_HOST_AGENT_INVALID_TOKEN = 2401;</code>
     */
    public static final int CODE_HOST_AGENT_INVALID_TOKEN_VALUE = 2401;
    /**
     * <code>CODE_HOST_AGENT_CONNECTION_REFUSED = 2402;</code>
     */
    public static final int CODE_HOST_AGENT_CONNECTION_REFUSED_VALUE = 2402;
    /**
     * <code>CODE_HOST_AGENT_NOT_RUNNING = 2403;</code>
     */
    public static final int CODE_HOST_AGENT_NOT_RUNNING_VALUE = 2403;
    /**
     * <code>CODE_HOST_AGENT_REQUEST_FAILED = 2404;</code>
     */
    public static final int CODE_HOST_AGENT_REQUEST_FAILED_VALUE = 2404;
    /**
     * <pre>
     **
     * &#64;note Host Agent errors end.
     * </pre>
     *
     * <code>CODE_HOST_AGENT_END = 2999;</code>
     */
    public static final int CODE_HOST_AGENT_END_VALUE = 2999;
    /**
     * <pre>
     * &#64;note Device server errors.
     * 3000 ~ 3999 is used for device server process.
     * 3000 ~ 3255 are used for exit codes 0 ~ 255.
     * 3000 means success code.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SUCCESS_BEGIN = 3000;</code>
     */
    public static final int CODE_DEVICE_SERVER_SUCCESS_BEGIN_VALUE = 3000;
    /**
     * <code>CODE_DEVICE_SERVER_UNEXPECTED_ERROR = 3001;</code>
     */
    public static final int CODE_DEVICE_SERVER_UNEXPECTED_ERROR_VALUE = 3001;
    /**
     * <code>CODE_DEVICE_SERVER_INVALID_ENV = 3002;</code>
     */
    public static final int CODE_DEVICE_SERVER_INVALID_ENV_VALUE = 3002;
    /**
     * <pre>
     **
     * &#64;note Device server port in use.
     * check if the port is in use by other process.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_PORT_IN_USE = 3003;</code>
     */
    public static final int CODE_DEVICE_SERVER_PORT_IN_USE_VALUE = 3003;
    /**
     * <pre>
     * &#64;note reserved for device server exit code 255.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_EXIT_CODE_END = 3255;</code>
     */
    public static final int CODE_DEVICE_SERVER_EXIT_CODE_END_VALUE = 3255;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGHUP = 3301;</code>
     */
    public static final int CODE_DEVICE_SERVER_SIGHUP_VALUE = 3301;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGINT = 3302;</code>
     */
    public static final int CODE_DEVICE_SERVER_SIGINT_VALUE = 3302;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGQUIT = 3303;</code>
     */
    public static final int CODE_DEVICE_SERVER_SIGQUIT_VALUE = 3303;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGILL = 3304;</code>
     */
    public static final int CODE_DEVICE_SERVER_SIGILL_VALUE = 3304;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGTRAP = 3305;</code>
     */
    public static final int CODE_DEVICE_SERVER_SIGTRAP_VALUE = 3305;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGABRT = 3306;</code>
     */
    public static final int CODE_DEVICE_SERVER_SIGABRT_VALUE = 3306;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGFPE = 3308;</code>
     */
    public static final int CODE_DEVICE_SERVER_SIGFPE_VALUE = 3308;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGKILL = 3309;</code>
     */
    public static final int CODE_DEVICE_SERVER_SIGKILL_VALUE = 3309;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGSEGV = 3311;</code>
     */
    public static final int CODE_DEVICE_SERVER_SIGSEGV_VALUE = 3311;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGPIPE = 3313;</code>
     */
    public static final int CODE_DEVICE_SERVER_SIGPIPE_VALUE = 3313;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGALRM = 3314;</code>
     */
    public static final int CODE_DEVICE_SERVER_SIGALRM_VALUE = 3314;
    /**
     * <pre>
     * &#64;link https://en.wikipedia.org/wiki/Signal_(IPC)
     * &#64;note reserved for signal to code conversion.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_SIGTERM = 3315;</code>
     */
    public static final int CODE_DEVICE_SERVER_SIGTERM_VALUE = 3315;
    /**
     * <code>CODE_DEVICE_SERVER_DEVICE_NOT_FOUND = 3400;</code>
     */
    public static final int CODE_DEVICE_SERVER_DEVICE_NOT_FOUND_VALUE = 3400;
    /**
     * <code>CODE_DEVICE_SERVER_APPIUM_CONTEXT_NOT_FOUND = 3401;</code>
     */
    public static final int CODE_DEVICE_SERVER_APPIUM_CONTEXT_NOT_FOUND_VALUE = 3401;
    /**
     * <code>CODE_DEVICE_SERVER_GAMIUM_CONTEXT_NOT_FOUND = 3402;</code>
     */
    public static final int CODE_DEVICE_SERVER_GAMIUM_CONTEXT_NOT_FOUND_VALUE = 3402;
    /**
     * <code>CODE_DEVICE_SERVER_APPIUM_CONTEXT_INFO_NOT_FOUND = 3403;</code>
     */
    public static final int CODE_DEVICE_SERVER_APPIUM_CONTEXT_INFO_NOT_FOUND_VALUE = 3403;
    /**
     * <pre>
     **
     * &#64;note Device server errors end.
     * </pre>
     *
     * <code>CODE_DEVICE_SERVER_END = 3999;</code>
     */
    public static final int CODE_DEVICE_SERVER_END_VALUE = 3999;
    /**
     * <pre>
     * &#64;note Device Controller errors.
     * 4000 ~ 4999 is used for device controller.
     * 4000 means success code.
     * </pre>
     *
     * <code>CODE_DEVICE_CONTROLLER_BEGIN = 4000;</code>
     */
    public static final int CODE_DEVICE_CONTROLLER_BEGIN_VALUE = 4000;
    /**
     * <code>CODE_DEVICE_CONTROLLER_INPUT_NOTSUPPORTED = 4001;</code>
     */
    public static final int CODE_DEVICE_CONTROLLER_INPUT_NOTSUPPORTED_VALUE = 4001;
    /**
     * <code>CODE_DEVICE_CONTROLLER_INPUT_PERMISSION_DENIED = 4002;</code>
     */
    public static final int CODE_DEVICE_CONTROLLER_INPUT_PERMISSION_DENIED_VALUE = 4002;
    /**
     * <code>CODE_DEVICE_CONTROLLER_INPUT_UNKNOWN = 4003;</code>
     */
    public static final int CODE_DEVICE_CONTROLLER_INPUT_UNKNOWN_VALUE = 4003;
    /**
     * <pre>
     **
     * &#64;note Device Controller errors end.
     * </pre>
     *
     * <code>CODE_DEVICE_CONTROLLER_END = 4999;</code>
     */
    public static final int CODE_DEVICE_CONTROLLER_END_VALUE = 4999;
    /**
     * <pre>
     * &#64;note Android Device Agent errors.
     * 5000 ~ 5999 is used for android device agent.
     * 5000 means success code.
     * </pre>
     *
     * <code>CODE_ANDROID_DEVICE_AGENT_BEGIN = 5000;</code>
     */
    public static final int CODE_ANDROID_DEVICE_AGENT_BEGIN_VALUE = 5000;
    /**
     * <code>CODE_ANDROID_DEVICE_AGENT_INPUT_UNKNOWN = 5001;</code>
     */
    public static final int CODE_ANDROID_DEVICE_AGENT_INPUT_UNKNOWN_VALUE = 5001;
    /**
     * <code>CODE_ANDROID_DEVICE_AGENT_CLIPBOARD_NOTAVAILABLE = 5002;</code>
     */
    public static final int CODE_ANDROID_DEVICE_AGENT_CLIPBOARD_NOTAVAILABLE_VALUE = 5002;
    /**
     * <pre>
     **
     * &#64;note Android Device Agent errors end.
     * </pre>
     *
     * <code>CODE_ANDROID_DEVICE_AGENT_END = 5999;</code>
     */
    public static final int CODE_ANDROID_DEVICE_AGENT_END_VALUE = 5999;


    @java.lang.Override
    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Code valueOf(int value) {
      return forNumber(value);
    }

    public static Code forNumber(int value) {
      switch (value) {
        case 0: return CODE_SUCCESS_COMMON_BEGIN_UNSPECIFIED;
        case 1: return CODE_UNEXPECTED_ERROR;
        case 2: return CODE_NUMBER_UNDER_RANGE;
        case 3: return CODE_NUMBER_OVER_RANGE;
        case 4: return CODE_NUMBER_ZERO;
        case 5: return CODE_NUMBER_NULL;
        case 10: return CODE_STRING_UNDER_RANGE;
        case 11: return CODE_STRING_OVER_RANGE;
        case 12: return CODE_STRING_EMPTY;
        case 13: return CODE_STRING_NULL;
        case 14: return CODE_STRING_PARSE_FAILED;
        case 15: return CODE_STRING_INVALID_CHARACTER;
        case 16: return CODE_STRING_ENCODING_FAILED;
        case 17: return CODE_STRING_DECODING_FAILED;
        case 18: return CODE_STRING_CONVERSION_FAILED;
        case 19: return CODE_STRING_INVALID_SYNTAX;
        case 20: return CODE_BINARY_UNDER_RANGE;
        case 21: return CODE_BINARY_OVER_RANGE;
        case 22: return CODE_BINARY_EMPTY;
        case 23: return CODE_BINARY_NULL;
        case 24: return CODE_BINARY_ENCODING_FAILED;
        case 25: return CODE_BINARY_DECODING_FAILED;
        case 26: return CODE_BINARY_CONVERSION_FAILED;
        case 27: return CODE_BINARY_VALIDATION_FAILED;
        case 30: return CODE_DATE_INVALID_YEAR;
        case 31: return CODE_DATE_INVALID_MONTH;
        case 32: return CODE_DATE_INVALID_DAY;
        case 33: return CODE_DATE_INVALID_HOUR;
        case 34: return CODE_DATE_INVALID_MINITE;
        case 35: return CODE_DATE_INVALID_SECOND;
        case 40: return CODE_TIME_INVALID_TIMEZONE;
        case 50: return CODE_ARRAY_UNDER_RANGE;
        case 51: return CODE_ARRAY_OVER_RANGE;
        case 52: return CODE_ARRAY_EMPTY;
        case 53: return CODE_ARRAY_KEY_NOTFOUND;
        case 60: return CODE_MAP_KEY_NOTFOUND;
        case 70: return CODE_CONCURRENCY_LOCK_FAILED;
        case 71: return CODE_CONCURRENCY_DEADLOCK;
        case 72: return CODE_CONCURRENCY_RACE;
        case 90: return CODE_FILESYSTEM_FILE_NOTFOUND;
        case 91: return CODE_FILESYSTEM_DIRECTORY_NOTFOUND;
        case 92: return CODE_FILESYSTEM_FILE_OPEN_FAILED;
        case 93: return CODE_FILESYSTEM_FILE_CLOSE_FAILED;
        case 94: return CODE_FILESYSTEM_FILE_READ_FAILED;
        case 95: return CODE_FILESYSTEM_FILE_WRITE_FAILED;
        case 96: return CODE_FILESYSTEM_DISK_FULL;
        case 100: return CODE_NETWORK_CONNECTION_FAILED;
        case 101: return CODE_NETWORK_CONNECTION_CLOSED;
        case 102: return CODE_NETWORK_CONNECTION_TIMEOUT;
        case 103: return CODE_NETWORK_CONNECTION_REFUSED;
        case 104: return CODE_NETWORK_CONNECTION_ABORTED;
        case 105: return CODE_NETWORK_CONNECTION_ALREADY_CONNECTED;
        case 106: return CODE_NETWORK_CONNECTION_INVALID_URI;
        case 110: return CODE_PROCESS_FORK_FAILED;
        case 111: return CODE_PROCESS_EXEC_FAILED;
        case 112: return CODE_PROCESS_WAIT_FAILED;
        case 113: return CODE_PROCESS_KILL_FAILED;
        case 114: return CODE_PROCESS_SIGNAL_FAILED;
        case 115: return CODE_PROCESS_SIGNAL_NOT_SUPPORTED;
        case 120: return CODE_MEMORY_ALLOCATION_FAILED;
        case 121: return CODE_MEMORY_REALLOCATION_FAILED;
        case 122: return CODE_MEMORY_FREE_FAILED;
        case 123: return CODE_MEMORY_OUT_OF_MEMORY;
        case 130: return CODE_SECURITY_UNAUTHENTICATED;
        case 131: return CODE_SECURITY_UNAUTHORISED;
        case 132: return CODE_SECURITY_PERMISSION_DENIED;
        case 133: return CODE_SECURITY_INVALID_TOKEN;
        case 140: return CODE_INPUT_NOTREADY;
        case 141: return CODE_INPUT_DISCARDED;
        case 142: return CODE_INPUT_UNKNOWN;
        case 150: return CODE_SCREENRECORD_NOTREADY;
        case 151: return CODE_SCREENRECORD_ALREADY_RECORDING;
        case 152: return CODE_SCREENRECORD_NOTSTARTED;
        case 153: return CODE_SCREENRECORD_MULTIPLE_RECORDING;
        case 154: return CODE_SCREENRECORD_NOTFOUND;
        case 155: return CODE_SCREENRECORD_NOTSUPPORTED;
        case 160: return CODE_WEBRTC_PEERCONNECTION_FAILED;
        case 161: return CODE_WEBRTC_CODEC_NOTSUPPORTED;
        case 200: return CODE_DEVICE_NOTFOUND;
        case 999: return CODE_COMMON_END;
        case 1000: return CODE_DOST_SUCCESS_BEGIN;
        case 1999: return CODE_DOST_END;
        case 2000: return CODE_HOST_AGENT_SUCCESS_BEGIN;
        case 2001: return CODE_HOST_AGENT_UNEXPECTED_ERROR;
        case 2002: return CODE_HOST_AGENT_INVALID_ENV;
        case 2003: return CODE_HOST_AGENT_PORT_IN_USE;
        case 2255: return CODE_HOST_AGENT_EXIT_CODE_END;
        case 2301: return CODE_HOST_AGENT_SIGHUP;
        case 2302: return CODE_HOST_AGENT_SIGINT;
        case 2303: return CODE_HOST_AGENT_SIGQUIT;
        case 2304: return CODE_HOST_AGENT_SIGILL;
        case 2305: return CODE_HOST_AGENT_SIGTRAP;
        case 2306: return CODE_HOST_AGENT_SIGABRT;
        case 2308: return CODE_HOST_AGENT_SIGFPE;
        case 2309: return CODE_HOST_AGENT_SIGKILL;
        case 2311: return CODE_HOST_AGENT_SIGSEGV;
        case 2313: return CODE_HOST_AGENT_SIGPIPE;
        case 2314: return CODE_HOST_AGENT_SIGALRM;
        case 2315: return CODE_HOST_AGENT_SIGTERM;
        case 2400: return CODE_HOST_AGENT_DEVICE_REQUEST_FAILED;
        case 2401: return CODE_HOST_AGENT_INVALID_TOKEN;
        case 2402: return CODE_HOST_AGENT_CONNECTION_REFUSED;
        case 2403: return CODE_HOST_AGENT_NOT_RUNNING;
        case 2404: return CODE_HOST_AGENT_REQUEST_FAILED;
        case 2999: return CODE_HOST_AGENT_END;
        case 3000: return CODE_DEVICE_SERVER_SUCCESS_BEGIN;
        case 3001: return CODE_DEVICE_SERVER_UNEXPECTED_ERROR;
        case 3002: return CODE_DEVICE_SERVER_INVALID_ENV;
        case 3003: return CODE_DEVICE_SERVER_PORT_IN_USE;
        case 3255: return CODE_DEVICE_SERVER_EXIT_CODE_END;
        case 3301: return CODE_DEVICE_SERVER_SIGHUP;
        case 3302: return CODE_DEVICE_SERVER_SIGINT;
        case 3303: return CODE_DEVICE_SERVER_SIGQUIT;
        case 3304: return CODE_DEVICE_SERVER_SIGILL;
        case 3305: return CODE_DEVICE_SERVER_SIGTRAP;
        case 3306: return CODE_DEVICE_SERVER_SIGABRT;
        case 3308: return CODE_DEVICE_SERVER_SIGFPE;
        case 3309: return CODE_DEVICE_SERVER_SIGKILL;
        case 3311: return CODE_DEVICE_SERVER_SIGSEGV;
        case 3313: return CODE_DEVICE_SERVER_SIGPIPE;
        case 3314: return CODE_DEVICE_SERVER_SIGALRM;
        case 3315: return CODE_DEVICE_SERVER_SIGTERM;
        case 3400: return CODE_DEVICE_SERVER_DEVICE_NOT_FOUND;
        case 3401: return CODE_DEVICE_SERVER_APPIUM_CONTEXT_NOT_FOUND;
        case 3402: return CODE_DEVICE_SERVER_GAMIUM_CONTEXT_NOT_FOUND;
        case 3403: return CODE_DEVICE_SERVER_APPIUM_CONTEXT_INFO_NOT_FOUND;
        case 3999: return CODE_DEVICE_SERVER_END;
        case 4000: return CODE_DEVICE_CONTROLLER_BEGIN;
        case 4001: return CODE_DEVICE_CONTROLLER_INPUT_NOTSUPPORTED;
        case 4002: return CODE_DEVICE_CONTROLLER_INPUT_PERMISSION_DENIED;
        case 4003: return CODE_DEVICE_CONTROLLER_INPUT_UNKNOWN;
        case 4999: return CODE_DEVICE_CONTROLLER_END;
        case 5000: return CODE_ANDROID_DEVICE_AGENT_BEGIN;
        case 5001: return CODE_ANDROID_DEVICE_AGENT_INPUT_UNKNOWN;
        case 5002: return CODE_ANDROID_DEVICE_AGENT_CLIPBOARD_NOTAVAILABLE;
        case 5999: return CODE_ANDROID_DEVICE_AGENT_END;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Code>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Code> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Code>() {
            @java.lang.Override
            public Code findValueByNumber(int number) {
              return Code.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return CodeVerifier.INSTANCE;
    }

    private static final class CodeVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new CodeVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return Code.forNumber(number) != null;
            }
          };

    private final int value;

    private Code(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:outer.Code)
  }

  public interface ErrorResultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:outer.ErrorResult)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.outer.Code code = 1;</code>
     * @return The enum numeric value on the wire for code.
     */
    int getCodeValue();
    /**
     * <code>.outer.Code code = 1;</code>
     * @return The code.
     */
    com.dogu.protocol.generated.outer.Errors.Code getCode();

    /**
     * <code>string message = 2;</code>
     * @return The message.
     */
    java.lang.String getMessage();
    /**
     * <code>string message = 2;</code>
     * @return The bytes for message.
     */
    com.google.protobuf.ByteString
        getMessageBytes();

    /**
     * <code>optional .google.protobuf.Struct details = 3;</code>
     * @return Whether the details field is set.
     */
    boolean hasDetails();
    /**
     * <code>optional .google.protobuf.Struct details = 3;</code>
     * @return The details.
     */
    com.google.protobuf.Struct getDetails();
  }
  /**
   * Protobuf type {@code outer.ErrorResult}
   */
  public  static final class ErrorResult extends
      com.google.protobuf.GeneratedMessageLite<
          ErrorResult, ErrorResult.Builder> implements
      // @@protoc_insertion_point(message_implements:outer.ErrorResult)
      ErrorResultOrBuilder {
    private ErrorResult() {
      message_ = "";
    }
    private int bitField0_;
    public static final int CODE_FIELD_NUMBER = 1;
    private int code_;
    /**
     * <code>.outer.Code code = 1;</code>
     * @return The enum numeric value on the wire for code.
     */
    @java.lang.Override
    public int getCodeValue() {
      return code_;
    }
    /**
     * <code>.outer.Code code = 1;</code>
     * @return The code.
     */
    @java.lang.Override
    public com.dogu.protocol.generated.outer.Errors.Code getCode() {
      com.dogu.protocol.generated.outer.Errors.Code result = com.dogu.protocol.generated.outer.Errors.Code.forNumber(code_);
      return result == null ? com.dogu.protocol.generated.outer.Errors.Code.UNRECOGNIZED : result;
    }
    /**
     * <code>.outer.Code code = 1;</code>
     * @param value The enum numeric value on the wire for code to set.
     */
    private void setCodeValue(int value) {
        code_ = value;
    }
    /**
     * <code>.outer.Code code = 1;</code>
     * @param value The code to set.
     */
    private void setCode(com.dogu.protocol.generated.outer.Errors.Code value) {
      code_ = value.getNumber();
      
    }
    /**
     * <code>.outer.Code code = 1;</code>
     */
    private void clearCode() {
      
      code_ = 0;
    }

    public static final int MESSAGE_FIELD_NUMBER = 2;
    private java.lang.String message_;
    /**
     * <code>string message = 2;</code>
     * @return The message.
     */
    @java.lang.Override
    public java.lang.String getMessage() {
      return message_;
    }
    /**
     * <code>string message = 2;</code>
     * @return The bytes for message.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMessageBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(message_);
    }
    /**
     * <code>string message = 2;</code>
     * @param value The message to set.
     */
    private void setMessage(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      message_ = value;
    }
    /**
     * <code>string message = 2;</code>
     */
    private void clearMessage() {
      
      message_ = getDefaultInstance().getMessage();
    }
    /**
     * <code>string message = 2;</code>
     * @param value The bytes for message to set.
     */
    private void setMessageBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      message_ = value.toStringUtf8();
      
    }

    public static final int DETAILS_FIELD_NUMBER = 3;
    private com.google.protobuf.Struct details_;
    /**
     * <code>optional .google.protobuf.Struct details = 3;</code>
     */
    @java.lang.Override
    public boolean hasDetails() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .google.protobuf.Struct details = 3;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Struct getDetails() {
      return details_ == null ? com.google.protobuf.Struct.getDefaultInstance() : details_;
    }
    /**
     * <code>optional .google.protobuf.Struct details = 3;</code>
     */
    private void setDetails(com.google.protobuf.Struct value) {
      value.getClass();
  details_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>optional .google.protobuf.Struct details = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeDetails(com.google.protobuf.Struct value) {
      value.getClass();
  if (details_ != null &&
          details_ != com.google.protobuf.Struct.getDefaultInstance()) {
        details_ =
          com.google.protobuf.Struct.newBuilder(details_).mergeFrom(value).buildPartial();
      } else {
        details_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>optional .google.protobuf.Struct details = 3;</code>
     */
    private void clearDetails() {  details_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static com.dogu.protocol.generated.outer.Errors.ErrorResult parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.dogu.protocol.generated.outer.Errors.ErrorResult parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.dogu.protocol.generated.outer.Errors.ErrorResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.dogu.protocol.generated.outer.Errors.ErrorResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.dogu.protocol.generated.outer.Errors.ErrorResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.dogu.protocol.generated.outer.Errors.ErrorResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.dogu.protocol.generated.outer.Errors.ErrorResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.dogu.protocol.generated.outer.Errors.ErrorResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.dogu.protocol.generated.outer.Errors.ErrorResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.dogu.protocol.generated.outer.Errors.ErrorResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.dogu.protocol.generated.outer.Errors.ErrorResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.dogu.protocol.generated.outer.Errors.ErrorResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.dogu.protocol.generated.outer.Errors.ErrorResult prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code outer.ErrorResult}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dogu.protocol.generated.outer.Errors.ErrorResult, Builder> implements
        // @@protoc_insertion_point(builder_implements:outer.ErrorResult)
        com.dogu.protocol.generated.outer.Errors.ErrorResultOrBuilder {
      // Construct using com.dogu.protocol.generated.outer.Errors.ErrorResult.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.outer.Code code = 1;</code>
       * @return The enum numeric value on the wire for code.
       */
      @java.lang.Override
      public int getCodeValue() {
        return instance.getCodeValue();
      }
      /**
       * <code>.outer.Code code = 1;</code>
       * @param value The code to set.
       * @return This builder for chaining.
       */
      public Builder setCodeValue(int value) {
        copyOnWrite();
        instance.setCodeValue(value);
        return this;
      }
      /**
       * <code>.outer.Code code = 1;</code>
       * @return The code.
       */
      @java.lang.Override
      public com.dogu.protocol.generated.outer.Errors.Code getCode() {
        return instance.getCode();
      }
      /**
       * <code>.outer.Code code = 1;</code>
       * @param value The enum numeric value on the wire for code to set.
       * @return This builder for chaining.
       */
      public Builder setCode(com.dogu.protocol.generated.outer.Errors.Code value) {
        copyOnWrite();
        instance.setCode(value);
        return this;
      }
      /**
       * <code>.outer.Code code = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCode() {
        copyOnWrite();
        instance.clearCode();
        return this;
      }

      /**
       * <code>string message = 2;</code>
       * @return The message.
       */
      @java.lang.Override
      public java.lang.String getMessage() {
        return instance.getMessage();
      }
      /**
       * <code>string message = 2;</code>
       * @return The bytes for message.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getMessageBytes() {
        return instance.getMessageBytes();
      }
      /**
       * <code>string message = 2;</code>
       * @param value The message to set.
       * @return This builder for chaining.
       */
      public Builder setMessage(
          java.lang.String value) {
        copyOnWrite();
        instance.setMessage(value);
        return this;
      }
      /**
       * <code>string message = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMessage() {
        copyOnWrite();
        instance.clearMessage();
        return this;
      }
      /**
       * <code>string message = 2;</code>
       * @param value The bytes for message to set.
       * @return This builder for chaining.
       */
      public Builder setMessageBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setMessageBytes(value);
        return this;
      }

      /**
       * <code>optional .google.protobuf.Struct details = 3;</code>
       */
      @java.lang.Override
      public boolean hasDetails() {
        return instance.hasDetails();
      }
      /**
       * <code>optional .google.protobuf.Struct details = 3;</code>
       */
      @java.lang.Override
      public com.google.protobuf.Struct getDetails() {
        return instance.getDetails();
      }
      /**
       * <code>optional .google.protobuf.Struct details = 3;</code>
       */
      public Builder setDetails(com.google.protobuf.Struct value) {
        copyOnWrite();
        instance.setDetails(value);
        return this;
        }
      /**
       * <code>optional .google.protobuf.Struct details = 3;</code>
       */
      public Builder setDetails(
          com.google.protobuf.Struct.Builder builderForValue) {
        copyOnWrite();
        instance.setDetails(builderForValue.build());
        return this;
      }
      /**
       * <code>optional .google.protobuf.Struct details = 3;</code>
       */
      public Builder mergeDetails(com.google.protobuf.Struct value) {
        copyOnWrite();
        instance.mergeDetails(value);
        return this;
      }
      /**
       * <code>optional .google.protobuf.Struct details = 3;</code>
       */
      public Builder clearDetails() {  copyOnWrite();
        instance.clearDetails();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:outer.ErrorResult)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.dogu.protocol.generated.outer.Errors.ErrorResult();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "code_",
              "message_",
              "details_",
            };
            java.lang.String info =
                "\u0000\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0000\u0001\f\u0002\u0208" +
                "\u0003\u1009\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.dogu.protocol.generated.outer.Errors.ErrorResult> parser = PARSER;
          if (parser == null) {
            synchronized (com.dogu.protocol.generated.outer.Errors.ErrorResult.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.dogu.protocol.generated.outer.Errors.ErrorResult>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:outer.ErrorResult)
    private static final com.dogu.protocol.generated.outer.Errors.ErrorResult DEFAULT_INSTANCE;
    static {
      ErrorResult defaultInstance = new ErrorResult();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ErrorResult.class, defaultInstance);
    }

    public static com.dogu.protocol.generated.outer.Errors.ErrorResult getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ErrorResult> PARSER;

    public static com.google.protobuf.Parser<ErrorResult> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
