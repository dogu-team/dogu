// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner/types/device_control.proto

package com.dogu.protocol.generated.inner.types;

public final class DeviceControlOuterClass {
  private DeviceControlOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * Protobuf enum {@code inner.types.DeviceControlType}
   */
  public enum DeviceControlType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>DEVICE_CONTROL_TYPE_UNSPECIFIED = 0;</code>
     */
    DEVICE_CONTROL_TYPE_UNSPECIFIED(0),
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_INJECT_KEYCODE = 1;</code>
     */
    DEVICE_CONTROL_TYPE_AOS_INJECT_KEYCODE(1),
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_INJECT_TEXT = 2;</code>
     */
    DEVICE_CONTROL_TYPE_AOS_INJECT_TEXT(2),
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_INJECT_TOUCH_EVENT = 3;</code>
     */
    DEVICE_CONTROL_TYPE_AOS_INJECT_TOUCH_EVENT(3),
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_INJECT_SCROLL_EVENT = 4;</code>
     */
    DEVICE_CONTROL_TYPE_AOS_INJECT_SCROLL_EVENT(4),
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_BACK_OR_SCREEN_ON = 5;</code>
     */
    DEVICE_CONTROL_TYPE_AOS_BACK_OR_SCREEN_ON(5),
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_EXPAND_NOTIFICATION_PANEL = 6;</code>
     */
    DEVICE_CONTROL_TYPE_AOS_EXPAND_NOTIFICATION_PANEL(6),
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_EXPAND_SETTINGS_PANEL = 7;</code>
     */
    DEVICE_CONTROL_TYPE_AOS_EXPAND_SETTINGS_PANEL(7),
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_COLLAPSE_PANELS = 8;</code>
     */
    DEVICE_CONTROL_TYPE_AOS_COLLAPSE_PANELS(8),
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_GET_CLIPBOARD = 9;</code>
     */
    DEVICE_CONTROL_TYPE_AOS_GET_CLIPBOARD(9),
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_SET_CLIPBOARD = 10;</code>
     */
    DEVICE_CONTROL_TYPE_AOS_SET_CLIPBOARD(10),
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_SET_SCREEN_POWER_MODE = 11;</code>
     */
    DEVICE_CONTROL_TYPE_AOS_SET_SCREEN_POWER_MODE(11),
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_ROTATE_DEVICE = 12;</code>
     */
    DEVICE_CONTROL_TYPE_AOS_ROTATE_DEVICE(12),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * desktop
     * </pre>
     *
     * <code>DEVICE_CONTROL_TYPE_DESKTOP_INJECT_KEYCODE = 1;</code>
     */
    public static final DeviceControlType DEVICE_CONTROL_TYPE_DESKTOP_INJECT_KEYCODE = DEVICE_CONTROL_TYPE_AOS_INJECT_KEYCODE;
    /**
     * <code>DEVICE_CONTROL_TYPE_DESKTOP_INJECT_TEXT = 2;</code>
     */
    public static final DeviceControlType DEVICE_CONTROL_TYPE_DESKTOP_INJECT_TEXT = DEVICE_CONTROL_TYPE_AOS_INJECT_TEXT;
    /**
     * <code>DEVICE_CONTROL_TYPE_DESKTOP_INJECT_MOUSE_EVENT = 3;</code>
     */
    public static final DeviceControlType DEVICE_CONTROL_TYPE_DESKTOP_INJECT_MOUSE_EVENT = DEVICE_CONTROL_TYPE_AOS_INJECT_TOUCH_EVENT;
    /**
     * <code>DEVICE_CONTROL_TYPE_DESKTOP_INJECT_SCROLL_EVENT = 4;</code>
     */
    public static final DeviceControlType DEVICE_CONTROL_TYPE_DESKTOP_INJECT_SCROLL_EVENT = DEVICE_CONTROL_TYPE_AOS_INJECT_SCROLL_EVENT;
    /**
     * <code>DEVICE_CONTROL_TYPE_DESKTOP_GET_CLIPBOARD = 9;</code>
     */
    public static final DeviceControlType DEVICE_CONTROL_TYPE_DESKTOP_GET_CLIPBOARD = DEVICE_CONTROL_TYPE_AOS_GET_CLIPBOARD;
    /**
     * <code>DEVICE_CONTROL_TYPE_DESKTOP_SET_CLIPBOARD = 10;</code>
     */
    public static final DeviceControlType DEVICE_CONTROL_TYPE_DESKTOP_SET_CLIPBOARD = DEVICE_CONTROL_TYPE_AOS_SET_CLIPBOARD;
    /**
     * <code>DEVICE_CONTROL_TYPE_IOS_INJECT_KEYCODE = 1;</code>
     */
    public static final DeviceControlType DEVICE_CONTROL_TYPE_IOS_INJECT_KEYCODE = DEVICE_CONTROL_TYPE_AOS_INJECT_KEYCODE;
    /**
     * <code>DEVICE_CONTROL_TYPE_IOS_INJECT_TEXT = 2;</code>
     */
    public static final DeviceControlType DEVICE_CONTROL_TYPE_IOS_INJECT_TEXT = DEVICE_CONTROL_TYPE_AOS_INJECT_TEXT;
    /**
     * <code>DEVICE_CONTROL_TYPE_IOS_INJECT_TOUCH_EVENT = 3;</code>
     */
    public static final DeviceControlType DEVICE_CONTROL_TYPE_IOS_INJECT_TOUCH_EVENT = DEVICE_CONTROL_TYPE_AOS_INJECT_TOUCH_EVENT;
    /**
     * <code>DEVICE_CONTROL_TYPE_IOS_INJECT_SCROLL_EVENT = 4;</code>
     */
    public static final DeviceControlType DEVICE_CONTROL_TYPE_IOS_INJECT_SCROLL_EVENT = DEVICE_CONTROL_TYPE_AOS_INJECT_SCROLL_EVENT;
    /**
     * <code>DEVICE_CONTROL_TYPE_UNSPECIFIED = 0;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_UNSPECIFIED_VALUE = 0;
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_INJECT_KEYCODE = 1;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_AOS_INJECT_KEYCODE_VALUE = 1;
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_INJECT_TEXT = 2;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_AOS_INJECT_TEXT_VALUE = 2;
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_INJECT_TOUCH_EVENT = 3;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_AOS_INJECT_TOUCH_EVENT_VALUE = 3;
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_INJECT_SCROLL_EVENT = 4;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_AOS_INJECT_SCROLL_EVENT_VALUE = 4;
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_BACK_OR_SCREEN_ON = 5;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_AOS_BACK_OR_SCREEN_ON_VALUE = 5;
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_EXPAND_NOTIFICATION_PANEL = 6;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_AOS_EXPAND_NOTIFICATION_PANEL_VALUE = 6;
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_EXPAND_SETTINGS_PANEL = 7;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_AOS_EXPAND_SETTINGS_PANEL_VALUE = 7;
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_COLLAPSE_PANELS = 8;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_AOS_COLLAPSE_PANELS_VALUE = 8;
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_GET_CLIPBOARD = 9;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_AOS_GET_CLIPBOARD_VALUE = 9;
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_SET_CLIPBOARD = 10;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_AOS_SET_CLIPBOARD_VALUE = 10;
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_SET_SCREEN_POWER_MODE = 11;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_AOS_SET_SCREEN_POWER_MODE_VALUE = 11;
    /**
     * <code>DEVICE_CONTROL_TYPE_AOS_ROTATE_DEVICE = 12;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_AOS_ROTATE_DEVICE_VALUE = 12;
    /**
     * <pre>
     * desktop
     * </pre>
     *
     * <code>DEVICE_CONTROL_TYPE_DESKTOP_INJECT_KEYCODE = 1;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_DESKTOP_INJECT_KEYCODE_VALUE = 1;
    /**
     * <code>DEVICE_CONTROL_TYPE_DESKTOP_INJECT_TEXT = 2;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_DESKTOP_INJECT_TEXT_VALUE = 2;
    /**
     * <code>DEVICE_CONTROL_TYPE_DESKTOP_INJECT_MOUSE_EVENT = 3;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_DESKTOP_INJECT_MOUSE_EVENT_VALUE = 3;
    /**
     * <code>DEVICE_CONTROL_TYPE_DESKTOP_INJECT_SCROLL_EVENT = 4;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_DESKTOP_INJECT_SCROLL_EVENT_VALUE = 4;
    /**
     * <code>DEVICE_CONTROL_TYPE_DESKTOP_GET_CLIPBOARD = 9;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_DESKTOP_GET_CLIPBOARD_VALUE = 9;
    /**
     * <code>DEVICE_CONTROL_TYPE_DESKTOP_SET_CLIPBOARD = 10;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_DESKTOP_SET_CLIPBOARD_VALUE = 10;
    /**
     * <code>DEVICE_CONTROL_TYPE_IOS_INJECT_KEYCODE = 1;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_IOS_INJECT_KEYCODE_VALUE = 1;
    /**
     * <code>DEVICE_CONTROL_TYPE_IOS_INJECT_TEXT = 2;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_IOS_INJECT_TEXT_VALUE = 2;
    /**
     * <code>DEVICE_CONTROL_TYPE_IOS_INJECT_TOUCH_EVENT = 3;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_IOS_INJECT_TOUCH_EVENT_VALUE = 3;
    /**
     * <code>DEVICE_CONTROL_TYPE_IOS_INJECT_SCROLL_EVENT = 4;</code>
     */
    public static final int DEVICE_CONTROL_TYPE_IOS_INJECT_SCROLL_EVENT_VALUE = 4;


    @java.lang.Override
    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DeviceControlType valueOf(int value) {
      return forNumber(value);
    }

    public static DeviceControlType forNumber(int value) {
      switch (value) {
        case 0: return DEVICE_CONTROL_TYPE_UNSPECIFIED;
        case 1: return DEVICE_CONTROL_TYPE_AOS_INJECT_KEYCODE;
        case 2: return DEVICE_CONTROL_TYPE_AOS_INJECT_TEXT;
        case 3: return DEVICE_CONTROL_TYPE_AOS_INJECT_TOUCH_EVENT;
        case 4: return DEVICE_CONTROL_TYPE_AOS_INJECT_SCROLL_EVENT;
        case 5: return DEVICE_CONTROL_TYPE_AOS_BACK_OR_SCREEN_ON;
        case 6: return DEVICE_CONTROL_TYPE_AOS_EXPAND_NOTIFICATION_PANEL;
        case 7: return DEVICE_CONTROL_TYPE_AOS_EXPAND_SETTINGS_PANEL;
        case 8: return DEVICE_CONTROL_TYPE_AOS_COLLAPSE_PANELS;
        case 9: return DEVICE_CONTROL_TYPE_AOS_GET_CLIPBOARD;
        case 10: return DEVICE_CONTROL_TYPE_AOS_SET_CLIPBOARD;
        case 11: return DEVICE_CONTROL_TYPE_AOS_SET_SCREEN_POWER_MODE;
        case 12: return DEVICE_CONTROL_TYPE_AOS_ROTATE_DEVICE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DeviceControlType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DeviceControlType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DeviceControlType>() {
            @java.lang.Override
            public DeviceControlType findValueByNumber(int number) {
              return DeviceControlType.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return DeviceControlTypeVerifier.INSTANCE;
    }

    private static final class DeviceControlTypeVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new DeviceControlTypeVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return DeviceControlType.forNumber(number) != null;
            }
          };

    private final int value;

    private DeviceControlType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:inner.types.DeviceControlType)
  }

  /**
   * Protobuf enum {@code inner.types.DeviceControlMetaState}
   */
  public enum DeviceControlMetaState
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/KeyEvent.java
     * https://developer.android.com/reference/android/view/KeyEvent
     * </pre>
     *
     * <code>DEVICE_CONTROL_META_STATE_UNSPECIFIED = 0;</code>
     */
    DEVICE_CONTROL_META_STATE_UNSPECIFIED(0),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_CAP_LOCKED = 256;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_CAP_LOCKED(256),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_ALT_LOCKED = 512;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_ALT_LOCKED(512),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_SYM_LOCKED = 1024;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_SYM_LOCKED(1024),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_SELECTING = 2048;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_SELECTING(2048),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_ALT_ON = 2;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_ALT_ON(2),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_ALT_LEFT_ON = 16;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_ALT_LEFT_ON(16),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_ALT_RIGHT_ON = 32;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_ALT_RIGHT_ON(32),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_SHIFT_ON = 1;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_SHIFT_ON(1),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_SHIFT_LEFT_ON = 64;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_SHIFT_LEFT_ON(64),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_SHIFT_RIGHT_ON = 128;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_SHIFT_RIGHT_ON(128),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_SYM_ON = 4;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_SYM_ON(4),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_FUNCTION_ON = 8;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_FUNCTION_ON(8),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_CTRL_ON = 4096;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_CTRL_ON(4096),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_CTRL_LEFT_ON = 8192;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_CTRL_LEFT_ON(8192),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_CTRL_RIGHT_ON = 16384;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_CTRL_RIGHT_ON(16384),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_META_ON = 65536;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_META_ON(65536),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_META_LEFT_ON = 131072;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_META_LEFT_ON(131072),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_META_RIGHT_ON = 262144;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_META_RIGHT_ON(262144),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_CAPS_LOCK_ON = 1048576;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_CAPS_LOCK_ON(1048576),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_NUM_LOCK_ON = 2097152;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_NUM_LOCK_ON(2097152),
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_SCROLL_LOCK_ON = 4194304;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_SCROLL_LOCK_ON(4194304),
    /**
     * <pre>
     * META_SHIFT_ON | META_SHIFT_LEFT_ON | META_SHIFT_RIGHT_ON;
     * </pre>
     *
     * <code>DEVICE_CONTROL_META_STATE_AOS_SHIFT_MASK = 193;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_SHIFT_MASK(193),
    /**
     * <pre>
     * META_ALT_ON | META_ALT_LEFT_ON | META_ALT_RIGHT_ON;
     * </pre>
     *
     * <code>DEVICE_CONTROL_META_STATE_AOS_ALT_MASK = 50;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_ALT_MASK(50),
    /**
     * <pre>
     * META_CTRL_ON | META_CTRL_LEFT_ON | META_CTRL_RIGHT_ON;
     * </pre>
     *
     * <code>DEVICE_CONTROL_META_STATE_AOS_CTRL_MASK = 28672;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_CTRL_MASK(28672),
    /**
     * <pre>
     * META_META_ON | META_META_LEFT_ON | META_META_RIGHT_ON;
     * </pre>
     *
     * <code>DEVICE_CONTROL_META_STATE_AOS_META_MASK = 458752;</code>
     */
    DEVICE_CONTROL_META_STATE_AOS_META_MASK(458752),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * desktop
     * </pre>
     *
     * <code>DEVICE_CONTROL_META_STATE_DESKTOP_SHIFT = 1;</code>
     */
    public static final DeviceControlMetaState DEVICE_CONTROL_META_STATE_DESKTOP_SHIFT = DEVICE_CONTROL_META_STATE_AOS_SHIFT_ON;
    /**
     * <code>DEVICE_CONTROL_META_STATE_DESKTOP_ALT = 2;</code>
     */
    public static final DeviceControlMetaState DEVICE_CONTROL_META_STATE_DESKTOP_ALT = DEVICE_CONTROL_META_STATE_AOS_ALT_ON;
    /**
     * <code>DEVICE_CONTROL_META_STATE_DESKTOP_CTRL = 4096;</code>
     */
    public static final DeviceControlMetaState DEVICE_CONTROL_META_STATE_DESKTOP_CTRL = DEVICE_CONTROL_META_STATE_AOS_CTRL_ON;
    /**
     * <code>DEVICE_CONTROL_META_STATE_DESKTOP_META = 65536;</code>
     */
    public static final DeviceControlMetaState DEVICE_CONTROL_META_STATE_DESKTOP_META = DEVICE_CONTROL_META_STATE_AOS_META_ON;
    /**
     * <pre>
     * https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/KeyEvent.java
     * https://developer.android.com/reference/android/view/KeyEvent
     * </pre>
     *
     * <code>DEVICE_CONTROL_META_STATE_UNSPECIFIED = 0;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_UNSPECIFIED_VALUE = 0;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_CAP_LOCKED = 256;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_CAP_LOCKED_VALUE = 256;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_ALT_LOCKED = 512;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_ALT_LOCKED_VALUE = 512;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_SYM_LOCKED = 1024;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_SYM_LOCKED_VALUE = 1024;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_SELECTING = 2048;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_SELECTING_VALUE = 2048;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_ALT_ON = 2;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_ALT_ON_VALUE = 2;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_ALT_LEFT_ON = 16;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_ALT_LEFT_ON_VALUE = 16;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_ALT_RIGHT_ON = 32;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_ALT_RIGHT_ON_VALUE = 32;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_SHIFT_ON = 1;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_SHIFT_ON_VALUE = 1;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_SHIFT_LEFT_ON = 64;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_SHIFT_LEFT_ON_VALUE = 64;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_SHIFT_RIGHT_ON = 128;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_SHIFT_RIGHT_ON_VALUE = 128;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_SYM_ON = 4;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_SYM_ON_VALUE = 4;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_FUNCTION_ON = 8;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_FUNCTION_ON_VALUE = 8;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_CTRL_ON = 4096;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_CTRL_ON_VALUE = 4096;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_CTRL_LEFT_ON = 8192;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_CTRL_LEFT_ON_VALUE = 8192;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_CTRL_RIGHT_ON = 16384;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_CTRL_RIGHT_ON_VALUE = 16384;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_META_ON = 65536;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_META_ON_VALUE = 65536;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_META_LEFT_ON = 131072;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_META_LEFT_ON_VALUE = 131072;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_META_RIGHT_ON = 262144;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_META_RIGHT_ON_VALUE = 262144;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_CAPS_LOCK_ON = 1048576;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_CAPS_LOCK_ON_VALUE = 1048576;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_NUM_LOCK_ON = 2097152;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_NUM_LOCK_ON_VALUE = 2097152;
    /**
     * <code>DEVICE_CONTROL_META_STATE_AOS_SCROLL_LOCK_ON = 4194304;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_SCROLL_LOCK_ON_VALUE = 4194304;
    /**
     * <pre>
     * META_SHIFT_ON | META_SHIFT_LEFT_ON | META_SHIFT_RIGHT_ON;
     * </pre>
     *
     * <code>DEVICE_CONTROL_META_STATE_AOS_SHIFT_MASK = 193;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_SHIFT_MASK_VALUE = 193;
    /**
     * <pre>
     * META_ALT_ON | META_ALT_LEFT_ON | META_ALT_RIGHT_ON;
     * </pre>
     *
     * <code>DEVICE_CONTROL_META_STATE_AOS_ALT_MASK = 50;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_ALT_MASK_VALUE = 50;
    /**
     * <pre>
     * META_CTRL_ON | META_CTRL_LEFT_ON | META_CTRL_RIGHT_ON;
     * </pre>
     *
     * <code>DEVICE_CONTROL_META_STATE_AOS_CTRL_MASK = 28672;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_CTRL_MASK_VALUE = 28672;
    /**
     * <pre>
     * META_META_ON | META_META_LEFT_ON | META_META_RIGHT_ON;
     * </pre>
     *
     * <code>DEVICE_CONTROL_META_STATE_AOS_META_MASK = 458752;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_AOS_META_MASK_VALUE = 458752;
    /**
     * <pre>
     * desktop
     * </pre>
     *
     * <code>DEVICE_CONTROL_META_STATE_DESKTOP_SHIFT = 1;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_DESKTOP_SHIFT_VALUE = 1;
    /**
     * <code>DEVICE_CONTROL_META_STATE_DESKTOP_ALT = 2;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_DESKTOP_ALT_VALUE = 2;
    /**
     * <code>DEVICE_CONTROL_META_STATE_DESKTOP_CTRL = 4096;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_DESKTOP_CTRL_VALUE = 4096;
    /**
     * <code>DEVICE_CONTROL_META_STATE_DESKTOP_META = 65536;</code>
     */
    public static final int DEVICE_CONTROL_META_STATE_DESKTOP_META_VALUE = 65536;


    @java.lang.Override
    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DeviceControlMetaState valueOf(int value) {
      return forNumber(value);
    }

    public static DeviceControlMetaState forNumber(int value) {
      switch (value) {
        case 0: return DEVICE_CONTROL_META_STATE_UNSPECIFIED;
        case 256: return DEVICE_CONTROL_META_STATE_AOS_CAP_LOCKED;
        case 512: return DEVICE_CONTROL_META_STATE_AOS_ALT_LOCKED;
        case 1024: return DEVICE_CONTROL_META_STATE_AOS_SYM_LOCKED;
        case 2048: return DEVICE_CONTROL_META_STATE_AOS_SELECTING;
        case 2: return DEVICE_CONTROL_META_STATE_AOS_ALT_ON;
        case 16: return DEVICE_CONTROL_META_STATE_AOS_ALT_LEFT_ON;
        case 32: return DEVICE_CONTROL_META_STATE_AOS_ALT_RIGHT_ON;
        case 1: return DEVICE_CONTROL_META_STATE_AOS_SHIFT_ON;
        case 64: return DEVICE_CONTROL_META_STATE_AOS_SHIFT_LEFT_ON;
        case 128: return DEVICE_CONTROL_META_STATE_AOS_SHIFT_RIGHT_ON;
        case 4: return DEVICE_CONTROL_META_STATE_AOS_SYM_ON;
        case 8: return DEVICE_CONTROL_META_STATE_AOS_FUNCTION_ON;
        case 4096: return DEVICE_CONTROL_META_STATE_AOS_CTRL_ON;
        case 8192: return DEVICE_CONTROL_META_STATE_AOS_CTRL_LEFT_ON;
        case 16384: return DEVICE_CONTROL_META_STATE_AOS_CTRL_RIGHT_ON;
        case 65536: return DEVICE_CONTROL_META_STATE_AOS_META_ON;
        case 131072: return DEVICE_CONTROL_META_STATE_AOS_META_LEFT_ON;
        case 262144: return DEVICE_CONTROL_META_STATE_AOS_META_RIGHT_ON;
        case 1048576: return DEVICE_CONTROL_META_STATE_AOS_CAPS_LOCK_ON;
        case 2097152: return DEVICE_CONTROL_META_STATE_AOS_NUM_LOCK_ON;
        case 4194304: return DEVICE_CONTROL_META_STATE_AOS_SCROLL_LOCK_ON;
        case 193: return DEVICE_CONTROL_META_STATE_AOS_SHIFT_MASK;
        case 50: return DEVICE_CONTROL_META_STATE_AOS_ALT_MASK;
        case 28672: return DEVICE_CONTROL_META_STATE_AOS_CTRL_MASK;
        case 458752: return DEVICE_CONTROL_META_STATE_AOS_META_MASK;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DeviceControlMetaState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DeviceControlMetaState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DeviceControlMetaState>() {
            @java.lang.Override
            public DeviceControlMetaState findValueByNumber(int number) {
              return DeviceControlMetaState.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return DeviceControlMetaStateVerifier.INSTANCE;
    }

    private static final class DeviceControlMetaStateVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new DeviceControlMetaStateVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return DeviceControlMetaState.forNumber(number) != null;
            }
          };

    private final int value;

    private DeviceControlMetaState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:inner.types.DeviceControlMetaState)
  }

  /**
   * Protobuf enum {@code inner.types.DeviceControlAction}
   */
  public enum DeviceControlAction
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>DEVICE_CONTROL_ACTION_UNSPECIFIED = 0;</code>
     */
    DEVICE_CONTROL_ACTION_UNSPECIFIED(0),
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_UP = 1;</code>
     */
    DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_UP(1),
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_MULTIPLE = 2;</code>
     */
    DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_MULTIPLE(2),
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_CANCEL = 3;</code>
     */
    DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_CANCEL(3),
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_OUTSIDE = 4;</code>
     */
    DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_OUTSIDE(4),
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_POINTER_DOWN = 5;</code>
     */
    DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_POINTER_DOWN(5),
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_POINTER_UP = 6;</code>
     */
    DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_POINTER_UP(6),
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_HOVER_MOVE = 7;</code>
     */
    DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_HOVER_MOVE(7),
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_SCROLL = 8;</code>
     */
    DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_SCROLL(8),
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_HOVER_ENTER = 9;</code>
     */
    DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_HOVER_ENTER(9),
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_HOVER_EXIT = 10;</code>
     */
    DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_HOVER_EXIT(10),
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_BUTTON_PRESS = 11;</code>
     */
    DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_BUTTON_PRESS(11),
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_BUTTON_RELEASE = 12;</code>
     */
    DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_BUTTON_RELEASE(12),
    /**
     * <code>DEVICE_CONTROL_ACTION_DESKTOP_ACTION_DOWNUP = 20;</code>
     */
    DEVICE_CONTROL_ACTION_DESKTOP_ACTION_DOWNUP(20),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/KeyEvent.java
     * https://developer.android.com/reference/android/view/KeyEvent
     * </pre>
     *
     * <code>DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_DOWN_UNSPECIFIED = 0;</code>
     */
    public static final DeviceControlAction DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_DOWN_UNSPECIFIED = DEVICE_CONTROL_ACTION_UNSPECIFIED;
    /**
     * <pre>
     * https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/MotionEvent.java
     * https://developer.android.com/reference/android/view/MotionEvent
     * </pre>
     *
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_DOWN_UNSPECIFIED = 0;</code>
     */
    public static final DeviceControlAction DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_DOWN_UNSPECIFIED = DEVICE_CONTROL_ACTION_UNSPECIFIED;
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_UP = 1;</code>
     */
    public static final DeviceControlAction DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_UP = DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_UP;
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_MOVE = 2;</code>
     */
    public static final DeviceControlAction DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_MOVE = DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_MULTIPLE;
    /**
     * <pre>
     * desktop
     * </pre>
     *
     * <code>DEVICE_CONTROL_ACTION_DESKTOP_ACTION_DOWN_UNSPECIFIED = 0;</code>
     */
    public static final DeviceControlAction DEVICE_CONTROL_ACTION_DESKTOP_ACTION_DOWN_UNSPECIFIED = DEVICE_CONTROL_ACTION_UNSPECIFIED;
    /**
     * <code>DEVICE_CONTROL_ACTION_DESKTOP_ACTION_UP = 1;</code>
     */
    public static final DeviceControlAction DEVICE_CONTROL_ACTION_DESKTOP_ACTION_UP = DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_UP;
    /**
     * <code>DEVICE_CONTROL_ACTION_DESKTOP_ACTION_MOVE = 2;</code>
     */
    public static final DeviceControlAction DEVICE_CONTROL_ACTION_DESKTOP_ACTION_MOVE = DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_MULTIPLE;
    /**
     * <code>DEVICE_CONTROL_ACTION_IOS_ACTION_DOWN_UNSPECIFIED = 0;</code>
     */
    public static final DeviceControlAction DEVICE_CONTROL_ACTION_IOS_ACTION_DOWN_UNSPECIFIED = DEVICE_CONTROL_ACTION_UNSPECIFIED;
    /**
     * <code>DEVICE_CONTROL_ACTION_IOS_ACTION_UP = 1;</code>
     */
    public static final DeviceControlAction DEVICE_CONTROL_ACTION_IOS_ACTION_UP = DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_UP;
    /**
     * <code>DEVICE_CONTROL_ACTION_IOS_ACTION_MOVE = 2;</code>
     */
    public static final DeviceControlAction DEVICE_CONTROL_ACTION_IOS_ACTION_MOVE = DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_MULTIPLE;
    /**
     * <code>DEVICE_CONTROL_ACTION_UNSPECIFIED = 0;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/KeyEvent.java
     * https://developer.android.com/reference/android/view/KeyEvent
     * </pre>
     *
     * <code>DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_DOWN_UNSPECIFIED = 0;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_DOWN_UNSPECIFIED_VALUE = 0;
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_UP = 1;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_UP_VALUE = 1;
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_MULTIPLE = 2;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_MULTIPLE_VALUE = 2;
    /**
     * <pre>
     * https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/MotionEvent.java
     * https://developer.android.com/reference/android/view/MotionEvent
     * </pre>
     *
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_DOWN_UNSPECIFIED = 0;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_DOWN_UNSPECIFIED_VALUE = 0;
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_UP = 1;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_UP_VALUE = 1;
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_MOVE = 2;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_MOVE_VALUE = 2;
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_CANCEL = 3;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_CANCEL_VALUE = 3;
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_OUTSIDE = 4;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_OUTSIDE_VALUE = 4;
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_POINTER_DOWN = 5;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_POINTER_DOWN_VALUE = 5;
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_POINTER_UP = 6;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_POINTER_UP_VALUE = 6;
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_HOVER_MOVE = 7;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_HOVER_MOVE_VALUE = 7;
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_SCROLL = 8;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_SCROLL_VALUE = 8;
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_HOVER_ENTER = 9;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_HOVER_ENTER_VALUE = 9;
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_HOVER_EXIT = 10;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_HOVER_EXIT_VALUE = 10;
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_BUTTON_PRESS = 11;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_BUTTON_PRESS_VALUE = 11;
    /**
     * <code>DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_BUTTON_RELEASE = 12;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_BUTTON_RELEASE_VALUE = 12;
    /**
     * <pre>
     * desktop
     * </pre>
     *
     * <code>DEVICE_CONTROL_ACTION_DESKTOP_ACTION_DOWN_UNSPECIFIED = 0;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_DESKTOP_ACTION_DOWN_UNSPECIFIED_VALUE = 0;
    /**
     * <code>DEVICE_CONTROL_ACTION_DESKTOP_ACTION_UP = 1;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_DESKTOP_ACTION_UP_VALUE = 1;
    /**
     * <code>DEVICE_CONTROL_ACTION_DESKTOP_ACTION_MOVE = 2;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_DESKTOP_ACTION_MOVE_VALUE = 2;
    /**
     * <code>DEVICE_CONTROL_ACTION_DESKTOP_ACTION_DOWNUP = 20;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_DESKTOP_ACTION_DOWNUP_VALUE = 20;
    /**
     * <code>DEVICE_CONTROL_ACTION_IOS_ACTION_DOWN_UNSPECIFIED = 0;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_IOS_ACTION_DOWN_UNSPECIFIED_VALUE = 0;
    /**
     * <code>DEVICE_CONTROL_ACTION_IOS_ACTION_UP = 1;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_IOS_ACTION_UP_VALUE = 1;
    /**
     * <code>DEVICE_CONTROL_ACTION_IOS_ACTION_MOVE = 2;</code>
     */
    public static final int DEVICE_CONTROL_ACTION_IOS_ACTION_MOVE_VALUE = 2;


    @java.lang.Override
    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DeviceControlAction valueOf(int value) {
      return forNumber(value);
    }

    public static DeviceControlAction forNumber(int value) {
      switch (value) {
        case 0: return DEVICE_CONTROL_ACTION_UNSPECIFIED;
        case 1: return DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_UP;
        case 2: return DEVICE_CONTROL_ACTION_AOS_KEYEVENT_ACTION_MULTIPLE;
        case 3: return DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_CANCEL;
        case 4: return DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_OUTSIDE;
        case 5: return DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_POINTER_DOWN;
        case 6: return DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_POINTER_UP;
        case 7: return DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_HOVER_MOVE;
        case 8: return DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_SCROLL;
        case 9: return DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_HOVER_ENTER;
        case 10: return DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_HOVER_EXIT;
        case 11: return DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_BUTTON_PRESS;
        case 12: return DEVICE_CONTROL_ACTION_AOS_MOTIONEVENT_ACTION_BUTTON_RELEASE;
        case 20: return DEVICE_CONTROL_ACTION_DESKTOP_ACTION_DOWNUP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DeviceControlAction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DeviceControlAction> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DeviceControlAction>() {
            @java.lang.Override
            public DeviceControlAction findValueByNumber(int number) {
              return DeviceControlAction.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return DeviceControlActionVerifier.INSTANCE;
    }

    private static final class DeviceControlActionVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new DeviceControlActionVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return DeviceControlAction.forNumber(number) != null;
            }
          };

    private final int value;

    private DeviceControlAction(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:inner.types.DeviceControlAction)
  }

  /**
   * Protobuf enum {@code inner.types.DeviceControlKeycode}
   */
  public enum DeviceControlKeycode
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>DEVICE_CONTROL_KEYCODE_UNSPECIFIED = 0;</code>
     */
    DEVICE_CONTROL_KEYCODE_UNSPECIFIED(0),
    /**
     * <pre>
     * https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/KeyEvent.java
     * https://developer.android.com/reference/android/view/KeyEvent
     * </pre>
     *
     * <code>DEVICE_CONTROL_KEYCODE_SOFT_LEFT = 1;</code>
     */
    DEVICE_CONTROL_KEYCODE_SOFT_LEFT(1),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SOFT_RIGHT = 2;</code>
     */
    DEVICE_CONTROL_KEYCODE_SOFT_RIGHT(2),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_HOME = 3;</code>
     */
    DEVICE_CONTROL_KEYCODE_HOME(3),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BACK = 4;</code>
     */
    DEVICE_CONTROL_KEYCODE_BACK(4),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CALL = 5;</code>
     */
    DEVICE_CONTROL_KEYCODE_CALL(5),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ENDCALL = 6;</code>
     */
    DEVICE_CONTROL_KEYCODE_ENDCALL(6),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_0 = 7;</code>
     */
    DEVICE_CONTROL_KEYCODE_0(7),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_1 = 8;</code>
     */
    DEVICE_CONTROL_KEYCODE_1(8),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_2 = 9;</code>
     */
    DEVICE_CONTROL_KEYCODE_2(9),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_3 = 10;</code>
     */
    DEVICE_CONTROL_KEYCODE_3(10),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_4 = 11;</code>
     */
    DEVICE_CONTROL_KEYCODE_4(11),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_5 = 12;</code>
     */
    DEVICE_CONTROL_KEYCODE_5(12),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_6 = 13;</code>
     */
    DEVICE_CONTROL_KEYCODE_6(13),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_7 = 14;</code>
     */
    DEVICE_CONTROL_KEYCODE_7(14),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_8 = 15;</code>
     */
    DEVICE_CONTROL_KEYCODE_8(15),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_9 = 16;</code>
     */
    DEVICE_CONTROL_KEYCODE_9(16),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_STAR = 17;</code>
     */
    DEVICE_CONTROL_KEYCODE_STAR(17),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_POUND = 18;</code>
     */
    DEVICE_CONTROL_KEYCODE_POUND(18),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DPAD_UP = 19;</code>
     */
    DEVICE_CONTROL_KEYCODE_DPAD_UP(19),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DPAD_DOWN = 20;</code>
     */
    DEVICE_CONTROL_KEYCODE_DPAD_DOWN(20),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DPAD_LEFT = 21;</code>
     */
    DEVICE_CONTROL_KEYCODE_DPAD_LEFT(21),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DPAD_RIGHT = 22;</code>
     */
    DEVICE_CONTROL_KEYCODE_DPAD_RIGHT(22),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DPAD_CENTER = 23;</code>
     */
    DEVICE_CONTROL_KEYCODE_DPAD_CENTER(23),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VOLUME_UP = 24;</code>
     */
    DEVICE_CONTROL_KEYCODE_VOLUME_UP(24),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VOLUME_DOWN = 25;</code>
     */
    DEVICE_CONTROL_KEYCODE_VOLUME_DOWN(25),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_POWER = 26;</code>
     */
    DEVICE_CONTROL_KEYCODE_POWER(26),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CAMERA = 27;</code>
     */
    DEVICE_CONTROL_KEYCODE_CAMERA(27),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CLEAR = 28;</code>
     */
    DEVICE_CONTROL_KEYCODE_CLEAR(28),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_A = 29;</code>
     */
    DEVICE_CONTROL_KEYCODE_A(29),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_B = 30;</code>
     */
    DEVICE_CONTROL_KEYCODE_B(30),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_C = 31;</code>
     */
    DEVICE_CONTROL_KEYCODE_C(31),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_D = 32;</code>
     */
    DEVICE_CONTROL_KEYCODE_D(32),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_E = 33;</code>
     */
    DEVICE_CONTROL_KEYCODE_E(33),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F = 34;</code>
     */
    DEVICE_CONTROL_KEYCODE_F(34),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_G = 35;</code>
     */
    DEVICE_CONTROL_KEYCODE_G(35),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_H = 36;</code>
     */
    DEVICE_CONTROL_KEYCODE_H(36),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_I = 37;</code>
     */
    DEVICE_CONTROL_KEYCODE_I(37),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_J = 38;</code>
     */
    DEVICE_CONTROL_KEYCODE_J(38),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_K = 39;</code>
     */
    DEVICE_CONTROL_KEYCODE_K(39),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_L = 40;</code>
     */
    DEVICE_CONTROL_KEYCODE_L(40),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_M = 41;</code>
     */
    DEVICE_CONTROL_KEYCODE_M(41),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_N = 42;</code>
     */
    DEVICE_CONTROL_KEYCODE_N(42),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_O = 43;</code>
     */
    DEVICE_CONTROL_KEYCODE_O(43),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_P = 44;</code>
     */
    DEVICE_CONTROL_KEYCODE_P(44),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_Q = 45;</code>
     */
    DEVICE_CONTROL_KEYCODE_Q(45),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_R = 46;</code>
     */
    DEVICE_CONTROL_KEYCODE_R(46),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_S = 47;</code>
     */
    DEVICE_CONTROL_KEYCODE_S(47),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_T = 48;</code>
     */
    DEVICE_CONTROL_KEYCODE_T(48),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_U = 49;</code>
     */
    DEVICE_CONTROL_KEYCODE_U(49),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_V = 50;</code>
     */
    DEVICE_CONTROL_KEYCODE_V(50),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_W = 51;</code>
     */
    DEVICE_CONTROL_KEYCODE_W(51),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_X = 52;</code>
     */
    DEVICE_CONTROL_KEYCODE_X(52),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_Y = 53;</code>
     */
    DEVICE_CONTROL_KEYCODE_Y(53),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_Z = 54;</code>
     */
    DEVICE_CONTROL_KEYCODE_Z(54),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_COMMA = 55;</code>
     */
    DEVICE_CONTROL_KEYCODE_COMMA(55),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PERIOD = 56;</code>
     */
    DEVICE_CONTROL_KEYCODE_PERIOD(56),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ALT_LEFT = 57;</code>
     */
    DEVICE_CONTROL_KEYCODE_ALT_LEFT(57),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ALT_RIGHT = 58;</code>
     */
    DEVICE_CONTROL_KEYCODE_ALT_RIGHT(58),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SHIFT_LEFT = 59;</code>
     */
    DEVICE_CONTROL_KEYCODE_SHIFT_LEFT(59),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SHIFT_RIGHT = 60;</code>
     */
    DEVICE_CONTROL_KEYCODE_SHIFT_RIGHT(60),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TAB = 61;</code>
     */
    DEVICE_CONTROL_KEYCODE_TAB(61),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SPACE = 62;</code>
     */
    DEVICE_CONTROL_KEYCODE_SPACE(62),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SYM = 63;</code>
     */
    DEVICE_CONTROL_KEYCODE_SYM(63),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_EXPLORER = 64;</code>
     */
    DEVICE_CONTROL_KEYCODE_EXPLORER(64),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ENVELOPE = 65;</code>
     */
    DEVICE_CONTROL_KEYCODE_ENVELOPE(65),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ENTER = 66;</code>
     */
    DEVICE_CONTROL_KEYCODE_ENTER(66),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DEL = 67;</code>
     */
    DEVICE_CONTROL_KEYCODE_DEL(67),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_GRAVE = 68;</code>
     */
    DEVICE_CONTROL_KEYCODE_GRAVE(68),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MINUS = 69;</code>
     */
    DEVICE_CONTROL_KEYCODE_MINUS(69),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_EQUALS = 70;</code>
     */
    DEVICE_CONTROL_KEYCODE_EQUALS(70),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_LEFT_BRACKET = 71;</code>
     */
    DEVICE_CONTROL_KEYCODE_LEFT_BRACKET(71),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_RIGHT_BRACKET = 72;</code>
     */
    DEVICE_CONTROL_KEYCODE_RIGHT_BRACKET(72),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BACKSLASH = 73;</code>
     */
    DEVICE_CONTROL_KEYCODE_BACKSLASH(73),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SEMICOLON = 74;</code>
     */
    DEVICE_CONTROL_KEYCODE_SEMICOLON(74),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_APOSTROPHE = 75;</code>
     */
    DEVICE_CONTROL_KEYCODE_APOSTROPHE(75),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SLASH = 76;</code>
     */
    DEVICE_CONTROL_KEYCODE_SLASH(76),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_AT = 77;</code>
     */
    DEVICE_CONTROL_KEYCODE_AT(77),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUM = 78;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUM(78),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_HEADSETHOOK = 79;</code>
     */
    DEVICE_CONTROL_KEYCODE_HEADSETHOOK(79),
    /**
     * <pre>
     **Camera* focus
     * </pre>
     *
     * <code>DEVICE_CONTROL_KEYCODE_FOCUS = 80;</code>
     */
    DEVICE_CONTROL_KEYCODE_FOCUS(80),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PLUS = 81;</code>
     */
    DEVICE_CONTROL_KEYCODE_PLUS(81),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MENU = 82;</code>
     */
    DEVICE_CONTROL_KEYCODE_MENU(82),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NOTIFICATION = 83;</code>
     */
    DEVICE_CONTROL_KEYCODE_NOTIFICATION(83),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SEARCH = 84;</code>
     */
    DEVICE_CONTROL_KEYCODE_SEARCH(84),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_PLAY_PAUSE = 85;</code>
     */
    DEVICE_CONTROL_KEYCODE_MEDIA_PLAY_PAUSE(85),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_STOP = 86;</code>
     */
    DEVICE_CONTROL_KEYCODE_MEDIA_STOP(86),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_NEXT = 87;</code>
     */
    DEVICE_CONTROL_KEYCODE_MEDIA_NEXT(87),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_PREVIOUS = 88;</code>
     */
    DEVICE_CONTROL_KEYCODE_MEDIA_PREVIOUS(88),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_REWIND = 89;</code>
     */
    DEVICE_CONTROL_KEYCODE_MEDIA_REWIND(89),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_FAST_FORWARD = 90;</code>
     */
    DEVICE_CONTROL_KEYCODE_MEDIA_FAST_FORWARD(90),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MUTE = 91;</code>
     */
    DEVICE_CONTROL_KEYCODE_MUTE(91),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PAGE_UP = 92;</code>
     */
    DEVICE_CONTROL_KEYCODE_PAGE_UP(92),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PAGE_DOWN = 93;</code>
     */
    DEVICE_CONTROL_KEYCODE_PAGE_DOWN(93),
    /**
     * <pre>
     * switch symbol-sets (Emoji,Kao-moji)
     * </pre>
     *
     * <code>DEVICE_CONTROL_KEYCODE_PICTSYMBOLS = 94;</code>
     */
    DEVICE_CONTROL_KEYCODE_PICTSYMBOLS(94),
    /**
     * <pre>
     * switch char-sets (Kanji,Katakana)
     * </pre>
     *
     * <code>DEVICE_CONTROL_KEYCODE_SWITCH_CHARSET = 95;</code>
     */
    DEVICE_CONTROL_KEYCODE_SWITCH_CHARSET(95),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_A = 96;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_A(96),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_B = 97;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_B(97),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_C = 98;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_C(98),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_X = 99;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_X(99),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_Y = 100;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_Y(100),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_Z = 101;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_Z(101),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_L1 = 102;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_L1(102),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_R1 = 103;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_R1(103),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_L2 = 104;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_L2(104),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_R2 = 105;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_R2(105),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_THUMBL = 106;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_THUMBL(106),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_THUMBR = 107;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_THUMBR(107),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_START = 108;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_START(108),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_SELECT = 109;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_SELECT(109),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_MODE = 110;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_MODE(110),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ESCAPE = 111;</code>
     */
    DEVICE_CONTROL_KEYCODE_ESCAPE(111),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_FORWARD_DEL = 112;</code>
     */
    DEVICE_CONTROL_KEYCODE_FORWARD_DEL(112),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CTRL_LEFT = 113;</code>
     */
    DEVICE_CONTROL_KEYCODE_CTRL_LEFT(113),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CTRL_RIGHT = 114;</code>
     */
    DEVICE_CONTROL_KEYCODE_CTRL_RIGHT(114),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CAPS_LOCK = 115;</code>
     */
    DEVICE_CONTROL_KEYCODE_CAPS_LOCK(115),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SCROLL_LOCK = 116;</code>
     */
    DEVICE_CONTROL_KEYCODE_SCROLL_LOCK(116),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_META_LEFT = 117;</code>
     */
    DEVICE_CONTROL_KEYCODE_META_LEFT(117),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_META_RIGHT = 118;</code>
     */
    DEVICE_CONTROL_KEYCODE_META_RIGHT(118),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_FUNCTION = 119;</code>
     */
    DEVICE_CONTROL_KEYCODE_FUNCTION(119),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SYSRQ = 120;</code>
     */
    DEVICE_CONTROL_KEYCODE_SYSRQ(120),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BREAK = 121;</code>
     */
    DEVICE_CONTROL_KEYCODE_BREAK(121),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MOVE_HOME = 122;</code>
     */
    DEVICE_CONTROL_KEYCODE_MOVE_HOME(122),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MOVE_END = 123;</code>
     */
    DEVICE_CONTROL_KEYCODE_MOVE_END(123),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_INSERT = 124;</code>
     */
    DEVICE_CONTROL_KEYCODE_INSERT(124),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_FORWARD = 125;</code>
     */
    DEVICE_CONTROL_KEYCODE_FORWARD(125),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_PLAY = 126;</code>
     */
    DEVICE_CONTROL_KEYCODE_MEDIA_PLAY(126),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_PAUSE = 127;</code>
     */
    DEVICE_CONTROL_KEYCODE_MEDIA_PAUSE(127),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_CLOSE = 128;</code>
     */
    DEVICE_CONTROL_KEYCODE_MEDIA_CLOSE(128),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_EJECT = 129;</code>
     */
    DEVICE_CONTROL_KEYCODE_MEDIA_EJECT(129),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_RECORD = 130;</code>
     */
    DEVICE_CONTROL_KEYCODE_MEDIA_RECORD(130),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F1 = 131;</code>
     */
    DEVICE_CONTROL_KEYCODE_F1(131),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F2 = 132;</code>
     */
    DEVICE_CONTROL_KEYCODE_F2(132),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F3 = 133;</code>
     */
    DEVICE_CONTROL_KEYCODE_F3(133),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F4 = 134;</code>
     */
    DEVICE_CONTROL_KEYCODE_F4(134),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F5 = 135;</code>
     */
    DEVICE_CONTROL_KEYCODE_F5(135),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F6 = 136;</code>
     */
    DEVICE_CONTROL_KEYCODE_F6(136),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F7 = 137;</code>
     */
    DEVICE_CONTROL_KEYCODE_F7(137),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F8 = 138;</code>
     */
    DEVICE_CONTROL_KEYCODE_F8(138),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F9 = 139;</code>
     */
    DEVICE_CONTROL_KEYCODE_F9(139),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F10 = 140;</code>
     */
    DEVICE_CONTROL_KEYCODE_F10(140),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F11 = 141;</code>
     */
    DEVICE_CONTROL_KEYCODE_F11(141),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F12 = 142;</code>
     */
    DEVICE_CONTROL_KEYCODE_F12(142),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUM_LOCK = 143;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUM_LOCK(143),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_0 = 144;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_0(144),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_1 = 145;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_1(145),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_2 = 146;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_2(146),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_3 = 147;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_3(147),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_4 = 148;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_4(148),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_5 = 149;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_5(149),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_6 = 150;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_6(150),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_7 = 151;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_7(151),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_8 = 152;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_8(152),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_9 = 153;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_9(153),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_DIVIDE = 154;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_DIVIDE(154),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_MULTIPLY = 155;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_MULTIPLY(155),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_SUBTRACT = 156;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_SUBTRACT(156),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_ADD = 157;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_ADD(157),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_DOT = 158;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_DOT(158),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_COMMA = 159;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_COMMA(159),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_ENTER = 160;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_ENTER(160),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_EQUALS = 161;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_EQUALS(161),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_LEFT_PAREN = 162;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_LEFT_PAREN(162),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_RIGHT_PAREN = 163;</code>
     */
    DEVICE_CONTROL_KEYCODE_NUMPAD_RIGHT_PAREN(163),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VOLUME_MUTE = 164;</code>
     */
    DEVICE_CONTROL_KEYCODE_VOLUME_MUTE(164),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_INFO = 165;</code>
     */
    DEVICE_CONTROL_KEYCODE_INFO(165),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CHANNEL_UP = 166;</code>
     */
    DEVICE_CONTROL_KEYCODE_CHANNEL_UP(166),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CHANNEL_DOWN = 167;</code>
     */
    DEVICE_CONTROL_KEYCODE_CHANNEL_DOWN(167),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ZOOM_IN = 168;</code>
     */
    DEVICE_CONTROL_KEYCODE_ZOOM_IN(168),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ZOOM_OUT = 169;</code>
     */
    DEVICE_CONTROL_KEYCODE_ZOOM_OUT(169),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV = 170;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV(170),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_WINDOW = 171;</code>
     */
    DEVICE_CONTROL_KEYCODE_WINDOW(171),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_GUIDE = 172;</code>
     */
    DEVICE_CONTROL_KEYCODE_GUIDE(172),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DVR = 173;</code>
     */
    DEVICE_CONTROL_KEYCODE_DVR(173),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BOOKMARK = 174;</code>
     */
    DEVICE_CONTROL_KEYCODE_BOOKMARK(174),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CAPTIONS = 175;</code>
     */
    DEVICE_CONTROL_KEYCODE_CAPTIONS(175),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SETTINGS = 176;</code>
     */
    DEVICE_CONTROL_KEYCODE_SETTINGS(176),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_POWER = 177;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_POWER(177),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT = 178;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_INPUT(178),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_STB_POWER = 179;</code>
     */
    DEVICE_CONTROL_KEYCODE_STB_POWER(179),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_STB_INPUT = 180;</code>
     */
    DEVICE_CONTROL_KEYCODE_STB_INPUT(180),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_AVR_POWER = 181;</code>
     */
    DEVICE_CONTROL_KEYCODE_AVR_POWER(181),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_AVR_INPUT = 182;</code>
     */
    DEVICE_CONTROL_KEYCODE_AVR_INPUT(182),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PROG_RED = 183;</code>
     */
    DEVICE_CONTROL_KEYCODE_PROG_RED(183),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PROG_GREEN = 184;</code>
     */
    DEVICE_CONTROL_KEYCODE_PROG_GREEN(184),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PROG_YELLOW = 185;</code>
     */
    DEVICE_CONTROL_KEYCODE_PROG_YELLOW(185),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PROG_BLUE = 186;</code>
     */
    DEVICE_CONTROL_KEYCODE_PROG_BLUE(186),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_APP_SWITCH = 187;</code>
     */
    DEVICE_CONTROL_KEYCODE_APP_SWITCH(187),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_1 = 188;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_1(188),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_2 = 189;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_2(189),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_3 = 190;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_3(190),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_4 = 191;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_4(191),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_5 = 192;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_5(192),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_6 = 193;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_6(193),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_7 = 194;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_7(194),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_8 = 195;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_8(195),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_9 = 196;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_9(196),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_10 = 197;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_10(197),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_11 = 198;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_11(198),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_12 = 199;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_12(199),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_13 = 200;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_13(200),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_14 = 201;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_14(201),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_15 = 202;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_15(202),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_16 = 203;</code>
     */
    DEVICE_CONTROL_KEYCODE_BUTTON_16(203),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_LANGUAGE_SWITCH = 204;</code>
     */
    DEVICE_CONTROL_KEYCODE_LANGUAGE_SWITCH(204),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MANNER_MODE = 205;</code>
     */
    DEVICE_CONTROL_KEYCODE_MANNER_MODE(205),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_3D_MODE = 206;</code>
     */
    DEVICE_CONTROL_KEYCODE_3D_MODE(206),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CONTACTS = 207;</code>
     */
    DEVICE_CONTROL_KEYCODE_CONTACTS(207),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CALENDAR = 208;</code>
     */
    DEVICE_CONTROL_KEYCODE_CALENDAR(208),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MUSIC = 209;</code>
     */
    DEVICE_CONTROL_KEYCODE_MUSIC(209),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CALCULATOR = 210;</code>
     */
    DEVICE_CONTROL_KEYCODE_CALCULATOR(210),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ZENKAKU_HANKAKU = 211;</code>
     */
    DEVICE_CONTROL_KEYCODE_ZENKAKU_HANKAKU(211),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_EISU = 212;</code>
     */
    DEVICE_CONTROL_KEYCODE_EISU(212),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MUHENKAN = 213;</code>
     */
    DEVICE_CONTROL_KEYCODE_MUHENKAN(213),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_HENKAN = 214;</code>
     */
    DEVICE_CONTROL_KEYCODE_HENKAN(214),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_KATAKANA_HIRAGANA = 215;</code>
     */
    DEVICE_CONTROL_KEYCODE_KATAKANA_HIRAGANA(215),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_YEN = 216;</code>
     */
    DEVICE_CONTROL_KEYCODE_YEN(216),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_RO = 217;</code>
     */
    DEVICE_CONTROL_KEYCODE_RO(217),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_KANA = 218;</code>
     */
    DEVICE_CONTROL_KEYCODE_KANA(218),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ASSIST = 219;</code>
     */
    DEVICE_CONTROL_KEYCODE_ASSIST(219),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BRIGHTNESS_DOWN = 220;</code>
     */
    DEVICE_CONTROL_KEYCODE_BRIGHTNESS_DOWN(220),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BRIGHTNESS_UP = 221;</code>
     */
    DEVICE_CONTROL_KEYCODE_BRIGHTNESS_UP(221),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_AUDIO_TRACK = 222;</code>
     */
    DEVICE_CONTROL_KEYCODE_MEDIA_AUDIO_TRACK(222),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SLEEP = 223;</code>
     */
    DEVICE_CONTROL_KEYCODE_SLEEP(223),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_WAKEUP = 224;</code>
     */
    DEVICE_CONTROL_KEYCODE_WAKEUP(224),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PAIRING = 225;</code>
     */
    DEVICE_CONTROL_KEYCODE_PAIRING(225),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_TOP_MENU = 226;</code>
     */
    DEVICE_CONTROL_KEYCODE_MEDIA_TOP_MENU(226),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_11 = 227;</code>
     */
    DEVICE_CONTROL_KEYCODE_11(227),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_12 = 228;</code>
     */
    DEVICE_CONTROL_KEYCODE_12(228),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_LAST_CHANNEL = 229;</code>
     */
    DEVICE_CONTROL_KEYCODE_LAST_CHANNEL(229),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_DATA_SERVICE = 230;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_DATA_SERVICE(230),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VOICE_ASSIST = 231;</code>
     */
    DEVICE_CONTROL_KEYCODE_VOICE_ASSIST(231),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_RADIO_SERVICE = 232;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_RADIO_SERVICE(232),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_TELETEXT = 233;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_TELETEXT(233),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_NUMBER_ENTRY = 234;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_NUMBER_ENTRY(234),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_TERRESTRIAL_ANALOG = 235;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_TERRESTRIAL_ANALOG(235),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_TERRESTRIAL_DIGITAL = 236;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_TERRESTRIAL_DIGITAL(236),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_SATELLITE = 237;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_SATELLITE(237),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_SATELLITE_BS = 238;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_SATELLITE_BS(238),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_SATELLITE_CS = 239;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_SATELLITE_CS(239),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_SATELLITE_SERVICE = 240;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_SATELLITE_SERVICE(240),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_NETWORK = 241;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_NETWORK(241),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_ANTENNA_CABLE = 242;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_ANTENNA_CABLE(242),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_1 = 243;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_1(243),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_2 = 244;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_2(244),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_3 = 245;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_3(245),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_4 = 246;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_4(246),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPOSITE_1 = 247;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPOSITE_1(247),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPOSITE_2 = 248;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPOSITE_2(248),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPONENT_1 = 249;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPONENT_1(249),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPONENT_2 = 250;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPONENT_2(250),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT_VGA_1 = 251;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_INPUT_VGA_1(251),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_AUDIO_DESCRIPTION = 252;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_AUDIO_DESCRIPTION(252),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP = 253;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP(253),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN = 254;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN(254),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_ZOOM_MODE = 255;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_ZOOM_MODE(255),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_CONTENTS_MENU = 256;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_CONTENTS_MENU(256),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_MEDIA_CONTEXT_MENU = 257;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_MEDIA_CONTEXT_MENU(257),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_TIMER_PROGRAMMING = 258;</code>
     */
    DEVICE_CONTROL_KEYCODE_TV_TIMER_PROGRAMMING(258),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_HELP = 259;</code>
     */
    DEVICE_CONTROL_KEYCODE_HELP(259),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NAVIGATE_PREVIOUS = 260;</code>
     */
    DEVICE_CONTROL_KEYCODE_NAVIGATE_PREVIOUS(260),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NAVIGATE_NEXT = 261;</code>
     */
    DEVICE_CONTROL_KEYCODE_NAVIGATE_NEXT(261),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NAVIGATE_IN = 262;</code>
     */
    DEVICE_CONTROL_KEYCODE_NAVIGATE_IN(262),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NAVIGATE_OUT = 263;</code>
     */
    DEVICE_CONTROL_KEYCODE_NAVIGATE_OUT(263),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_STEM_PRIMARY = 264;</code>
     */
    DEVICE_CONTROL_KEYCODE_STEM_PRIMARY(264),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_STEM_1 = 265;</code>
     */
    DEVICE_CONTROL_KEYCODE_STEM_1(265),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_STEM_2 = 266;</code>
     */
    DEVICE_CONTROL_KEYCODE_STEM_2(266),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_STEM_3 = 267;</code>
     */
    DEVICE_CONTROL_KEYCODE_STEM_3(267),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DPAD_UP_LEFT = 268;</code>
     */
    DEVICE_CONTROL_KEYCODE_DPAD_UP_LEFT(268),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DPAD_DOWN_LEFT = 269;</code>
     */
    DEVICE_CONTROL_KEYCODE_DPAD_DOWN_LEFT(269),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DPAD_UP_RIGHT = 270;</code>
     */
    DEVICE_CONTROL_KEYCODE_DPAD_UP_RIGHT(270),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DPAD_DOWN_RIGHT = 271;</code>
     */
    DEVICE_CONTROL_KEYCODE_DPAD_DOWN_RIGHT(271),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_SKIP_FORWARD = 272;</code>
     */
    DEVICE_CONTROL_KEYCODE_MEDIA_SKIP_FORWARD(272),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_SKIP_BACKWARD = 273;</code>
     */
    DEVICE_CONTROL_KEYCODE_MEDIA_SKIP_BACKWARD(273),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_STEP_FORWARD = 274;</code>
     */
    DEVICE_CONTROL_KEYCODE_MEDIA_STEP_FORWARD(274),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_STEP_BACKWARD = 275;</code>
     */
    DEVICE_CONTROL_KEYCODE_MEDIA_STEP_BACKWARD(275),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SOFT_SLEEP = 276;</code>
     */
    DEVICE_CONTROL_KEYCODE_SOFT_SLEEP(276),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CUT = 277;</code>
     */
    DEVICE_CONTROL_KEYCODE_CUT(277),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_COPY = 278;</code>
     */
    DEVICE_CONTROL_KEYCODE_COPY(278),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PASTE = 279;</code>
     */
    DEVICE_CONTROL_KEYCODE_PASTE(279),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_UP = 280;</code>
     */
    DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_UP(280),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_DOWN = 281;</code>
     */
    DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_DOWN(281),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_LEFT = 282;</code>
     */
    DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_LEFT(282),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_RIGHT = 283;</code>
     */
    DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_RIGHT(283),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ALL_APPS = 284;</code>
     */
    DEVICE_CONTROL_KEYCODE_ALL_APPS(284),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_REFRESH = 285;</code>
     */
    DEVICE_CONTROL_KEYCODE_REFRESH(285),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_THUMBS_UP = 286;</code>
     */
    DEVICE_CONTROL_KEYCODE_THUMBS_UP(286),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_THUMBS_DOWN = 287;</code>
     */
    DEVICE_CONTROL_KEYCODE_THUMBS_DOWN(287),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PROFILE_SWITCH = 288;</code>
     */
    DEVICE_CONTROL_KEYCODE_PROFILE_SWITCH(288),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VIDEO_APP_1 = 289;</code>
     */
    DEVICE_CONTROL_KEYCODE_VIDEO_APP_1(289),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VIDEO_APP_2 = 290;</code>
     */
    DEVICE_CONTROL_KEYCODE_VIDEO_APP_2(290),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VIDEO_APP_3 = 291;</code>
     */
    DEVICE_CONTROL_KEYCODE_VIDEO_APP_3(291),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VIDEO_APP_4 = 292;</code>
     */
    DEVICE_CONTROL_KEYCODE_VIDEO_APP_4(292),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VIDEO_APP_5 = 293;</code>
     */
    DEVICE_CONTROL_KEYCODE_VIDEO_APP_5(293),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VIDEO_APP_6 = 294;</code>
     */
    DEVICE_CONTROL_KEYCODE_VIDEO_APP_6(294),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VIDEO_APP_7 = 295;</code>
     */
    DEVICE_CONTROL_KEYCODE_VIDEO_APP_7(295),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VIDEO_APP_8 = 296;</code>
     */
    DEVICE_CONTROL_KEYCODE_VIDEO_APP_8(296),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_FEATURED_APP_1 = 297;</code>
     */
    DEVICE_CONTROL_KEYCODE_FEATURED_APP_1(297),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_FEATURED_APP_2 = 298;</code>
     */
    DEVICE_CONTROL_KEYCODE_FEATURED_APP_2(298),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_FEATURED_APP_3 = 299;</code>
     */
    DEVICE_CONTROL_KEYCODE_FEATURED_APP_3(299),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_FEATURED_APP_4 = 300;</code>
     */
    DEVICE_CONTROL_KEYCODE_FEATURED_APP_4(300),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DEMO_APP_1 = 301;</code>
     */
    DEVICE_CONTROL_KEYCODE_DEMO_APP_1(301),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DEMO_APP_2 = 302;</code>
     */
    DEVICE_CONTROL_KEYCODE_DEMO_APP_2(302),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DEMO_APP_3 = 303;</code>
     */
    DEVICE_CONTROL_KEYCODE_DEMO_APP_3(303),
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DEMO_APP_4 = 304;</code>
     */
    DEVICE_CONTROL_KEYCODE_DEMO_APP_4(304),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>DEVICE_CONTROL_KEYCODE_UNSPECIFIED = 0;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/KeyEvent.java
     * https://developer.android.com/reference/android/view/KeyEvent
     * </pre>
     *
     * <code>DEVICE_CONTROL_KEYCODE_SOFT_LEFT = 1;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SOFT_LEFT_VALUE = 1;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SOFT_RIGHT = 2;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SOFT_RIGHT_VALUE = 2;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_HOME = 3;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_HOME_VALUE = 3;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BACK = 4;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BACK_VALUE = 4;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CALL = 5;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_CALL_VALUE = 5;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ENDCALL = 6;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_ENDCALL_VALUE = 6;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_0 = 7;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_0_VALUE = 7;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_1 = 8;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_1_VALUE = 8;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_2 = 9;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_2_VALUE = 9;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_3 = 10;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_3_VALUE = 10;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_4 = 11;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_4_VALUE = 11;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_5 = 12;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_5_VALUE = 12;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_6 = 13;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_6_VALUE = 13;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_7 = 14;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_7_VALUE = 14;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_8 = 15;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_8_VALUE = 15;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_9 = 16;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_9_VALUE = 16;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_STAR = 17;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_STAR_VALUE = 17;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_POUND = 18;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_POUND_VALUE = 18;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DPAD_UP = 19;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_DPAD_UP_VALUE = 19;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DPAD_DOWN = 20;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_DPAD_DOWN_VALUE = 20;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DPAD_LEFT = 21;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_DPAD_LEFT_VALUE = 21;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DPAD_RIGHT = 22;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_DPAD_RIGHT_VALUE = 22;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DPAD_CENTER = 23;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_DPAD_CENTER_VALUE = 23;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VOLUME_UP = 24;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_VOLUME_UP_VALUE = 24;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VOLUME_DOWN = 25;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_VOLUME_DOWN_VALUE = 25;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_POWER = 26;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_POWER_VALUE = 26;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CAMERA = 27;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_CAMERA_VALUE = 27;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CLEAR = 28;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_CLEAR_VALUE = 28;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_A = 29;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_A_VALUE = 29;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_B = 30;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_B_VALUE = 30;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_C = 31;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_C_VALUE = 31;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_D = 32;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_D_VALUE = 32;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_E = 33;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_E_VALUE = 33;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F = 34;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_F_VALUE = 34;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_G = 35;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_G_VALUE = 35;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_H = 36;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_H_VALUE = 36;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_I = 37;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_I_VALUE = 37;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_J = 38;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_J_VALUE = 38;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_K = 39;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_K_VALUE = 39;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_L = 40;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_L_VALUE = 40;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_M = 41;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_M_VALUE = 41;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_N = 42;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_N_VALUE = 42;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_O = 43;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_O_VALUE = 43;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_P = 44;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_P_VALUE = 44;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_Q = 45;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_Q_VALUE = 45;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_R = 46;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_R_VALUE = 46;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_S = 47;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_S_VALUE = 47;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_T = 48;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_T_VALUE = 48;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_U = 49;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_U_VALUE = 49;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_V = 50;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_V_VALUE = 50;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_W = 51;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_W_VALUE = 51;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_X = 52;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_X_VALUE = 52;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_Y = 53;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_Y_VALUE = 53;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_Z = 54;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_Z_VALUE = 54;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_COMMA = 55;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_COMMA_VALUE = 55;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PERIOD = 56;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_PERIOD_VALUE = 56;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ALT_LEFT = 57;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_ALT_LEFT_VALUE = 57;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ALT_RIGHT = 58;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_ALT_RIGHT_VALUE = 58;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SHIFT_LEFT = 59;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SHIFT_LEFT_VALUE = 59;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SHIFT_RIGHT = 60;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SHIFT_RIGHT_VALUE = 60;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TAB = 61;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TAB_VALUE = 61;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SPACE = 62;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SPACE_VALUE = 62;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SYM = 63;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SYM_VALUE = 63;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_EXPLORER = 64;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_EXPLORER_VALUE = 64;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ENVELOPE = 65;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_ENVELOPE_VALUE = 65;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ENTER = 66;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_ENTER_VALUE = 66;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DEL = 67;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_DEL_VALUE = 67;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_GRAVE = 68;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_GRAVE_VALUE = 68;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MINUS = 69;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MINUS_VALUE = 69;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_EQUALS = 70;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_EQUALS_VALUE = 70;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_LEFT_BRACKET = 71;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_LEFT_BRACKET_VALUE = 71;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_RIGHT_BRACKET = 72;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_RIGHT_BRACKET_VALUE = 72;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BACKSLASH = 73;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BACKSLASH_VALUE = 73;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SEMICOLON = 74;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SEMICOLON_VALUE = 74;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_APOSTROPHE = 75;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_APOSTROPHE_VALUE = 75;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SLASH = 76;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SLASH_VALUE = 76;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_AT = 77;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_AT_VALUE = 77;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUM = 78;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUM_VALUE = 78;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_HEADSETHOOK = 79;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_HEADSETHOOK_VALUE = 79;
    /**
     * <pre>
     **Camera* focus
     * </pre>
     *
     * <code>DEVICE_CONTROL_KEYCODE_FOCUS = 80;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_FOCUS_VALUE = 80;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PLUS = 81;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_PLUS_VALUE = 81;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MENU = 82;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MENU_VALUE = 82;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NOTIFICATION = 83;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NOTIFICATION_VALUE = 83;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SEARCH = 84;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SEARCH_VALUE = 84;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_PLAY_PAUSE = 85;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MEDIA_PLAY_PAUSE_VALUE = 85;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_STOP = 86;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MEDIA_STOP_VALUE = 86;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_NEXT = 87;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MEDIA_NEXT_VALUE = 87;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_PREVIOUS = 88;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MEDIA_PREVIOUS_VALUE = 88;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_REWIND = 89;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MEDIA_REWIND_VALUE = 89;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_FAST_FORWARD = 90;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MEDIA_FAST_FORWARD_VALUE = 90;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MUTE = 91;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MUTE_VALUE = 91;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PAGE_UP = 92;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_PAGE_UP_VALUE = 92;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PAGE_DOWN = 93;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_PAGE_DOWN_VALUE = 93;
    /**
     * <pre>
     * switch symbol-sets (Emoji,Kao-moji)
     * </pre>
     *
     * <code>DEVICE_CONTROL_KEYCODE_PICTSYMBOLS = 94;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_PICTSYMBOLS_VALUE = 94;
    /**
     * <pre>
     * switch char-sets (Kanji,Katakana)
     * </pre>
     *
     * <code>DEVICE_CONTROL_KEYCODE_SWITCH_CHARSET = 95;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SWITCH_CHARSET_VALUE = 95;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_A = 96;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_A_VALUE = 96;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_B = 97;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_B_VALUE = 97;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_C = 98;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_C_VALUE = 98;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_X = 99;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_X_VALUE = 99;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_Y = 100;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_Y_VALUE = 100;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_Z = 101;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_Z_VALUE = 101;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_L1 = 102;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_L1_VALUE = 102;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_R1 = 103;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_R1_VALUE = 103;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_L2 = 104;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_L2_VALUE = 104;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_R2 = 105;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_R2_VALUE = 105;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_THUMBL = 106;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_THUMBL_VALUE = 106;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_THUMBR = 107;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_THUMBR_VALUE = 107;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_START = 108;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_START_VALUE = 108;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_SELECT = 109;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_SELECT_VALUE = 109;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_MODE = 110;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_MODE_VALUE = 110;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ESCAPE = 111;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_ESCAPE_VALUE = 111;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_FORWARD_DEL = 112;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_FORWARD_DEL_VALUE = 112;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CTRL_LEFT = 113;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_CTRL_LEFT_VALUE = 113;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CTRL_RIGHT = 114;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_CTRL_RIGHT_VALUE = 114;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CAPS_LOCK = 115;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_CAPS_LOCK_VALUE = 115;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SCROLL_LOCK = 116;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SCROLL_LOCK_VALUE = 116;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_META_LEFT = 117;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_META_LEFT_VALUE = 117;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_META_RIGHT = 118;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_META_RIGHT_VALUE = 118;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_FUNCTION = 119;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_FUNCTION_VALUE = 119;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SYSRQ = 120;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SYSRQ_VALUE = 120;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BREAK = 121;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BREAK_VALUE = 121;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MOVE_HOME = 122;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MOVE_HOME_VALUE = 122;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MOVE_END = 123;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MOVE_END_VALUE = 123;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_INSERT = 124;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_INSERT_VALUE = 124;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_FORWARD = 125;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_FORWARD_VALUE = 125;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_PLAY = 126;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MEDIA_PLAY_VALUE = 126;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_PAUSE = 127;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MEDIA_PAUSE_VALUE = 127;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_CLOSE = 128;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MEDIA_CLOSE_VALUE = 128;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_EJECT = 129;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MEDIA_EJECT_VALUE = 129;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_RECORD = 130;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MEDIA_RECORD_VALUE = 130;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F1 = 131;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_F1_VALUE = 131;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F2 = 132;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_F2_VALUE = 132;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F3 = 133;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_F3_VALUE = 133;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F4 = 134;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_F4_VALUE = 134;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F5 = 135;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_F5_VALUE = 135;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F6 = 136;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_F6_VALUE = 136;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F7 = 137;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_F7_VALUE = 137;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F8 = 138;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_F8_VALUE = 138;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F9 = 139;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_F9_VALUE = 139;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F10 = 140;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_F10_VALUE = 140;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F11 = 141;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_F11_VALUE = 141;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_F12 = 142;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_F12_VALUE = 142;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUM_LOCK = 143;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUM_LOCK_VALUE = 143;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_0 = 144;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_0_VALUE = 144;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_1 = 145;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_1_VALUE = 145;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_2 = 146;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_2_VALUE = 146;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_3 = 147;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_3_VALUE = 147;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_4 = 148;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_4_VALUE = 148;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_5 = 149;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_5_VALUE = 149;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_6 = 150;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_6_VALUE = 150;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_7 = 151;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_7_VALUE = 151;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_8 = 152;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_8_VALUE = 152;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_9 = 153;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_9_VALUE = 153;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_DIVIDE = 154;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_DIVIDE_VALUE = 154;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_MULTIPLY = 155;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_MULTIPLY_VALUE = 155;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_SUBTRACT = 156;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_SUBTRACT_VALUE = 156;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_ADD = 157;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_ADD_VALUE = 157;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_DOT = 158;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_DOT_VALUE = 158;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_COMMA = 159;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_COMMA_VALUE = 159;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_ENTER = 160;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_ENTER_VALUE = 160;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_EQUALS = 161;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_EQUALS_VALUE = 161;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_LEFT_PAREN = 162;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_LEFT_PAREN_VALUE = 162;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NUMPAD_RIGHT_PAREN = 163;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NUMPAD_RIGHT_PAREN_VALUE = 163;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VOLUME_MUTE = 164;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_VOLUME_MUTE_VALUE = 164;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_INFO = 165;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_INFO_VALUE = 165;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CHANNEL_UP = 166;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_CHANNEL_UP_VALUE = 166;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CHANNEL_DOWN = 167;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_CHANNEL_DOWN_VALUE = 167;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ZOOM_IN = 168;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_ZOOM_IN_VALUE = 168;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ZOOM_OUT = 169;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_ZOOM_OUT_VALUE = 169;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV = 170;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_VALUE = 170;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_WINDOW = 171;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_WINDOW_VALUE = 171;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_GUIDE = 172;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_GUIDE_VALUE = 172;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DVR = 173;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_DVR_VALUE = 173;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BOOKMARK = 174;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BOOKMARK_VALUE = 174;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CAPTIONS = 175;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_CAPTIONS_VALUE = 175;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SETTINGS = 176;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SETTINGS_VALUE = 176;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_POWER = 177;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_POWER_VALUE = 177;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT = 178;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_INPUT_VALUE = 178;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_STB_POWER = 179;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_STB_POWER_VALUE = 179;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_STB_INPUT = 180;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_STB_INPUT_VALUE = 180;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_AVR_POWER = 181;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_AVR_POWER_VALUE = 181;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_AVR_INPUT = 182;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_AVR_INPUT_VALUE = 182;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PROG_RED = 183;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_PROG_RED_VALUE = 183;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PROG_GREEN = 184;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_PROG_GREEN_VALUE = 184;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PROG_YELLOW = 185;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_PROG_YELLOW_VALUE = 185;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PROG_BLUE = 186;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_PROG_BLUE_VALUE = 186;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_APP_SWITCH = 187;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_APP_SWITCH_VALUE = 187;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_1 = 188;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_1_VALUE = 188;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_2 = 189;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_2_VALUE = 189;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_3 = 190;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_3_VALUE = 190;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_4 = 191;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_4_VALUE = 191;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_5 = 192;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_5_VALUE = 192;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_6 = 193;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_6_VALUE = 193;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_7 = 194;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_7_VALUE = 194;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_8 = 195;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_8_VALUE = 195;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_9 = 196;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_9_VALUE = 196;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_10 = 197;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_10_VALUE = 197;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_11 = 198;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_11_VALUE = 198;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_12 = 199;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_12_VALUE = 199;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_13 = 200;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_13_VALUE = 200;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_14 = 201;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_14_VALUE = 201;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_15 = 202;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_15_VALUE = 202;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BUTTON_16 = 203;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BUTTON_16_VALUE = 203;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_LANGUAGE_SWITCH = 204;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_LANGUAGE_SWITCH_VALUE = 204;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MANNER_MODE = 205;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MANNER_MODE_VALUE = 205;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_3D_MODE = 206;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_3D_MODE_VALUE = 206;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CONTACTS = 207;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_CONTACTS_VALUE = 207;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CALENDAR = 208;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_CALENDAR_VALUE = 208;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MUSIC = 209;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MUSIC_VALUE = 209;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CALCULATOR = 210;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_CALCULATOR_VALUE = 210;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ZENKAKU_HANKAKU = 211;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_ZENKAKU_HANKAKU_VALUE = 211;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_EISU = 212;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_EISU_VALUE = 212;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MUHENKAN = 213;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MUHENKAN_VALUE = 213;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_HENKAN = 214;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_HENKAN_VALUE = 214;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_KATAKANA_HIRAGANA = 215;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_KATAKANA_HIRAGANA_VALUE = 215;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_YEN = 216;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_YEN_VALUE = 216;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_RO = 217;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_RO_VALUE = 217;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_KANA = 218;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_KANA_VALUE = 218;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ASSIST = 219;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_ASSIST_VALUE = 219;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BRIGHTNESS_DOWN = 220;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BRIGHTNESS_DOWN_VALUE = 220;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_BRIGHTNESS_UP = 221;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_BRIGHTNESS_UP_VALUE = 221;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_AUDIO_TRACK = 222;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MEDIA_AUDIO_TRACK_VALUE = 222;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SLEEP = 223;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SLEEP_VALUE = 223;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_WAKEUP = 224;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_WAKEUP_VALUE = 224;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PAIRING = 225;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_PAIRING_VALUE = 225;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_TOP_MENU = 226;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MEDIA_TOP_MENU_VALUE = 226;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_11 = 227;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_11_VALUE = 227;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_12 = 228;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_12_VALUE = 228;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_LAST_CHANNEL = 229;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_LAST_CHANNEL_VALUE = 229;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_DATA_SERVICE = 230;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_DATA_SERVICE_VALUE = 230;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VOICE_ASSIST = 231;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_VOICE_ASSIST_VALUE = 231;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_RADIO_SERVICE = 232;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_RADIO_SERVICE_VALUE = 232;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_TELETEXT = 233;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_TELETEXT_VALUE = 233;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_NUMBER_ENTRY = 234;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_NUMBER_ENTRY_VALUE = 234;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_TERRESTRIAL_ANALOG = 235;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_TERRESTRIAL_ANALOG_VALUE = 235;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_TERRESTRIAL_DIGITAL = 236;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_TERRESTRIAL_DIGITAL_VALUE = 236;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_SATELLITE = 237;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_SATELLITE_VALUE = 237;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_SATELLITE_BS = 238;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_SATELLITE_BS_VALUE = 238;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_SATELLITE_CS = 239;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_SATELLITE_CS_VALUE = 239;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_SATELLITE_SERVICE = 240;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_SATELLITE_SERVICE_VALUE = 240;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_NETWORK = 241;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_NETWORK_VALUE = 241;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_ANTENNA_CABLE = 242;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_ANTENNA_CABLE_VALUE = 242;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_1 = 243;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_1_VALUE = 243;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_2 = 244;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_2_VALUE = 244;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_3 = 245;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_3_VALUE = 245;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_4 = 246;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_4_VALUE = 246;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPOSITE_1 = 247;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPOSITE_1_VALUE = 247;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPOSITE_2 = 248;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPOSITE_2_VALUE = 248;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPONENT_1 = 249;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPONENT_1_VALUE = 249;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPONENT_2 = 250;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPONENT_2_VALUE = 250;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_INPUT_VGA_1 = 251;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_INPUT_VGA_1_VALUE = 251;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_AUDIO_DESCRIPTION = 252;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_AUDIO_DESCRIPTION_VALUE = 252;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP = 253;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP_VALUE = 253;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN = 254;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN_VALUE = 254;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_ZOOM_MODE = 255;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_ZOOM_MODE_VALUE = 255;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_CONTENTS_MENU = 256;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_CONTENTS_MENU_VALUE = 256;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_MEDIA_CONTEXT_MENU = 257;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_MEDIA_CONTEXT_MENU_VALUE = 257;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_TV_TIMER_PROGRAMMING = 258;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_TV_TIMER_PROGRAMMING_VALUE = 258;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_HELP = 259;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_HELP_VALUE = 259;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NAVIGATE_PREVIOUS = 260;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NAVIGATE_PREVIOUS_VALUE = 260;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NAVIGATE_NEXT = 261;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NAVIGATE_NEXT_VALUE = 261;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NAVIGATE_IN = 262;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NAVIGATE_IN_VALUE = 262;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_NAVIGATE_OUT = 263;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_NAVIGATE_OUT_VALUE = 263;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_STEM_PRIMARY = 264;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_STEM_PRIMARY_VALUE = 264;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_STEM_1 = 265;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_STEM_1_VALUE = 265;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_STEM_2 = 266;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_STEM_2_VALUE = 266;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_STEM_3 = 267;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_STEM_3_VALUE = 267;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DPAD_UP_LEFT = 268;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_DPAD_UP_LEFT_VALUE = 268;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DPAD_DOWN_LEFT = 269;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_DPAD_DOWN_LEFT_VALUE = 269;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DPAD_UP_RIGHT = 270;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_DPAD_UP_RIGHT_VALUE = 270;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DPAD_DOWN_RIGHT = 271;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_DPAD_DOWN_RIGHT_VALUE = 271;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_SKIP_FORWARD = 272;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MEDIA_SKIP_FORWARD_VALUE = 272;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_SKIP_BACKWARD = 273;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MEDIA_SKIP_BACKWARD_VALUE = 273;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_STEP_FORWARD = 274;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MEDIA_STEP_FORWARD_VALUE = 274;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_MEDIA_STEP_BACKWARD = 275;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_MEDIA_STEP_BACKWARD_VALUE = 275;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SOFT_SLEEP = 276;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SOFT_SLEEP_VALUE = 276;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_CUT = 277;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_CUT_VALUE = 277;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_COPY = 278;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_COPY_VALUE = 278;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PASTE = 279;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_PASTE_VALUE = 279;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_UP = 280;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_UP_VALUE = 280;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_DOWN = 281;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_DOWN_VALUE = 281;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_LEFT = 282;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_LEFT_VALUE = 282;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_RIGHT = 283;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_RIGHT_VALUE = 283;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_ALL_APPS = 284;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_ALL_APPS_VALUE = 284;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_REFRESH = 285;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_REFRESH_VALUE = 285;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_THUMBS_UP = 286;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_THUMBS_UP_VALUE = 286;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_THUMBS_DOWN = 287;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_THUMBS_DOWN_VALUE = 287;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_PROFILE_SWITCH = 288;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_PROFILE_SWITCH_VALUE = 288;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VIDEO_APP_1 = 289;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_VIDEO_APP_1_VALUE = 289;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VIDEO_APP_2 = 290;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_VIDEO_APP_2_VALUE = 290;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VIDEO_APP_3 = 291;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_VIDEO_APP_3_VALUE = 291;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VIDEO_APP_4 = 292;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_VIDEO_APP_4_VALUE = 292;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VIDEO_APP_5 = 293;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_VIDEO_APP_5_VALUE = 293;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VIDEO_APP_6 = 294;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_VIDEO_APP_6_VALUE = 294;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VIDEO_APP_7 = 295;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_VIDEO_APP_7_VALUE = 295;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_VIDEO_APP_8 = 296;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_VIDEO_APP_8_VALUE = 296;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_FEATURED_APP_1 = 297;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_FEATURED_APP_1_VALUE = 297;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_FEATURED_APP_2 = 298;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_FEATURED_APP_2_VALUE = 298;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_FEATURED_APP_3 = 299;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_FEATURED_APP_3_VALUE = 299;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_FEATURED_APP_4 = 300;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_FEATURED_APP_4_VALUE = 300;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DEMO_APP_1 = 301;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_DEMO_APP_1_VALUE = 301;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DEMO_APP_2 = 302;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_DEMO_APP_2_VALUE = 302;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DEMO_APP_3 = 303;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_DEMO_APP_3_VALUE = 303;
    /**
     * <code>DEVICE_CONTROL_KEYCODE_DEMO_APP_4 = 304;</code>
     */
    public static final int DEVICE_CONTROL_KEYCODE_DEMO_APP_4_VALUE = 304;


    @java.lang.Override
    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DeviceControlKeycode valueOf(int value) {
      return forNumber(value);
    }

    public static DeviceControlKeycode forNumber(int value) {
      switch (value) {
        case 0: return DEVICE_CONTROL_KEYCODE_UNSPECIFIED;
        case 1: return DEVICE_CONTROL_KEYCODE_SOFT_LEFT;
        case 2: return DEVICE_CONTROL_KEYCODE_SOFT_RIGHT;
        case 3: return DEVICE_CONTROL_KEYCODE_HOME;
        case 4: return DEVICE_CONTROL_KEYCODE_BACK;
        case 5: return DEVICE_CONTROL_KEYCODE_CALL;
        case 6: return DEVICE_CONTROL_KEYCODE_ENDCALL;
        case 7: return DEVICE_CONTROL_KEYCODE_0;
        case 8: return DEVICE_CONTROL_KEYCODE_1;
        case 9: return DEVICE_CONTROL_KEYCODE_2;
        case 10: return DEVICE_CONTROL_KEYCODE_3;
        case 11: return DEVICE_CONTROL_KEYCODE_4;
        case 12: return DEVICE_CONTROL_KEYCODE_5;
        case 13: return DEVICE_CONTROL_KEYCODE_6;
        case 14: return DEVICE_CONTROL_KEYCODE_7;
        case 15: return DEVICE_CONTROL_KEYCODE_8;
        case 16: return DEVICE_CONTROL_KEYCODE_9;
        case 17: return DEVICE_CONTROL_KEYCODE_STAR;
        case 18: return DEVICE_CONTROL_KEYCODE_POUND;
        case 19: return DEVICE_CONTROL_KEYCODE_DPAD_UP;
        case 20: return DEVICE_CONTROL_KEYCODE_DPAD_DOWN;
        case 21: return DEVICE_CONTROL_KEYCODE_DPAD_LEFT;
        case 22: return DEVICE_CONTROL_KEYCODE_DPAD_RIGHT;
        case 23: return DEVICE_CONTROL_KEYCODE_DPAD_CENTER;
        case 24: return DEVICE_CONTROL_KEYCODE_VOLUME_UP;
        case 25: return DEVICE_CONTROL_KEYCODE_VOLUME_DOWN;
        case 26: return DEVICE_CONTROL_KEYCODE_POWER;
        case 27: return DEVICE_CONTROL_KEYCODE_CAMERA;
        case 28: return DEVICE_CONTROL_KEYCODE_CLEAR;
        case 29: return DEVICE_CONTROL_KEYCODE_A;
        case 30: return DEVICE_CONTROL_KEYCODE_B;
        case 31: return DEVICE_CONTROL_KEYCODE_C;
        case 32: return DEVICE_CONTROL_KEYCODE_D;
        case 33: return DEVICE_CONTROL_KEYCODE_E;
        case 34: return DEVICE_CONTROL_KEYCODE_F;
        case 35: return DEVICE_CONTROL_KEYCODE_G;
        case 36: return DEVICE_CONTROL_KEYCODE_H;
        case 37: return DEVICE_CONTROL_KEYCODE_I;
        case 38: return DEVICE_CONTROL_KEYCODE_J;
        case 39: return DEVICE_CONTROL_KEYCODE_K;
        case 40: return DEVICE_CONTROL_KEYCODE_L;
        case 41: return DEVICE_CONTROL_KEYCODE_M;
        case 42: return DEVICE_CONTROL_KEYCODE_N;
        case 43: return DEVICE_CONTROL_KEYCODE_O;
        case 44: return DEVICE_CONTROL_KEYCODE_P;
        case 45: return DEVICE_CONTROL_KEYCODE_Q;
        case 46: return DEVICE_CONTROL_KEYCODE_R;
        case 47: return DEVICE_CONTROL_KEYCODE_S;
        case 48: return DEVICE_CONTROL_KEYCODE_T;
        case 49: return DEVICE_CONTROL_KEYCODE_U;
        case 50: return DEVICE_CONTROL_KEYCODE_V;
        case 51: return DEVICE_CONTROL_KEYCODE_W;
        case 52: return DEVICE_CONTROL_KEYCODE_X;
        case 53: return DEVICE_CONTROL_KEYCODE_Y;
        case 54: return DEVICE_CONTROL_KEYCODE_Z;
        case 55: return DEVICE_CONTROL_KEYCODE_COMMA;
        case 56: return DEVICE_CONTROL_KEYCODE_PERIOD;
        case 57: return DEVICE_CONTROL_KEYCODE_ALT_LEFT;
        case 58: return DEVICE_CONTROL_KEYCODE_ALT_RIGHT;
        case 59: return DEVICE_CONTROL_KEYCODE_SHIFT_LEFT;
        case 60: return DEVICE_CONTROL_KEYCODE_SHIFT_RIGHT;
        case 61: return DEVICE_CONTROL_KEYCODE_TAB;
        case 62: return DEVICE_CONTROL_KEYCODE_SPACE;
        case 63: return DEVICE_CONTROL_KEYCODE_SYM;
        case 64: return DEVICE_CONTROL_KEYCODE_EXPLORER;
        case 65: return DEVICE_CONTROL_KEYCODE_ENVELOPE;
        case 66: return DEVICE_CONTROL_KEYCODE_ENTER;
        case 67: return DEVICE_CONTROL_KEYCODE_DEL;
        case 68: return DEVICE_CONTROL_KEYCODE_GRAVE;
        case 69: return DEVICE_CONTROL_KEYCODE_MINUS;
        case 70: return DEVICE_CONTROL_KEYCODE_EQUALS;
        case 71: return DEVICE_CONTROL_KEYCODE_LEFT_BRACKET;
        case 72: return DEVICE_CONTROL_KEYCODE_RIGHT_BRACKET;
        case 73: return DEVICE_CONTROL_KEYCODE_BACKSLASH;
        case 74: return DEVICE_CONTROL_KEYCODE_SEMICOLON;
        case 75: return DEVICE_CONTROL_KEYCODE_APOSTROPHE;
        case 76: return DEVICE_CONTROL_KEYCODE_SLASH;
        case 77: return DEVICE_CONTROL_KEYCODE_AT;
        case 78: return DEVICE_CONTROL_KEYCODE_NUM;
        case 79: return DEVICE_CONTROL_KEYCODE_HEADSETHOOK;
        case 80: return DEVICE_CONTROL_KEYCODE_FOCUS;
        case 81: return DEVICE_CONTROL_KEYCODE_PLUS;
        case 82: return DEVICE_CONTROL_KEYCODE_MENU;
        case 83: return DEVICE_CONTROL_KEYCODE_NOTIFICATION;
        case 84: return DEVICE_CONTROL_KEYCODE_SEARCH;
        case 85: return DEVICE_CONTROL_KEYCODE_MEDIA_PLAY_PAUSE;
        case 86: return DEVICE_CONTROL_KEYCODE_MEDIA_STOP;
        case 87: return DEVICE_CONTROL_KEYCODE_MEDIA_NEXT;
        case 88: return DEVICE_CONTROL_KEYCODE_MEDIA_PREVIOUS;
        case 89: return DEVICE_CONTROL_KEYCODE_MEDIA_REWIND;
        case 90: return DEVICE_CONTROL_KEYCODE_MEDIA_FAST_FORWARD;
        case 91: return DEVICE_CONTROL_KEYCODE_MUTE;
        case 92: return DEVICE_CONTROL_KEYCODE_PAGE_UP;
        case 93: return DEVICE_CONTROL_KEYCODE_PAGE_DOWN;
        case 94: return DEVICE_CONTROL_KEYCODE_PICTSYMBOLS;
        case 95: return DEVICE_CONTROL_KEYCODE_SWITCH_CHARSET;
        case 96: return DEVICE_CONTROL_KEYCODE_BUTTON_A;
        case 97: return DEVICE_CONTROL_KEYCODE_BUTTON_B;
        case 98: return DEVICE_CONTROL_KEYCODE_BUTTON_C;
        case 99: return DEVICE_CONTROL_KEYCODE_BUTTON_X;
        case 100: return DEVICE_CONTROL_KEYCODE_BUTTON_Y;
        case 101: return DEVICE_CONTROL_KEYCODE_BUTTON_Z;
        case 102: return DEVICE_CONTROL_KEYCODE_BUTTON_L1;
        case 103: return DEVICE_CONTROL_KEYCODE_BUTTON_R1;
        case 104: return DEVICE_CONTROL_KEYCODE_BUTTON_L2;
        case 105: return DEVICE_CONTROL_KEYCODE_BUTTON_R2;
        case 106: return DEVICE_CONTROL_KEYCODE_BUTTON_THUMBL;
        case 107: return DEVICE_CONTROL_KEYCODE_BUTTON_THUMBR;
        case 108: return DEVICE_CONTROL_KEYCODE_BUTTON_START;
        case 109: return DEVICE_CONTROL_KEYCODE_BUTTON_SELECT;
        case 110: return DEVICE_CONTROL_KEYCODE_BUTTON_MODE;
        case 111: return DEVICE_CONTROL_KEYCODE_ESCAPE;
        case 112: return DEVICE_CONTROL_KEYCODE_FORWARD_DEL;
        case 113: return DEVICE_CONTROL_KEYCODE_CTRL_LEFT;
        case 114: return DEVICE_CONTROL_KEYCODE_CTRL_RIGHT;
        case 115: return DEVICE_CONTROL_KEYCODE_CAPS_LOCK;
        case 116: return DEVICE_CONTROL_KEYCODE_SCROLL_LOCK;
        case 117: return DEVICE_CONTROL_KEYCODE_META_LEFT;
        case 118: return DEVICE_CONTROL_KEYCODE_META_RIGHT;
        case 119: return DEVICE_CONTROL_KEYCODE_FUNCTION;
        case 120: return DEVICE_CONTROL_KEYCODE_SYSRQ;
        case 121: return DEVICE_CONTROL_KEYCODE_BREAK;
        case 122: return DEVICE_CONTROL_KEYCODE_MOVE_HOME;
        case 123: return DEVICE_CONTROL_KEYCODE_MOVE_END;
        case 124: return DEVICE_CONTROL_KEYCODE_INSERT;
        case 125: return DEVICE_CONTROL_KEYCODE_FORWARD;
        case 126: return DEVICE_CONTROL_KEYCODE_MEDIA_PLAY;
        case 127: return DEVICE_CONTROL_KEYCODE_MEDIA_PAUSE;
        case 128: return DEVICE_CONTROL_KEYCODE_MEDIA_CLOSE;
        case 129: return DEVICE_CONTROL_KEYCODE_MEDIA_EJECT;
        case 130: return DEVICE_CONTROL_KEYCODE_MEDIA_RECORD;
        case 131: return DEVICE_CONTROL_KEYCODE_F1;
        case 132: return DEVICE_CONTROL_KEYCODE_F2;
        case 133: return DEVICE_CONTROL_KEYCODE_F3;
        case 134: return DEVICE_CONTROL_KEYCODE_F4;
        case 135: return DEVICE_CONTROL_KEYCODE_F5;
        case 136: return DEVICE_CONTROL_KEYCODE_F6;
        case 137: return DEVICE_CONTROL_KEYCODE_F7;
        case 138: return DEVICE_CONTROL_KEYCODE_F8;
        case 139: return DEVICE_CONTROL_KEYCODE_F9;
        case 140: return DEVICE_CONTROL_KEYCODE_F10;
        case 141: return DEVICE_CONTROL_KEYCODE_F11;
        case 142: return DEVICE_CONTROL_KEYCODE_F12;
        case 143: return DEVICE_CONTROL_KEYCODE_NUM_LOCK;
        case 144: return DEVICE_CONTROL_KEYCODE_NUMPAD_0;
        case 145: return DEVICE_CONTROL_KEYCODE_NUMPAD_1;
        case 146: return DEVICE_CONTROL_KEYCODE_NUMPAD_2;
        case 147: return DEVICE_CONTROL_KEYCODE_NUMPAD_3;
        case 148: return DEVICE_CONTROL_KEYCODE_NUMPAD_4;
        case 149: return DEVICE_CONTROL_KEYCODE_NUMPAD_5;
        case 150: return DEVICE_CONTROL_KEYCODE_NUMPAD_6;
        case 151: return DEVICE_CONTROL_KEYCODE_NUMPAD_7;
        case 152: return DEVICE_CONTROL_KEYCODE_NUMPAD_8;
        case 153: return DEVICE_CONTROL_KEYCODE_NUMPAD_9;
        case 154: return DEVICE_CONTROL_KEYCODE_NUMPAD_DIVIDE;
        case 155: return DEVICE_CONTROL_KEYCODE_NUMPAD_MULTIPLY;
        case 156: return DEVICE_CONTROL_KEYCODE_NUMPAD_SUBTRACT;
        case 157: return DEVICE_CONTROL_KEYCODE_NUMPAD_ADD;
        case 158: return DEVICE_CONTROL_KEYCODE_NUMPAD_DOT;
        case 159: return DEVICE_CONTROL_KEYCODE_NUMPAD_COMMA;
        case 160: return DEVICE_CONTROL_KEYCODE_NUMPAD_ENTER;
        case 161: return DEVICE_CONTROL_KEYCODE_NUMPAD_EQUALS;
        case 162: return DEVICE_CONTROL_KEYCODE_NUMPAD_LEFT_PAREN;
        case 163: return DEVICE_CONTROL_KEYCODE_NUMPAD_RIGHT_PAREN;
        case 164: return DEVICE_CONTROL_KEYCODE_VOLUME_MUTE;
        case 165: return DEVICE_CONTROL_KEYCODE_INFO;
        case 166: return DEVICE_CONTROL_KEYCODE_CHANNEL_UP;
        case 167: return DEVICE_CONTROL_KEYCODE_CHANNEL_DOWN;
        case 168: return DEVICE_CONTROL_KEYCODE_ZOOM_IN;
        case 169: return DEVICE_CONTROL_KEYCODE_ZOOM_OUT;
        case 170: return DEVICE_CONTROL_KEYCODE_TV;
        case 171: return DEVICE_CONTROL_KEYCODE_WINDOW;
        case 172: return DEVICE_CONTROL_KEYCODE_GUIDE;
        case 173: return DEVICE_CONTROL_KEYCODE_DVR;
        case 174: return DEVICE_CONTROL_KEYCODE_BOOKMARK;
        case 175: return DEVICE_CONTROL_KEYCODE_CAPTIONS;
        case 176: return DEVICE_CONTROL_KEYCODE_SETTINGS;
        case 177: return DEVICE_CONTROL_KEYCODE_TV_POWER;
        case 178: return DEVICE_CONTROL_KEYCODE_TV_INPUT;
        case 179: return DEVICE_CONTROL_KEYCODE_STB_POWER;
        case 180: return DEVICE_CONTROL_KEYCODE_STB_INPUT;
        case 181: return DEVICE_CONTROL_KEYCODE_AVR_POWER;
        case 182: return DEVICE_CONTROL_KEYCODE_AVR_INPUT;
        case 183: return DEVICE_CONTROL_KEYCODE_PROG_RED;
        case 184: return DEVICE_CONTROL_KEYCODE_PROG_GREEN;
        case 185: return DEVICE_CONTROL_KEYCODE_PROG_YELLOW;
        case 186: return DEVICE_CONTROL_KEYCODE_PROG_BLUE;
        case 187: return DEVICE_CONTROL_KEYCODE_APP_SWITCH;
        case 188: return DEVICE_CONTROL_KEYCODE_BUTTON_1;
        case 189: return DEVICE_CONTROL_KEYCODE_BUTTON_2;
        case 190: return DEVICE_CONTROL_KEYCODE_BUTTON_3;
        case 191: return DEVICE_CONTROL_KEYCODE_BUTTON_4;
        case 192: return DEVICE_CONTROL_KEYCODE_BUTTON_5;
        case 193: return DEVICE_CONTROL_KEYCODE_BUTTON_6;
        case 194: return DEVICE_CONTROL_KEYCODE_BUTTON_7;
        case 195: return DEVICE_CONTROL_KEYCODE_BUTTON_8;
        case 196: return DEVICE_CONTROL_KEYCODE_BUTTON_9;
        case 197: return DEVICE_CONTROL_KEYCODE_BUTTON_10;
        case 198: return DEVICE_CONTROL_KEYCODE_BUTTON_11;
        case 199: return DEVICE_CONTROL_KEYCODE_BUTTON_12;
        case 200: return DEVICE_CONTROL_KEYCODE_BUTTON_13;
        case 201: return DEVICE_CONTROL_KEYCODE_BUTTON_14;
        case 202: return DEVICE_CONTROL_KEYCODE_BUTTON_15;
        case 203: return DEVICE_CONTROL_KEYCODE_BUTTON_16;
        case 204: return DEVICE_CONTROL_KEYCODE_LANGUAGE_SWITCH;
        case 205: return DEVICE_CONTROL_KEYCODE_MANNER_MODE;
        case 206: return DEVICE_CONTROL_KEYCODE_3D_MODE;
        case 207: return DEVICE_CONTROL_KEYCODE_CONTACTS;
        case 208: return DEVICE_CONTROL_KEYCODE_CALENDAR;
        case 209: return DEVICE_CONTROL_KEYCODE_MUSIC;
        case 210: return DEVICE_CONTROL_KEYCODE_CALCULATOR;
        case 211: return DEVICE_CONTROL_KEYCODE_ZENKAKU_HANKAKU;
        case 212: return DEVICE_CONTROL_KEYCODE_EISU;
        case 213: return DEVICE_CONTROL_KEYCODE_MUHENKAN;
        case 214: return DEVICE_CONTROL_KEYCODE_HENKAN;
        case 215: return DEVICE_CONTROL_KEYCODE_KATAKANA_HIRAGANA;
        case 216: return DEVICE_CONTROL_KEYCODE_YEN;
        case 217: return DEVICE_CONTROL_KEYCODE_RO;
        case 218: return DEVICE_CONTROL_KEYCODE_KANA;
        case 219: return DEVICE_CONTROL_KEYCODE_ASSIST;
        case 220: return DEVICE_CONTROL_KEYCODE_BRIGHTNESS_DOWN;
        case 221: return DEVICE_CONTROL_KEYCODE_BRIGHTNESS_UP;
        case 222: return DEVICE_CONTROL_KEYCODE_MEDIA_AUDIO_TRACK;
        case 223: return DEVICE_CONTROL_KEYCODE_SLEEP;
        case 224: return DEVICE_CONTROL_KEYCODE_WAKEUP;
        case 225: return DEVICE_CONTROL_KEYCODE_PAIRING;
        case 226: return DEVICE_CONTROL_KEYCODE_MEDIA_TOP_MENU;
        case 227: return DEVICE_CONTROL_KEYCODE_11;
        case 228: return DEVICE_CONTROL_KEYCODE_12;
        case 229: return DEVICE_CONTROL_KEYCODE_LAST_CHANNEL;
        case 230: return DEVICE_CONTROL_KEYCODE_TV_DATA_SERVICE;
        case 231: return DEVICE_CONTROL_KEYCODE_VOICE_ASSIST;
        case 232: return DEVICE_CONTROL_KEYCODE_TV_RADIO_SERVICE;
        case 233: return DEVICE_CONTROL_KEYCODE_TV_TELETEXT;
        case 234: return DEVICE_CONTROL_KEYCODE_TV_NUMBER_ENTRY;
        case 235: return DEVICE_CONTROL_KEYCODE_TV_TERRESTRIAL_ANALOG;
        case 236: return DEVICE_CONTROL_KEYCODE_TV_TERRESTRIAL_DIGITAL;
        case 237: return DEVICE_CONTROL_KEYCODE_TV_SATELLITE;
        case 238: return DEVICE_CONTROL_KEYCODE_TV_SATELLITE_BS;
        case 239: return DEVICE_CONTROL_KEYCODE_TV_SATELLITE_CS;
        case 240: return DEVICE_CONTROL_KEYCODE_TV_SATELLITE_SERVICE;
        case 241: return DEVICE_CONTROL_KEYCODE_TV_NETWORK;
        case 242: return DEVICE_CONTROL_KEYCODE_TV_ANTENNA_CABLE;
        case 243: return DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_1;
        case 244: return DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_2;
        case 245: return DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_3;
        case 246: return DEVICE_CONTROL_KEYCODE_TV_INPUT_HDMI_4;
        case 247: return DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPOSITE_1;
        case 248: return DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPOSITE_2;
        case 249: return DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPONENT_1;
        case 250: return DEVICE_CONTROL_KEYCODE_TV_INPUT_COMPONENT_2;
        case 251: return DEVICE_CONTROL_KEYCODE_TV_INPUT_VGA_1;
        case 252: return DEVICE_CONTROL_KEYCODE_TV_AUDIO_DESCRIPTION;
        case 253: return DEVICE_CONTROL_KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP;
        case 254: return DEVICE_CONTROL_KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN;
        case 255: return DEVICE_CONTROL_KEYCODE_TV_ZOOM_MODE;
        case 256: return DEVICE_CONTROL_KEYCODE_TV_CONTENTS_MENU;
        case 257: return DEVICE_CONTROL_KEYCODE_TV_MEDIA_CONTEXT_MENU;
        case 258: return DEVICE_CONTROL_KEYCODE_TV_TIMER_PROGRAMMING;
        case 259: return DEVICE_CONTROL_KEYCODE_HELP;
        case 260: return DEVICE_CONTROL_KEYCODE_NAVIGATE_PREVIOUS;
        case 261: return DEVICE_CONTROL_KEYCODE_NAVIGATE_NEXT;
        case 262: return DEVICE_CONTROL_KEYCODE_NAVIGATE_IN;
        case 263: return DEVICE_CONTROL_KEYCODE_NAVIGATE_OUT;
        case 264: return DEVICE_CONTROL_KEYCODE_STEM_PRIMARY;
        case 265: return DEVICE_CONTROL_KEYCODE_STEM_1;
        case 266: return DEVICE_CONTROL_KEYCODE_STEM_2;
        case 267: return DEVICE_CONTROL_KEYCODE_STEM_3;
        case 268: return DEVICE_CONTROL_KEYCODE_DPAD_UP_LEFT;
        case 269: return DEVICE_CONTROL_KEYCODE_DPAD_DOWN_LEFT;
        case 270: return DEVICE_CONTROL_KEYCODE_DPAD_UP_RIGHT;
        case 271: return DEVICE_CONTROL_KEYCODE_DPAD_DOWN_RIGHT;
        case 272: return DEVICE_CONTROL_KEYCODE_MEDIA_SKIP_FORWARD;
        case 273: return DEVICE_CONTROL_KEYCODE_MEDIA_SKIP_BACKWARD;
        case 274: return DEVICE_CONTROL_KEYCODE_MEDIA_STEP_FORWARD;
        case 275: return DEVICE_CONTROL_KEYCODE_MEDIA_STEP_BACKWARD;
        case 276: return DEVICE_CONTROL_KEYCODE_SOFT_SLEEP;
        case 277: return DEVICE_CONTROL_KEYCODE_CUT;
        case 278: return DEVICE_CONTROL_KEYCODE_COPY;
        case 279: return DEVICE_CONTROL_KEYCODE_PASTE;
        case 280: return DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_UP;
        case 281: return DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_DOWN;
        case 282: return DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_LEFT;
        case 283: return DEVICE_CONTROL_KEYCODE_SYSTEM_NAVIGATION_RIGHT;
        case 284: return DEVICE_CONTROL_KEYCODE_ALL_APPS;
        case 285: return DEVICE_CONTROL_KEYCODE_REFRESH;
        case 286: return DEVICE_CONTROL_KEYCODE_THUMBS_UP;
        case 287: return DEVICE_CONTROL_KEYCODE_THUMBS_DOWN;
        case 288: return DEVICE_CONTROL_KEYCODE_PROFILE_SWITCH;
        case 289: return DEVICE_CONTROL_KEYCODE_VIDEO_APP_1;
        case 290: return DEVICE_CONTROL_KEYCODE_VIDEO_APP_2;
        case 291: return DEVICE_CONTROL_KEYCODE_VIDEO_APP_3;
        case 292: return DEVICE_CONTROL_KEYCODE_VIDEO_APP_4;
        case 293: return DEVICE_CONTROL_KEYCODE_VIDEO_APP_5;
        case 294: return DEVICE_CONTROL_KEYCODE_VIDEO_APP_6;
        case 295: return DEVICE_CONTROL_KEYCODE_VIDEO_APP_7;
        case 296: return DEVICE_CONTROL_KEYCODE_VIDEO_APP_8;
        case 297: return DEVICE_CONTROL_KEYCODE_FEATURED_APP_1;
        case 298: return DEVICE_CONTROL_KEYCODE_FEATURED_APP_2;
        case 299: return DEVICE_CONTROL_KEYCODE_FEATURED_APP_3;
        case 300: return DEVICE_CONTROL_KEYCODE_FEATURED_APP_4;
        case 301: return DEVICE_CONTROL_KEYCODE_DEMO_APP_1;
        case 302: return DEVICE_CONTROL_KEYCODE_DEMO_APP_2;
        case 303: return DEVICE_CONTROL_KEYCODE_DEMO_APP_3;
        case 304: return DEVICE_CONTROL_KEYCODE_DEMO_APP_4;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DeviceControlKeycode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DeviceControlKeycode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DeviceControlKeycode>() {
            @java.lang.Override
            public DeviceControlKeycode findValueByNumber(int number) {
              return DeviceControlKeycode.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return DeviceControlKeycodeVerifier.INSTANCE;
    }

    private static final class DeviceControlKeycodeVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new DeviceControlKeycodeVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return DeviceControlKeycode.forNumber(number) != null;
            }
          };

    private final int value;

    private DeviceControlKeycode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:inner.types.DeviceControlKeycode)
  }

  /**
   * Protobuf enum {@code inner.types.DeviceControlButton}
   */
  public enum DeviceControlButton
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/MotionEvent.java
     * https://developer.android.com/reference/android/view/MotionEvent
     * </pre>
     *
     * <code>DEVICE_CONTROL_BUTTON_UNSPECIFIED = 0;</code>
     */
    DEVICE_CONTROL_BUTTON_UNSPECIFIED(0),
    /**
     * <pre>
     * left mouse
     * </pre>
     *
     * <code>DEVICE_CONTROL_BUTTON_PRIMARY = 1;</code>
     */
    DEVICE_CONTROL_BUTTON_PRIMARY(1),
    /**
     * <pre>
     * right mouse
     * </pre>
     *
     * <code>DEVICE_CONTROL_BUTTON_SECONDARY = 2;</code>
     */
    DEVICE_CONTROL_BUTTON_SECONDARY(2),
    /**
     * <pre>
     * middle mouse
     * </pre>
     *
     * <code>DEVICE_CONTROL_BUTTON_TERTIARY = 4;</code>
     */
    DEVICE_CONTROL_BUTTON_TERTIARY(4),
    /**
     * <code>DEVICE_CONTROL_BUTTON_BACK = 8;</code>
     */
    DEVICE_CONTROL_BUTTON_BACK(8),
    /**
     * <code>DEVICE_CONTROL_BUTTON_FORWARD = 16;</code>
     */
    DEVICE_CONTROL_BUTTON_FORWARD(16),
    /**
     * <code>DEVICE_CONTROL_BUTTON_STYLUS_PRIMARY = 32;</code>
     */
    DEVICE_CONTROL_BUTTON_STYLUS_PRIMARY(32),
    /**
     * <code>DEVICE_CONTROL_BUTTON_STYLUS_SECONDARY = 64;</code>
     */
    DEVICE_CONTROL_BUTTON_STYLUS_SECONDARY(64),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/MotionEvent.java
     * https://developer.android.com/reference/android/view/MotionEvent
     * </pre>
     *
     * <code>DEVICE_CONTROL_BUTTON_UNSPECIFIED = 0;</code>
     */
    public static final int DEVICE_CONTROL_BUTTON_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * left mouse
     * </pre>
     *
     * <code>DEVICE_CONTROL_BUTTON_PRIMARY = 1;</code>
     */
    public static final int DEVICE_CONTROL_BUTTON_PRIMARY_VALUE = 1;
    /**
     * <pre>
     * right mouse
     * </pre>
     *
     * <code>DEVICE_CONTROL_BUTTON_SECONDARY = 2;</code>
     */
    public static final int DEVICE_CONTROL_BUTTON_SECONDARY_VALUE = 2;
    /**
     * <pre>
     * middle mouse
     * </pre>
     *
     * <code>DEVICE_CONTROL_BUTTON_TERTIARY = 4;</code>
     */
    public static final int DEVICE_CONTROL_BUTTON_TERTIARY_VALUE = 4;
    /**
     * <code>DEVICE_CONTROL_BUTTON_BACK = 8;</code>
     */
    public static final int DEVICE_CONTROL_BUTTON_BACK_VALUE = 8;
    /**
     * <code>DEVICE_CONTROL_BUTTON_FORWARD = 16;</code>
     */
    public static final int DEVICE_CONTROL_BUTTON_FORWARD_VALUE = 16;
    /**
     * <code>DEVICE_CONTROL_BUTTON_STYLUS_PRIMARY = 32;</code>
     */
    public static final int DEVICE_CONTROL_BUTTON_STYLUS_PRIMARY_VALUE = 32;
    /**
     * <code>DEVICE_CONTROL_BUTTON_STYLUS_SECONDARY = 64;</code>
     */
    public static final int DEVICE_CONTROL_BUTTON_STYLUS_SECONDARY_VALUE = 64;


    @java.lang.Override
    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DeviceControlButton valueOf(int value) {
      return forNumber(value);
    }

    public static DeviceControlButton forNumber(int value) {
      switch (value) {
        case 0: return DEVICE_CONTROL_BUTTON_UNSPECIFIED;
        case 1: return DEVICE_CONTROL_BUTTON_PRIMARY;
        case 2: return DEVICE_CONTROL_BUTTON_SECONDARY;
        case 4: return DEVICE_CONTROL_BUTTON_TERTIARY;
        case 8: return DEVICE_CONTROL_BUTTON_BACK;
        case 16: return DEVICE_CONTROL_BUTTON_FORWARD;
        case 32: return DEVICE_CONTROL_BUTTON_STYLUS_PRIMARY;
        case 64: return DEVICE_CONTROL_BUTTON_STYLUS_SECONDARY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DeviceControlButton>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DeviceControlButton> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DeviceControlButton>() {
            @java.lang.Override
            public DeviceControlButton findValueByNumber(int number) {
              return DeviceControlButton.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return DeviceControlButtonVerifier.INSTANCE;
    }

    private static final class DeviceControlButtonVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new DeviceControlButtonVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return DeviceControlButton.forNumber(number) != null;
            }
          };

    private final int value;

    private DeviceControlButton(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:inner.types.DeviceControlButton)
  }

  /**
   * Protobuf enum {@code inner.types.DeviceControlCopyKey}
   */
  public enum DeviceControlCopyKey
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>DEVICE_CONTROL_COPY_KEY_UNSPECIFIED = 0;</code>
     */
    DEVICE_CONTROL_COPY_KEY_UNSPECIFIED(0),
    /**
     * <code>DEVICE_CONTROL_COPY_KEY_COPY = 1;</code>
     */
    DEVICE_CONTROL_COPY_KEY_COPY(1),
    /**
     * <code>DEVICE_CONTROL_COPY_KEY_CUT = 2;</code>
     */
    DEVICE_CONTROL_COPY_KEY_CUT(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>DEVICE_CONTROL_COPY_KEY_UNSPECIFIED = 0;</code>
     */
    public static final int DEVICE_CONTROL_COPY_KEY_UNSPECIFIED_VALUE = 0;
    /**
     * <code>DEVICE_CONTROL_COPY_KEY_COPY = 1;</code>
     */
    public static final int DEVICE_CONTROL_COPY_KEY_COPY_VALUE = 1;
    /**
     * <code>DEVICE_CONTROL_COPY_KEY_CUT = 2;</code>
     */
    public static final int DEVICE_CONTROL_COPY_KEY_CUT_VALUE = 2;


    @java.lang.Override
    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DeviceControlCopyKey valueOf(int value) {
      return forNumber(value);
    }

    public static DeviceControlCopyKey forNumber(int value) {
      switch (value) {
        case 0: return DEVICE_CONTROL_COPY_KEY_UNSPECIFIED;
        case 1: return DEVICE_CONTROL_COPY_KEY_COPY;
        case 2: return DEVICE_CONTROL_COPY_KEY_CUT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DeviceControlCopyKey>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DeviceControlCopyKey> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DeviceControlCopyKey>() {
            @java.lang.Override
            public DeviceControlCopyKey findValueByNumber(int number) {
              return DeviceControlCopyKey.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return DeviceControlCopyKeyVerifier.INSTANCE;
    }

    private static final class DeviceControlCopyKeyVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new DeviceControlCopyKeyVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return DeviceControlCopyKey.forNumber(number) != null;
            }
          };

    private final int value;

    private DeviceControlCopyKey(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:inner.types.DeviceControlCopyKey)
  }

  /**
   * Protobuf enum {@code inner.types.DeviceControlSequece}
   */
  public enum DeviceControlSequece
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>DEVICE_CONTROL_SEQUECE_UNSPECIFIED = 0;</code>
     */
    DEVICE_CONTROL_SEQUECE_UNSPECIFIED(0),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>DEVICE_CONTROL_SEQUECE_UNSPECIFIED = 0;</code>
     */
    public static final int DEVICE_CONTROL_SEQUECE_UNSPECIFIED_VALUE = 0;


    @java.lang.Override
    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DeviceControlSequece valueOf(int value) {
      return forNumber(value);
    }

    public static DeviceControlSequece forNumber(int value) {
      switch (value) {
        case 0: return DEVICE_CONTROL_SEQUECE_UNSPECIFIED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DeviceControlSequece>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DeviceControlSequece> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DeviceControlSequece>() {
            @java.lang.Override
            public DeviceControlSequece findValueByNumber(int number) {
              return DeviceControlSequece.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return DeviceControlSequeceVerifier.INSTANCE;
    }

    private static final class DeviceControlSequeceVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new DeviceControlSequeceVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return DeviceControlSequece.forNumber(number) != null;
            }
          };

    private final int value;

    private DeviceControlSequece(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:inner.types.DeviceControlSequece)
  }

  public interface DevicePositionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:inner.types.DevicePosition)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>sfixed32 x = 1;</code>
     * @return The x.
     */
    int getX();

    /**
     * <code>sfixed32 y = 2;</code>
     * @return The y.
     */
    int getY();

    /**
     * <code>fixed32 screen_width = 3;</code>
     * @return The screenWidth.
     */
    int getScreenWidth();

    /**
     * <code>fixed32 screen_height = 4;</code>
     * @return The screenHeight.
     */
    int getScreenHeight();
  }
  /**
   * Protobuf type {@code inner.types.DevicePosition}
   */
  public  static final class DevicePosition extends
      com.google.protobuf.GeneratedMessageLite<
          DevicePosition, DevicePosition.Builder> implements
      // @@protoc_insertion_point(message_implements:inner.types.DevicePosition)
      DevicePositionOrBuilder {
    private DevicePosition() {
    }
    public static final int X_FIELD_NUMBER = 1;
    private int x_;
    /**
     * <code>sfixed32 x = 1;</code>
     * @return The x.
     */
    @java.lang.Override
    public int getX() {
      return x_;
    }
    /**
     * <code>sfixed32 x = 1;</code>
     * @param value The x to set.
     */
    private void setX(int value) {
      
      x_ = value;
    }
    /**
     * <code>sfixed32 x = 1;</code>
     */
    private void clearX() {
      
      x_ = 0;
    }

    public static final int Y_FIELD_NUMBER = 2;
    private int y_;
    /**
     * <code>sfixed32 y = 2;</code>
     * @return The y.
     */
    @java.lang.Override
    public int getY() {
      return y_;
    }
    /**
     * <code>sfixed32 y = 2;</code>
     * @param value The y to set.
     */
    private void setY(int value) {
      
      y_ = value;
    }
    /**
     * <code>sfixed32 y = 2;</code>
     */
    private void clearY() {
      
      y_ = 0;
    }

    public static final int SCREEN_WIDTH_FIELD_NUMBER = 3;
    private int screenWidth_;
    /**
     * <code>fixed32 screen_width = 3;</code>
     * @return The screenWidth.
     */
    @java.lang.Override
    public int getScreenWidth() {
      return screenWidth_;
    }
    /**
     * <code>fixed32 screen_width = 3;</code>
     * @param value The screenWidth to set.
     */
    private void setScreenWidth(int value) {
      
      screenWidth_ = value;
    }
    /**
     * <code>fixed32 screen_width = 3;</code>
     */
    private void clearScreenWidth() {
      
      screenWidth_ = 0;
    }

    public static final int SCREEN_HEIGHT_FIELD_NUMBER = 4;
    private int screenHeight_;
    /**
     * <code>fixed32 screen_height = 4;</code>
     * @return The screenHeight.
     */
    @java.lang.Override
    public int getScreenHeight() {
      return screenHeight_;
    }
    /**
     * <code>fixed32 screen_height = 4;</code>
     * @param value The screenHeight to set.
     */
    private void setScreenHeight(int value) {
      
      screenHeight_ = value;
    }
    /**
     * <code>fixed32 screen_height = 4;</code>
     */
    private void clearScreenHeight() {
      
      screenHeight_ = 0;
    }

    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code inner.types.DevicePosition}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition, Builder> implements
        // @@protoc_insertion_point(builder_implements:inner.types.DevicePosition)
        com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePositionOrBuilder {
      // Construct using com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>sfixed32 x = 1;</code>
       * @return The x.
       */
      @java.lang.Override
      public int getX() {
        return instance.getX();
      }
      /**
       * <code>sfixed32 x = 1;</code>
       * @param value The x to set.
       * @return This builder for chaining.
       */
      public Builder setX(int value) {
        copyOnWrite();
        instance.setX(value);
        return this;
      }
      /**
       * <code>sfixed32 x = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearX() {
        copyOnWrite();
        instance.clearX();
        return this;
      }

      /**
       * <code>sfixed32 y = 2;</code>
       * @return The y.
       */
      @java.lang.Override
      public int getY() {
        return instance.getY();
      }
      /**
       * <code>sfixed32 y = 2;</code>
       * @param value The y to set.
       * @return This builder for chaining.
       */
      public Builder setY(int value) {
        copyOnWrite();
        instance.setY(value);
        return this;
      }
      /**
       * <code>sfixed32 y = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearY() {
        copyOnWrite();
        instance.clearY();
        return this;
      }

      /**
       * <code>fixed32 screen_width = 3;</code>
       * @return The screenWidth.
       */
      @java.lang.Override
      public int getScreenWidth() {
        return instance.getScreenWidth();
      }
      /**
       * <code>fixed32 screen_width = 3;</code>
       * @param value The screenWidth to set.
       * @return This builder for chaining.
       */
      public Builder setScreenWidth(int value) {
        copyOnWrite();
        instance.setScreenWidth(value);
        return this;
      }
      /**
       * <code>fixed32 screen_width = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearScreenWidth() {
        copyOnWrite();
        instance.clearScreenWidth();
        return this;
      }

      /**
       * <code>fixed32 screen_height = 4;</code>
       * @return The screenHeight.
       */
      @java.lang.Override
      public int getScreenHeight() {
        return instance.getScreenHeight();
      }
      /**
       * <code>fixed32 screen_height = 4;</code>
       * @param value The screenHeight to set.
       * @return This builder for chaining.
       */
      public Builder setScreenHeight(int value) {
        copyOnWrite();
        instance.setScreenHeight(value);
        return this;
      }
      /**
       * <code>fixed32 screen_height = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearScreenHeight() {
        copyOnWrite();
        instance.clearScreenHeight();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:inner.types.DevicePosition)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "x_",
              "y_",
              "screenWidth_",
              "screenHeight_",
            };
            java.lang.String info =
                "\u0000\u0004\u0000\u0000\u0001\u0004\u0004\u0000\u0000\u0000\u0001\r\u0002\r\u0003" +
                "\u0006\u0004\u0006";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition> parser = PARSER;
          if (parser == null) {
            synchronized (com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:inner.types.DevicePosition)
    private static final com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition DEFAULT_INSTANCE;
    static {
      DevicePosition defaultInstance = new DevicePosition();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        DevicePosition.class, defaultInstance);
    }

    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<DevicePosition> PARSER;

    public static com.google.protobuf.Parser<DevicePosition> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface DeviceControlOrBuilder extends
      // @@protoc_insertion_point(interface_extends:inner.types.DeviceControl)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.inner.types.DeviceControlType type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <code>.inner.types.DeviceControlType type = 1;</code>
     * @return The type.
     */
    com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlType getType();

    /**
     * <code>string text = 2;</code>
     * @return The text.
     */
    java.lang.String getText();
    /**
     * <code>string text = 2;</code>
     * @return The bytes for text.
     */
    com.google.protobuf.ByteString
        getTextBytes();

    /**
     * <code>.inner.types.DeviceControlMetaState meta_state = 3;</code>
     * @return The enum numeric value on the wire for metaState.
     */
    int getMetaStateValue();
    /**
     * <code>.inner.types.DeviceControlMetaState meta_state = 3;</code>
     * @return The metaState.
     */
    com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlMetaState getMetaState();

    /**
     * <code>.inner.types.DeviceControlAction action = 4;</code>
     * @return The enum numeric value on the wire for action.
     */
    int getActionValue();
    /**
     * <code>.inner.types.DeviceControlAction action = 4;</code>
     * @return The action.
     */
    com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlAction getAction();

    /**
     * <code>.inner.types.DeviceControlKeycode keycode = 5;</code>
     * @return The enum numeric value on the wire for keycode.
     */
    int getKeycodeValue();
    /**
     * <code>.inner.types.DeviceControlKeycode keycode = 5;</code>
     * @return The keycode.
     */
    com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlKeycode getKeycode();

    /**
     * <code>sfixed32 buttons = 6;</code>
     * @return The buttons.
     */
    int getButtons();

    /**
     * <code>sfixed64 pointer_id = 7;</code>
     * @return The pointerId.
     */
    long getPointerId();

    /**
     * <code>float pressure = 8;</code>
     * @return The pressure.
     */
    float getPressure();

    /**
     * <code>.inner.types.DevicePosition position = 9;</code>
     * @return Whether the position field is set.
     */
    boolean hasPosition();
    /**
     * <code>.inner.types.DevicePosition position = 9;</code>
     * @return The position.
     */
    com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition getPosition();

    /**
     * <code>sfixed32 h_scroll = 10;</code>
     * @return The hScroll.
     */
    int getHScroll();

    /**
     * <code>sfixed32 v_scroll = 11;</code>
     * @return The vScroll.
     */
    int getVScroll();

    /**
     * <code>.inner.types.DeviceControlCopyKey copy_key = 12;</code>
     * @return The enum numeric value on the wire for copyKey.
     */
    int getCopyKeyValue();
    /**
     * <code>.inner.types.DeviceControlCopyKey copy_key = 12;</code>
     * @return The copyKey.
     */
    com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlCopyKey getCopyKey();

    /**
     * <code>bool paste = 13;</code>
     * @return The paste.
     */
    boolean getPaste();

    /**
     * <code>sfixed32 repeat = 14;</code>
     * @return The repeat.
     */
    int getRepeat();

    /**
     * <code>sfixed64 sequence = 15;</code>
     * @return The sequence.
     */
    long getSequence();

    /**
     * <pre>
     * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
     * required for ios key input.
     * </pre>
     *
     * <code>string key = 16;</code>
     * @return The key.
     */
    java.lang.String getKey();
    /**
     * <pre>
     * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
     * required for ios key input.
     * </pre>
     *
     * <code>string key = 16;</code>
     * @return The bytes for key.
     */
    com.google.protobuf.ByteString
        getKeyBytes();

    /**
     * <pre>
     * https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp
     * required for ios touch input move time calculation.
     * </pre>
     *
     * <code>fixed64 time_stamp = 17;</code>
     * @return The timeStamp.
     */
    long getTimeStamp();
  }
  /**
   * <pre>
   * reference
   * https://github.com/Genymobile/scrcpy/blob/master/server/src/main/java/com/genymobile/scrcpy/ControlMessage.java
   * </pre>
   *
   * Protobuf type {@code inner.types.DeviceControl}
   */
  public  static final class DeviceControl extends
      com.google.protobuf.GeneratedMessageLite<
          DeviceControl, DeviceControl.Builder> implements
      // @@protoc_insertion_point(message_implements:inner.types.DeviceControl)
      DeviceControlOrBuilder {
    private DeviceControl() {
      text_ = "";
      key_ = "";
    }
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <code>.inner.types.DeviceControlType type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override
    public int getTypeValue() {
      return type_;
    }
    /**
     * <code>.inner.types.DeviceControlType type = 1;</code>
     * @return The type.
     */
    @java.lang.Override
    public com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlType getType() {
      com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlType result = com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlType.forNumber(type_);
      return result == null ? com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlType.UNRECOGNIZED : result;
    }
    /**
     * <code>.inner.types.DeviceControlType type = 1;</code>
     * @param value The enum numeric value on the wire for type to set.
     */
    private void setTypeValue(int value) {
        type_ = value;
    }
    /**
     * <code>.inner.types.DeviceControlType type = 1;</code>
     * @param value The type to set.
     */
    private void setType(com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlType value) {
      type_ = value.getNumber();
      
    }
    /**
     * <code>.inner.types.DeviceControlType type = 1;</code>
     */
    private void clearType() {
      
      type_ = 0;
    }

    public static final int TEXT_FIELD_NUMBER = 2;
    private java.lang.String text_;
    /**
     * <code>string text = 2;</code>
     * @return The text.
     */
    @java.lang.Override
    public java.lang.String getText() {
      return text_;
    }
    /**
     * <code>string text = 2;</code>
     * @return The bytes for text.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTextBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(text_);
    }
    /**
     * <code>string text = 2;</code>
     * @param value The text to set.
     */
    private void setText(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      text_ = value;
    }
    /**
     * <code>string text = 2;</code>
     */
    private void clearText() {
      
      text_ = getDefaultInstance().getText();
    }
    /**
     * <code>string text = 2;</code>
     * @param value The bytes for text to set.
     */
    private void setTextBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      text_ = value.toStringUtf8();
      
    }

    public static final int META_STATE_FIELD_NUMBER = 3;
    private int metaState_;
    /**
     * <code>.inner.types.DeviceControlMetaState meta_state = 3;</code>
     * @return The enum numeric value on the wire for metaState.
     */
    @java.lang.Override
    public int getMetaStateValue() {
      return metaState_;
    }
    /**
     * <code>.inner.types.DeviceControlMetaState meta_state = 3;</code>
     * @return The metaState.
     */
    @java.lang.Override
    public com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlMetaState getMetaState() {
      com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlMetaState result = com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlMetaState.forNumber(metaState_);
      return result == null ? com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlMetaState.UNRECOGNIZED : result;
    }
    /**
     * <code>.inner.types.DeviceControlMetaState meta_state = 3;</code>
     * @param value The enum numeric value on the wire for metaState to set.
     */
    private void setMetaStateValue(int value) {
        metaState_ = value;
    }
    /**
     * <code>.inner.types.DeviceControlMetaState meta_state = 3;</code>
     * @param value The metaState to set.
     */
    private void setMetaState(com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlMetaState value) {
      metaState_ = value.getNumber();
      
    }
    /**
     * <code>.inner.types.DeviceControlMetaState meta_state = 3;</code>
     */
    private void clearMetaState() {
      
      metaState_ = 0;
    }

    public static final int ACTION_FIELD_NUMBER = 4;
    private int action_;
    /**
     * <code>.inner.types.DeviceControlAction action = 4;</code>
     * @return The enum numeric value on the wire for action.
     */
    @java.lang.Override
    public int getActionValue() {
      return action_;
    }
    /**
     * <code>.inner.types.DeviceControlAction action = 4;</code>
     * @return The action.
     */
    @java.lang.Override
    public com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlAction getAction() {
      com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlAction result = com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlAction.forNumber(action_);
      return result == null ? com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlAction.UNRECOGNIZED : result;
    }
    /**
     * <code>.inner.types.DeviceControlAction action = 4;</code>
     * @param value The enum numeric value on the wire for action to set.
     */
    private void setActionValue(int value) {
        action_ = value;
    }
    /**
     * <code>.inner.types.DeviceControlAction action = 4;</code>
     * @param value The action to set.
     */
    private void setAction(com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlAction value) {
      action_ = value.getNumber();
      
    }
    /**
     * <code>.inner.types.DeviceControlAction action = 4;</code>
     */
    private void clearAction() {
      
      action_ = 0;
    }

    public static final int KEYCODE_FIELD_NUMBER = 5;
    private int keycode_;
    /**
     * <code>.inner.types.DeviceControlKeycode keycode = 5;</code>
     * @return The enum numeric value on the wire for keycode.
     */
    @java.lang.Override
    public int getKeycodeValue() {
      return keycode_;
    }
    /**
     * <code>.inner.types.DeviceControlKeycode keycode = 5;</code>
     * @return The keycode.
     */
    @java.lang.Override
    public com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlKeycode getKeycode() {
      com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlKeycode result = com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlKeycode.forNumber(keycode_);
      return result == null ? com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlKeycode.UNRECOGNIZED : result;
    }
    /**
     * <code>.inner.types.DeviceControlKeycode keycode = 5;</code>
     * @param value The enum numeric value on the wire for keycode to set.
     */
    private void setKeycodeValue(int value) {
        keycode_ = value;
    }
    /**
     * <code>.inner.types.DeviceControlKeycode keycode = 5;</code>
     * @param value The keycode to set.
     */
    private void setKeycode(com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlKeycode value) {
      keycode_ = value.getNumber();
      
    }
    /**
     * <code>.inner.types.DeviceControlKeycode keycode = 5;</code>
     */
    private void clearKeycode() {
      
      keycode_ = 0;
    }

    public static final int BUTTONS_FIELD_NUMBER = 6;
    private int buttons_;
    /**
     * <code>sfixed32 buttons = 6;</code>
     * @return The buttons.
     */
    @java.lang.Override
    public int getButtons() {
      return buttons_;
    }
    /**
     * <code>sfixed32 buttons = 6;</code>
     * @param value The buttons to set.
     */
    private void setButtons(int value) {
      
      buttons_ = value;
    }
    /**
     * <code>sfixed32 buttons = 6;</code>
     */
    private void clearButtons() {
      
      buttons_ = 0;
    }

    public static final int POINTER_ID_FIELD_NUMBER = 7;
    private long pointerId_;
    /**
     * <code>sfixed64 pointer_id = 7;</code>
     * @return The pointerId.
     */
    @java.lang.Override
    public long getPointerId() {
      return pointerId_;
    }
    /**
     * <code>sfixed64 pointer_id = 7;</code>
     * @param value The pointerId to set.
     */
    private void setPointerId(long value) {
      
      pointerId_ = value;
    }
    /**
     * <code>sfixed64 pointer_id = 7;</code>
     */
    private void clearPointerId() {
      
      pointerId_ = 0L;
    }

    public static final int PRESSURE_FIELD_NUMBER = 8;
    private float pressure_;
    /**
     * <code>float pressure = 8;</code>
     * @return The pressure.
     */
    @java.lang.Override
    public float getPressure() {
      return pressure_;
    }
    /**
     * <code>float pressure = 8;</code>
     * @param value The pressure to set.
     */
    private void setPressure(float value) {
      
      pressure_ = value;
    }
    /**
     * <code>float pressure = 8;</code>
     */
    private void clearPressure() {
      
      pressure_ = 0F;
    }

    public static final int POSITION_FIELD_NUMBER = 9;
    private com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition position_;
    /**
     * <code>.inner.types.DevicePosition position = 9;</code>
     */
    @java.lang.Override
    public boolean hasPosition() {
      return position_ != null;
    }
    /**
     * <code>.inner.types.DevicePosition position = 9;</code>
     */
    @java.lang.Override
    public com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition getPosition() {
      return position_ == null ? com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition.getDefaultInstance() : position_;
    }
    /**
     * <code>.inner.types.DevicePosition position = 9;</code>
     */
    private void setPosition(com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition value) {
      value.getClass();
  position_ = value;
      
      }
    /**
     * <code>.inner.types.DevicePosition position = 9;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergePosition(com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition value) {
      value.getClass();
  if (position_ != null &&
          position_ != com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition.getDefaultInstance()) {
        position_ =
          com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition.newBuilder(position_).mergeFrom(value).buildPartial();
      } else {
        position_ = value;
      }
      
    }
    /**
     * <code>.inner.types.DevicePosition position = 9;</code>
     */
    private void clearPosition() {  position_ = null;
      
    }

    public static final int H_SCROLL_FIELD_NUMBER = 10;
    private int hScroll_;
    /**
     * <code>sfixed32 h_scroll = 10;</code>
     * @return The hScroll.
     */
    @java.lang.Override
    public int getHScroll() {
      return hScroll_;
    }
    /**
     * <code>sfixed32 h_scroll = 10;</code>
     * @param value The hScroll to set.
     */
    private void setHScroll(int value) {
      
      hScroll_ = value;
    }
    /**
     * <code>sfixed32 h_scroll = 10;</code>
     */
    private void clearHScroll() {
      
      hScroll_ = 0;
    }

    public static final int V_SCROLL_FIELD_NUMBER = 11;
    private int vScroll_;
    /**
     * <code>sfixed32 v_scroll = 11;</code>
     * @return The vScroll.
     */
    @java.lang.Override
    public int getVScroll() {
      return vScroll_;
    }
    /**
     * <code>sfixed32 v_scroll = 11;</code>
     * @param value The vScroll to set.
     */
    private void setVScroll(int value) {
      
      vScroll_ = value;
    }
    /**
     * <code>sfixed32 v_scroll = 11;</code>
     */
    private void clearVScroll() {
      
      vScroll_ = 0;
    }

    public static final int COPY_KEY_FIELD_NUMBER = 12;
    private int copyKey_;
    /**
     * <code>.inner.types.DeviceControlCopyKey copy_key = 12;</code>
     * @return The enum numeric value on the wire for copyKey.
     */
    @java.lang.Override
    public int getCopyKeyValue() {
      return copyKey_;
    }
    /**
     * <code>.inner.types.DeviceControlCopyKey copy_key = 12;</code>
     * @return The copyKey.
     */
    @java.lang.Override
    public com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlCopyKey getCopyKey() {
      com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlCopyKey result = com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlCopyKey.forNumber(copyKey_);
      return result == null ? com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlCopyKey.UNRECOGNIZED : result;
    }
    /**
     * <code>.inner.types.DeviceControlCopyKey copy_key = 12;</code>
     * @param value The enum numeric value on the wire for copyKey to set.
     */
    private void setCopyKeyValue(int value) {
        copyKey_ = value;
    }
    /**
     * <code>.inner.types.DeviceControlCopyKey copy_key = 12;</code>
     * @param value The copyKey to set.
     */
    private void setCopyKey(com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlCopyKey value) {
      copyKey_ = value.getNumber();
      
    }
    /**
     * <code>.inner.types.DeviceControlCopyKey copy_key = 12;</code>
     */
    private void clearCopyKey() {
      
      copyKey_ = 0;
    }

    public static final int PASTE_FIELD_NUMBER = 13;
    private boolean paste_;
    /**
     * <code>bool paste = 13;</code>
     * @return The paste.
     */
    @java.lang.Override
    public boolean getPaste() {
      return paste_;
    }
    /**
     * <code>bool paste = 13;</code>
     * @param value The paste to set.
     */
    private void setPaste(boolean value) {
      
      paste_ = value;
    }
    /**
     * <code>bool paste = 13;</code>
     */
    private void clearPaste() {
      
      paste_ = false;
    }

    public static final int REPEAT_FIELD_NUMBER = 14;
    private int repeat_;
    /**
     * <code>sfixed32 repeat = 14;</code>
     * @return The repeat.
     */
    @java.lang.Override
    public int getRepeat() {
      return repeat_;
    }
    /**
     * <code>sfixed32 repeat = 14;</code>
     * @param value The repeat to set.
     */
    private void setRepeat(int value) {
      
      repeat_ = value;
    }
    /**
     * <code>sfixed32 repeat = 14;</code>
     */
    private void clearRepeat() {
      
      repeat_ = 0;
    }

    public static final int SEQUENCE_FIELD_NUMBER = 15;
    private long sequence_;
    /**
     * <code>sfixed64 sequence = 15;</code>
     * @return The sequence.
     */
    @java.lang.Override
    public long getSequence() {
      return sequence_;
    }
    /**
     * <code>sfixed64 sequence = 15;</code>
     * @param value The sequence to set.
     */
    private void setSequence(long value) {
      
      sequence_ = value;
    }
    /**
     * <code>sfixed64 sequence = 15;</code>
     */
    private void clearSequence() {
      
      sequence_ = 0L;
    }

    public static final int KEY_FIELD_NUMBER = 16;
    private java.lang.String key_;
    /**
     * <pre>
     * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
     * required for ios key input.
     * </pre>
     *
     * <code>string key = 16;</code>
     * @return The key.
     */
    @java.lang.Override
    public java.lang.String getKey() {
      return key_;
    }
    /**
     * <pre>
     * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
     * required for ios key input.
     * </pre>
     *
     * <code>string key = 16;</code>
     * @return The bytes for key.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getKeyBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(key_);
    }
    /**
     * <pre>
     * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
     * required for ios key input.
     * </pre>
     *
     * <code>string key = 16;</code>
     * @param value The key to set.
     */
    private void setKey(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      key_ = value;
    }
    /**
     * <pre>
     * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
     * required for ios key input.
     * </pre>
     *
     * <code>string key = 16;</code>
     */
    private void clearKey() {
      
      key_ = getDefaultInstance().getKey();
    }
    /**
     * <pre>
     * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
     * required for ios key input.
     * </pre>
     *
     * <code>string key = 16;</code>
     * @param value The bytes for key to set.
     */
    private void setKeyBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      key_ = value.toStringUtf8();
      
    }

    public static final int TIME_STAMP_FIELD_NUMBER = 17;
    private long timeStamp_;
    /**
     * <pre>
     * https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp
     * required for ios touch input move time calculation.
     * </pre>
     *
     * <code>fixed64 time_stamp = 17;</code>
     * @return The timeStamp.
     */
    @java.lang.Override
    public long getTimeStamp() {
      return timeStamp_;
    }
    /**
     * <pre>
     * https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp
     * required for ios touch input move time calculation.
     * </pre>
     *
     * <code>fixed64 time_stamp = 17;</code>
     * @param value The timeStamp to set.
     */
    private void setTimeStamp(long value) {
      
      timeStamp_ = value;
    }
    /**
     * <pre>
     * https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp
     * required for ios touch input move time calculation.
     * </pre>
     *
     * <code>fixed64 time_stamp = 17;</code>
     */
    private void clearTimeStamp() {
      
      timeStamp_ = 0L;
    }

    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * reference
     * https://github.com/Genymobile/scrcpy/blob/master/server/src/main/java/com/genymobile/scrcpy/ControlMessage.java
     * </pre>
     *
     * Protobuf type {@code inner.types.DeviceControl}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl, Builder> implements
        // @@protoc_insertion_point(builder_implements:inner.types.DeviceControl)
        com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlOrBuilder {
      // Construct using com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.inner.types.DeviceControlType type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override
      public int getTypeValue() {
        return instance.getTypeValue();
      }
      /**
       * <code>.inner.types.DeviceControlType type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        copyOnWrite();
        instance.setTypeValue(value);
        return this;
      }
      /**
       * <code>.inner.types.DeviceControlType type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlType getType() {
        return instance.getType();
      }
      /**
       * <code>.inner.types.DeviceControlType type = 1;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setType(com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlType value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <code>.inner.types.DeviceControlType type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <code>string text = 2;</code>
       * @return The text.
       */
      @java.lang.Override
      public java.lang.String getText() {
        return instance.getText();
      }
      /**
       * <code>string text = 2;</code>
       * @return The bytes for text.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTextBytes() {
        return instance.getTextBytes();
      }
      /**
       * <code>string text = 2;</code>
       * @param value The text to set.
       * @return This builder for chaining.
       */
      public Builder setText(
          java.lang.String value) {
        copyOnWrite();
        instance.setText(value);
        return this;
      }
      /**
       * <code>string text = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearText() {
        copyOnWrite();
        instance.clearText();
        return this;
      }
      /**
       * <code>string text = 2;</code>
       * @param value The bytes for text to set.
       * @return This builder for chaining.
       */
      public Builder setTextBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTextBytes(value);
        return this;
      }

      /**
       * <code>.inner.types.DeviceControlMetaState meta_state = 3;</code>
       * @return The enum numeric value on the wire for metaState.
       */
      @java.lang.Override
      public int getMetaStateValue() {
        return instance.getMetaStateValue();
      }
      /**
       * <code>.inner.types.DeviceControlMetaState meta_state = 3;</code>
       * @param value The metaState to set.
       * @return This builder for chaining.
       */
      public Builder setMetaStateValue(int value) {
        copyOnWrite();
        instance.setMetaStateValue(value);
        return this;
      }
      /**
       * <code>.inner.types.DeviceControlMetaState meta_state = 3;</code>
       * @return The metaState.
       */
      @java.lang.Override
      public com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlMetaState getMetaState() {
        return instance.getMetaState();
      }
      /**
       * <code>.inner.types.DeviceControlMetaState meta_state = 3;</code>
       * @param value The enum numeric value on the wire for metaState to set.
       * @return This builder for chaining.
       */
      public Builder setMetaState(com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlMetaState value) {
        copyOnWrite();
        instance.setMetaState(value);
        return this;
      }
      /**
       * <code>.inner.types.DeviceControlMetaState meta_state = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMetaState() {
        copyOnWrite();
        instance.clearMetaState();
        return this;
      }

      /**
       * <code>.inner.types.DeviceControlAction action = 4;</code>
       * @return The enum numeric value on the wire for action.
       */
      @java.lang.Override
      public int getActionValue() {
        return instance.getActionValue();
      }
      /**
       * <code>.inner.types.DeviceControlAction action = 4;</code>
       * @param value The action to set.
       * @return This builder for chaining.
       */
      public Builder setActionValue(int value) {
        copyOnWrite();
        instance.setActionValue(value);
        return this;
      }
      /**
       * <code>.inner.types.DeviceControlAction action = 4;</code>
       * @return The action.
       */
      @java.lang.Override
      public com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlAction getAction() {
        return instance.getAction();
      }
      /**
       * <code>.inner.types.DeviceControlAction action = 4;</code>
       * @param value The enum numeric value on the wire for action to set.
       * @return This builder for chaining.
       */
      public Builder setAction(com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlAction value) {
        copyOnWrite();
        instance.setAction(value);
        return this;
      }
      /**
       * <code>.inner.types.DeviceControlAction action = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearAction() {
        copyOnWrite();
        instance.clearAction();
        return this;
      }

      /**
       * <code>.inner.types.DeviceControlKeycode keycode = 5;</code>
       * @return The enum numeric value on the wire for keycode.
       */
      @java.lang.Override
      public int getKeycodeValue() {
        return instance.getKeycodeValue();
      }
      /**
       * <code>.inner.types.DeviceControlKeycode keycode = 5;</code>
       * @param value The keycode to set.
       * @return This builder for chaining.
       */
      public Builder setKeycodeValue(int value) {
        copyOnWrite();
        instance.setKeycodeValue(value);
        return this;
      }
      /**
       * <code>.inner.types.DeviceControlKeycode keycode = 5;</code>
       * @return The keycode.
       */
      @java.lang.Override
      public com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlKeycode getKeycode() {
        return instance.getKeycode();
      }
      /**
       * <code>.inner.types.DeviceControlKeycode keycode = 5;</code>
       * @param value The enum numeric value on the wire for keycode to set.
       * @return This builder for chaining.
       */
      public Builder setKeycode(com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlKeycode value) {
        copyOnWrite();
        instance.setKeycode(value);
        return this;
      }
      /**
       * <code>.inner.types.DeviceControlKeycode keycode = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearKeycode() {
        copyOnWrite();
        instance.clearKeycode();
        return this;
      }

      /**
       * <code>sfixed32 buttons = 6;</code>
       * @return The buttons.
       */
      @java.lang.Override
      public int getButtons() {
        return instance.getButtons();
      }
      /**
       * <code>sfixed32 buttons = 6;</code>
       * @param value The buttons to set.
       * @return This builder for chaining.
       */
      public Builder setButtons(int value) {
        copyOnWrite();
        instance.setButtons(value);
        return this;
      }
      /**
       * <code>sfixed32 buttons = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearButtons() {
        copyOnWrite();
        instance.clearButtons();
        return this;
      }

      /**
       * <code>sfixed64 pointer_id = 7;</code>
       * @return The pointerId.
       */
      @java.lang.Override
      public long getPointerId() {
        return instance.getPointerId();
      }
      /**
       * <code>sfixed64 pointer_id = 7;</code>
       * @param value The pointerId to set.
       * @return This builder for chaining.
       */
      public Builder setPointerId(long value) {
        copyOnWrite();
        instance.setPointerId(value);
        return this;
      }
      /**
       * <code>sfixed64 pointer_id = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearPointerId() {
        copyOnWrite();
        instance.clearPointerId();
        return this;
      }

      /**
       * <code>float pressure = 8;</code>
       * @return The pressure.
       */
      @java.lang.Override
      public float getPressure() {
        return instance.getPressure();
      }
      /**
       * <code>float pressure = 8;</code>
       * @param value The pressure to set.
       * @return This builder for chaining.
       */
      public Builder setPressure(float value) {
        copyOnWrite();
        instance.setPressure(value);
        return this;
      }
      /**
       * <code>float pressure = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearPressure() {
        copyOnWrite();
        instance.clearPressure();
        return this;
      }

      /**
       * <code>.inner.types.DevicePosition position = 9;</code>
       */
      @java.lang.Override
      public boolean hasPosition() {
        return instance.hasPosition();
      }
      /**
       * <code>.inner.types.DevicePosition position = 9;</code>
       */
      @java.lang.Override
      public com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition getPosition() {
        return instance.getPosition();
      }
      /**
       * <code>.inner.types.DevicePosition position = 9;</code>
       */
      public Builder setPosition(com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition value) {
        copyOnWrite();
        instance.setPosition(value);
        return this;
        }
      /**
       * <code>.inner.types.DevicePosition position = 9;</code>
       */
      public Builder setPosition(
          com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition.Builder builderForValue) {
        copyOnWrite();
        instance.setPosition(builderForValue.build());
        return this;
      }
      /**
       * <code>.inner.types.DevicePosition position = 9;</code>
       */
      public Builder mergePosition(com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DevicePosition value) {
        copyOnWrite();
        instance.mergePosition(value);
        return this;
      }
      /**
       * <code>.inner.types.DevicePosition position = 9;</code>
       */
      public Builder clearPosition() {  copyOnWrite();
        instance.clearPosition();
        return this;
      }

      /**
       * <code>sfixed32 h_scroll = 10;</code>
       * @return The hScroll.
       */
      @java.lang.Override
      public int getHScroll() {
        return instance.getHScroll();
      }
      /**
       * <code>sfixed32 h_scroll = 10;</code>
       * @param value The hScroll to set.
       * @return This builder for chaining.
       */
      public Builder setHScroll(int value) {
        copyOnWrite();
        instance.setHScroll(value);
        return this;
      }
      /**
       * <code>sfixed32 h_scroll = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearHScroll() {
        copyOnWrite();
        instance.clearHScroll();
        return this;
      }

      /**
       * <code>sfixed32 v_scroll = 11;</code>
       * @return The vScroll.
       */
      @java.lang.Override
      public int getVScroll() {
        return instance.getVScroll();
      }
      /**
       * <code>sfixed32 v_scroll = 11;</code>
       * @param value The vScroll to set.
       * @return This builder for chaining.
       */
      public Builder setVScroll(int value) {
        copyOnWrite();
        instance.setVScroll(value);
        return this;
      }
      /**
       * <code>sfixed32 v_scroll = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearVScroll() {
        copyOnWrite();
        instance.clearVScroll();
        return this;
      }

      /**
       * <code>.inner.types.DeviceControlCopyKey copy_key = 12;</code>
       * @return The enum numeric value on the wire for copyKey.
       */
      @java.lang.Override
      public int getCopyKeyValue() {
        return instance.getCopyKeyValue();
      }
      /**
       * <code>.inner.types.DeviceControlCopyKey copy_key = 12;</code>
       * @param value The copyKey to set.
       * @return This builder for chaining.
       */
      public Builder setCopyKeyValue(int value) {
        copyOnWrite();
        instance.setCopyKeyValue(value);
        return this;
      }
      /**
       * <code>.inner.types.DeviceControlCopyKey copy_key = 12;</code>
       * @return The copyKey.
       */
      @java.lang.Override
      public com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlCopyKey getCopyKey() {
        return instance.getCopyKey();
      }
      /**
       * <code>.inner.types.DeviceControlCopyKey copy_key = 12;</code>
       * @param value The enum numeric value on the wire for copyKey to set.
       * @return This builder for chaining.
       */
      public Builder setCopyKey(com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControlCopyKey value) {
        copyOnWrite();
        instance.setCopyKey(value);
        return this;
      }
      /**
       * <code>.inner.types.DeviceControlCopyKey copy_key = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearCopyKey() {
        copyOnWrite();
        instance.clearCopyKey();
        return this;
      }

      /**
       * <code>bool paste = 13;</code>
       * @return The paste.
       */
      @java.lang.Override
      public boolean getPaste() {
        return instance.getPaste();
      }
      /**
       * <code>bool paste = 13;</code>
       * @param value The paste to set.
       * @return This builder for chaining.
       */
      public Builder setPaste(boolean value) {
        copyOnWrite();
        instance.setPaste(value);
        return this;
      }
      /**
       * <code>bool paste = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearPaste() {
        copyOnWrite();
        instance.clearPaste();
        return this;
      }

      /**
       * <code>sfixed32 repeat = 14;</code>
       * @return The repeat.
       */
      @java.lang.Override
      public int getRepeat() {
        return instance.getRepeat();
      }
      /**
       * <code>sfixed32 repeat = 14;</code>
       * @param value The repeat to set.
       * @return This builder for chaining.
       */
      public Builder setRepeat(int value) {
        copyOnWrite();
        instance.setRepeat(value);
        return this;
      }
      /**
       * <code>sfixed32 repeat = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepeat() {
        copyOnWrite();
        instance.clearRepeat();
        return this;
      }

      /**
       * <code>sfixed64 sequence = 15;</code>
       * @return The sequence.
       */
      @java.lang.Override
      public long getSequence() {
        return instance.getSequence();
      }
      /**
       * <code>sfixed64 sequence = 15;</code>
       * @param value The sequence to set.
       * @return This builder for chaining.
       */
      public Builder setSequence(long value) {
        copyOnWrite();
        instance.setSequence(value);
        return this;
      }
      /**
       * <code>sfixed64 sequence = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearSequence() {
        copyOnWrite();
        instance.clearSequence();
        return this;
      }

      /**
       * <pre>
       * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
       * required for ios key input.
       * </pre>
       *
       * <code>string key = 16;</code>
       * @return The key.
       */
      @java.lang.Override
      public java.lang.String getKey() {
        return instance.getKey();
      }
      /**
       * <pre>
       * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
       * required for ios key input.
       * </pre>
       *
       * <code>string key = 16;</code>
       * @return The bytes for key.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getKeyBytes() {
        return instance.getKeyBytes();
      }
      /**
       * <pre>
       * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
       * required for ios key input.
       * </pre>
       *
       * <code>string key = 16;</code>
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(
          java.lang.String value) {
        copyOnWrite();
        instance.setKey(value);
        return this;
      }
      /**
       * <pre>
       * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
       * required for ios key input.
       * </pre>
       *
       * <code>string key = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        copyOnWrite();
        instance.clearKey();
        return this;
      }
      /**
       * <pre>
       * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
       * required for ios key input.
       * </pre>
       *
       * <code>string key = 16;</code>
       * @param value The bytes for key to set.
       * @return This builder for chaining.
       */
      public Builder setKeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setKeyBytes(value);
        return this;
      }

      /**
       * <pre>
       * https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp
       * required for ios touch input move time calculation.
       * </pre>
       *
       * <code>fixed64 time_stamp = 17;</code>
       * @return The timeStamp.
       */
      @java.lang.Override
      public long getTimeStamp() {
        return instance.getTimeStamp();
      }
      /**
       * <pre>
       * https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp
       * required for ios touch input move time calculation.
       * </pre>
       *
       * <code>fixed64 time_stamp = 17;</code>
       * @param value The timeStamp to set.
       * @return This builder for chaining.
       */
      public Builder setTimeStamp(long value) {
        copyOnWrite();
        instance.setTimeStamp(value);
        return this;
      }
      /**
       * <pre>
       * https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp
       * required for ios touch input move time calculation.
       * </pre>
       *
       * <code>fixed64 time_stamp = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimeStamp() {
        copyOnWrite();
        instance.clearTimeStamp();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:inner.types.DeviceControl)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "type_",
              "text_",
              "metaState_",
              "action_",
              "keycode_",
              "buttons_",
              "pointerId_",
              "pressure_",
              "position_",
              "hScroll_",
              "vScroll_",
              "copyKey_",
              "paste_",
              "repeat_",
              "sequence_",
              "key_",
              "timeStamp_",
            };
            java.lang.String info =
                "\u0000\u0011\u0000\u0000\u0001\u0011\u0011\u0000\u0000\u0000\u0001\f\u0002\u0208" +
                "\u0003\f\u0004\f\u0005\f\u0006\r\u0007\u000e\b\u0001\t\t\n\r\u000b\r\f\f\r\u0007" +
                "\u000e\r\u000f\u000e\u0010\u0208\u0011\u0005";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl> parser = PARSER;
          if (parser == null) {
            synchronized (com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:inner.types.DeviceControl)
    private static final com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl DEFAULT_INSTANCE;
    static {
      DeviceControl defaultInstance = new DeviceControl();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        DeviceControl.class, defaultInstance);
    }

    public static com.dogu.protocol.generated.inner.types.DeviceControlOuterClass.DeviceControl getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<DeviceControl> PARSER;

    public static com.google.protobuf.Parser<DeviceControl> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
