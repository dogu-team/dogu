//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: inner/types/dc_ida.proto

package com.dogu.protocol.generated.inner.types;

@kotlin.jvm.JvmName("-initializedcIdaSwitchInputBlockParam")
inline fun dcIdaSwitchInputBlockParam(block: com.dogu.protocol.generated.inner.types.DcIdaSwitchInputBlockParamKt.Dsl.() -> kotlin.Unit): com.dogu.protocol.generated.inner.types.DcIda.DcIdaSwitchInputBlockParam =
  com.dogu.protocol.generated.inner.types.DcIdaSwitchInputBlockParamKt.Dsl._create(com.dogu.protocol.generated.inner.types.DcIda.DcIdaSwitchInputBlockParam.newBuilder()).apply { block() }._build()
object DcIdaSwitchInputBlockParamKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: com.dogu.protocol.generated.inner.types.DcIda.DcIdaSwitchInputBlockParam.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.dogu.protocol.generated.inner.types.DcIda.DcIdaSwitchInputBlockParam.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.dogu.protocol.generated.inner.types.DcIda.DcIdaSwitchInputBlockParam = _builder.build()

    /**
     * <code>bool is_block = 1;</code>
     */
    var isBlock: kotlin.Boolean
      @JvmName("getIsBlock")
      get() = _builder.getIsBlock()
      @JvmName("setIsBlock")
      set(value) {
        _builder.setIsBlock(value)
      }
    /**
     * <code>bool is_block = 1;</code>
     */
    fun clearIsBlock() {
      _builder.clearIsBlock()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun com.dogu.protocol.generated.inner.types.DcIda.DcIdaSwitchInputBlockParam.copy(block: com.dogu.protocol.generated.inner.types.DcIdaSwitchInputBlockParamKt.Dsl.() -> kotlin.Unit): com.dogu.protocol.generated.inner.types.DcIda.DcIdaSwitchInputBlockParam =
  com.dogu.protocol.generated.inner.types.DcIdaSwitchInputBlockParamKt.Dsl._create(this.toBuilder()).apply { block() }._build()

