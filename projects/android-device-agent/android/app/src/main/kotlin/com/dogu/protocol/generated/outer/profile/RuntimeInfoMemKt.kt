//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: outer/profile/runtime_info.proto

package com.dogu.protocol.generated.outer.profile;

@kotlin.jvm.JvmName("-initializeruntimeInfoMem")
inline fun runtimeInfoMem(block: com.dogu.protocol.generated.outer.profile.RuntimeInfoMemKt.Dsl.() -> kotlin.Unit): com.dogu.protocol.generated.outer.profile.RuntimeInfoOuterClass.RuntimeInfoMem =
  com.dogu.protocol.generated.outer.profile.RuntimeInfoMemKt.Dsl._create(com.dogu.protocol.generated.outer.profile.RuntimeInfoOuterClass.RuntimeInfoMem.newBuilder()).apply { block() }._build()
object RuntimeInfoMemKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: com.dogu.protocol.generated.outer.profile.RuntimeInfoOuterClass.RuntimeInfoMem.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.dogu.protocol.generated.outer.profile.RuntimeInfoOuterClass.RuntimeInfoMem.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.dogu.protocol.generated.outer.profile.RuntimeInfoOuterClass.RuntimeInfoMem = _builder.build()

    /**
     * <code>string name = 1;</code>
     */
    var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <code>string name = 1;</code>
     */
    fun clearName() {
      _builder.clearName()
    }

    /**
     * <code>fixed64 total = 2;</code>
     */
    var total: kotlin.Long
      @JvmName("getTotal")
      get() = _builder.getTotal()
      @JvmName("setTotal")
      set(value) {
        _builder.setTotal(value)
      }
    /**
     * <code>fixed64 total = 2;</code>
     */
    fun clearTotal() {
      _builder.clearTotal()
    }

    /**
     * <code>fixed64 free = 3;</code>
     */
    var free: kotlin.Long
      @JvmName("getFree")
      get() = _builder.getFree()
      @JvmName("setFree")
      set(value) {
        _builder.setFree(value)
      }
    /**
     * <code>fixed64 free = 3;</code>
     */
    fun clearFree() {
      _builder.clearFree()
    }

    /**
     * <code>fixed64 used = 4;</code>
     */
    var used: kotlin.Long
      @JvmName("getUsed")
      get() = _builder.getUsed()
      @JvmName("setUsed")
      set(value) {
        _builder.setUsed(value)
      }
    /**
     * <code>fixed64 used = 4;</code>
     */
    fun clearUsed() {
      _builder.clearUsed()
    }

    /**
     * <code>fixed64 active = 5;</code>
     */
    var active: kotlin.Long
      @JvmName("getActive")
      get() = _builder.getActive()
      @JvmName("setActive")
      set(value) {
        _builder.setActive(value)
      }
    /**
     * <code>fixed64 active = 5;</code>
     */
    fun clearActive() {
      _builder.clearActive()
    }

    /**
     * <code>fixed64 available = 6;</code>
     */
    var available: kotlin.Long
      @JvmName("getAvailable")
      get() = _builder.getAvailable()
      @JvmName("setAvailable")
      set(value) {
        _builder.setAvailable(value)
      }
    /**
     * <code>fixed64 available = 6;</code>
     */
    fun clearAvailable() {
      _builder.clearAvailable()
    }

    /**
     * <code>fixed64 swaptotal = 7;</code>
     */
    var swaptotal: kotlin.Long
      @JvmName("getSwaptotal")
      get() = _builder.getSwaptotal()
      @JvmName("setSwaptotal")
      set(value) {
        _builder.setSwaptotal(value)
      }
    /**
     * <code>fixed64 swaptotal = 7;</code>
     */
    fun clearSwaptotal() {
      _builder.clearSwaptotal()
    }

    /**
     * <code>fixed64 swapused = 8;</code>
     */
    var swapused: kotlin.Long
      @JvmName("getSwapused")
      get() = _builder.getSwapused()
      @JvmName("setSwapused")
      set(value) {
        _builder.setSwapused(value)
      }
    /**
     * <code>fixed64 swapused = 8;</code>
     */
    fun clearSwapused() {
      _builder.clearSwapused()
    }

    /**
     * <code>fixed64 swapfree = 9;</code>
     */
    var swapfree: kotlin.Long
      @JvmName("getSwapfree")
      get() = _builder.getSwapfree()
      @JvmName("setSwapfree")
      set(value) {
        _builder.setSwapfree(value)
      }
    /**
     * <code>fixed64 swapfree = 9;</code>
     */
    fun clearSwapfree() {
      _builder.clearSwapfree()
    }

    /**
     * <code>bool is_low = 10;</code>
     */
    var isLow: kotlin.Boolean
      @JvmName("getIsLow")
      get() = _builder.getIsLow()
      @JvmName("setIsLow")
      set(value) {
        _builder.setIsLow(value)
      }
    /**
     * <code>bool is_low = 10;</code>
     */
    fun clearIsLow() {
      _builder.clearIsLow()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun com.dogu.protocol.generated.outer.profile.RuntimeInfoOuterClass.RuntimeInfoMem.copy(block: com.dogu.protocol.generated.outer.profile.RuntimeInfoMemKt.Dsl.() -> kotlin.Unit): com.dogu.protocol.generated.outer.profile.RuntimeInfoOuterClass.RuntimeInfoMem =
  com.dogu.protocol.generated.outer.profile.RuntimeInfoMemKt.Dsl._create(this.toBuilder()).apply { block() }._build()

