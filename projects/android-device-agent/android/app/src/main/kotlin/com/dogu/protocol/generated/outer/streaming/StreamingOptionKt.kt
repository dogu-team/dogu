//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: outer/streaming/streaming.proto

package com.dogu.protocol.generated.outer.streaming;

@kotlin.jvm.JvmName("-initializestreamingOption")
inline fun streamingOption(block: com.dogu.protocol.generated.outer.streaming.StreamingOptionKt.Dsl.() -> kotlin.Unit): com.dogu.protocol.generated.outer.streaming.Streaming.StreamingOption =
  com.dogu.protocol.generated.outer.streaming.StreamingOptionKt.Dsl._create(com.dogu.protocol.generated.outer.streaming.Streaming.StreamingOption.newBuilder()).apply { block() }._build()
object StreamingOptionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: com.dogu.protocol.generated.outer.streaming.Streaming.StreamingOption.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.dogu.protocol.generated.outer.streaming.Streaming.StreamingOption.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.dogu.protocol.generated.outer.streaming.Streaming.StreamingOption = _builder.build()

    /**
     * <code>.outer.streaming.ScreenCaptureOption screen = 1;</code>
     */
    var screen: com.dogu.protocol.generated.outer.streaming.ScreencaptureOption.ScreenCaptureOption
      @JvmName("getScreen")
      get() = _builder.getScreen()
      @JvmName("setScreen")
      set(value) {
        _builder.setScreen(value)
      }
    /**
     * <code>.outer.streaming.ScreenCaptureOption screen = 1;</code>
     */
    fun clearScreen() {
      _builder.clearScreen()
    }
    /**
     * <code>.outer.streaming.ScreenCaptureOption screen = 1;</code>
     * @return Whether the screen field is set.
     */
    fun hasScreen(): kotlin.Boolean {
      return _builder.hasScreen()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun com.dogu.protocol.generated.outer.streaming.Streaming.StreamingOption.copy(block: com.dogu.protocol.generated.outer.streaming.StreamingOptionKt.Dsl.() -> kotlin.Unit): com.dogu.protocol.generated.outer.streaming.Streaming.StreamingOption =
  com.dogu.protocol.generated.outer.streaming.StreamingOptionKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val com.dogu.protocol.generated.outer.streaming.Streaming.StreamingOptionOrBuilder.screenOrNull: com.dogu.protocol.generated.outer.streaming.ScreencaptureOption.ScreenCaptureOption?
  get() = if (hasScreen()) getScreen() else null

