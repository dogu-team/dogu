//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: inner/types/cf_gdc_da.proto

package com.dogu.protocol.generated.inner.types;

@kotlin.jvm.JvmName("-initializedataChannelLabel")
inline fun dataChannelLabel(block: com.dogu.protocol.generated.inner.types.DataChannelLabelKt.Dsl.() -> kotlin.Unit): com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelLabel =
  com.dogu.protocol.generated.inner.types.DataChannelLabelKt.Dsl._create(com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelLabel.newBuilder()).apply { block() }._build()
object DataChannelLabelKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelLabel.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelLabel.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelLabel = _builder.build()

    /**
     * <code>string name = 1;</code>
     */
    var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <code>string name = 1;</code>
     */
    fun clearName() {
      _builder.clearName()
    }

    /**
     * <code>.inner.types.DataChannelProtocolDefault default = 2;</code>
     */
    var default: com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelProtocolDefault
      @JvmName("getDefault")
      get() = _builder.getDefault()
      @JvmName("setDefault")
      set(value) {
        _builder.setDefault(value)
      }
    /**
     * <code>.inner.types.DataChannelProtocolDefault default = 2;</code>
     */
    fun clearDefault() {
      _builder.clearDefault()
    }
    /**
     * <code>.inner.types.DataChannelProtocolDefault default = 2;</code>
     * @return Whether the default field is set.
     */
    fun hasDefault(): kotlin.Boolean {
      return _builder.hasDefault()
    }

    /**
     * <code>.inner.types.DataChannelProtocolRelayTcp relay_tcp = 3;</code>
     */
    var relayTcp: com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelProtocolRelayTcp
      @JvmName("getRelayTcp")
      get() = _builder.getRelayTcp()
      @JvmName("setRelayTcp")
      set(value) {
        _builder.setRelayTcp(value)
      }
    /**
     * <code>.inner.types.DataChannelProtocolRelayTcp relay_tcp = 3;</code>
     */
    fun clearRelayTcp() {
      _builder.clearRelayTcp()
    }
    /**
     * <code>.inner.types.DataChannelProtocolRelayTcp relay_tcp = 3;</code>
     * @return Whether the relayTcp field is set.
     */
    fun hasRelayTcp(): kotlin.Boolean {
      return _builder.hasRelayTcp()
    }

    /**
     * <code>.inner.types.DataChannelProtocolDeviceHttp device_http = 4;</code>
     */
    var deviceHttp: com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelProtocolDeviceHttp
      @JvmName("getDeviceHttp")
      get() = _builder.getDeviceHttp()
      @JvmName("setDeviceHttp")
      set(value) {
        _builder.setDeviceHttp(value)
      }
    /**
     * <code>.inner.types.DataChannelProtocolDeviceHttp device_http = 4;</code>
     */
    fun clearDeviceHttp() {
      _builder.clearDeviceHttp()
    }
    /**
     * <code>.inner.types.DataChannelProtocolDeviceHttp device_http = 4;</code>
     * @return Whether the deviceHttp field is set.
     */
    fun hasDeviceHttp(): kotlin.Boolean {
      return _builder.hasDeviceHttp()
    }

    /**
     * <code>.inner.types.DataChannelProtocolDeviceWebSocket device_web_socket = 5;</code>
     */
    var deviceWebSocket: com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelProtocolDeviceWebSocket
      @JvmName("getDeviceWebSocket")
      get() = _builder.getDeviceWebSocket()
      @JvmName("setDeviceWebSocket")
      set(value) {
        _builder.setDeviceWebSocket(value)
      }
    /**
     * <code>.inner.types.DataChannelProtocolDeviceWebSocket device_web_socket = 5;</code>
     */
    fun clearDeviceWebSocket() {
      _builder.clearDeviceWebSocket()
    }
    /**
     * <code>.inner.types.DataChannelProtocolDeviceWebSocket device_web_socket = 5;</code>
     * @return Whether the deviceWebSocket field is set.
     */
    fun hasDeviceWebSocket(): kotlin.Boolean {
      return _builder.hasDeviceWebSocket()
    }
    val protocolCase: com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelLabel.ProtocolCase
      @JvmName("getProtocolCase")
      get() = _builder.getProtocolCase()

    fun clearProtocol() {
      _builder.clearProtocol()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelLabel.copy(block: com.dogu.protocol.generated.inner.types.DataChannelLabelKt.Dsl.() -> kotlin.Unit): com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelLabel =
  com.dogu.protocol.generated.inner.types.DataChannelLabelKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelLabelOrBuilder.defaultOrNull: com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelProtocolDefault?
  get() = if (hasDefault()) getDefault() else null

val com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelLabelOrBuilder.relayTcpOrNull: com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelProtocolRelayTcp?
  get() = if (hasRelayTcp()) getRelayTcp() else null

val com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelLabelOrBuilder.deviceHttpOrNull: com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelProtocolDeviceHttp?
  get() = if (hasDeviceHttp()) getDeviceHttp() else null

val com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelLabelOrBuilder.deviceWebSocketOrNull: com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelProtocolDeviceWebSocket?
  get() = if (hasDeviceWebSocket()) getDeviceWebSocket() else null

