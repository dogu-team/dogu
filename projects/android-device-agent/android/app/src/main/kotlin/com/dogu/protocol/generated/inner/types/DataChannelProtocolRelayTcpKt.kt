//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: inner/types/cf_gdc_da.proto

package com.dogu.protocol.generated.inner.types;

@kotlin.jvm.JvmName("-initializedataChannelProtocolRelayTcp")
inline fun dataChannelProtocolRelayTcp(block: com.dogu.protocol.generated.inner.types.DataChannelProtocolRelayTcpKt.Dsl.() -> kotlin.Unit): com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelProtocolRelayTcp =
  com.dogu.protocol.generated.inner.types.DataChannelProtocolRelayTcpKt.Dsl._create(com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelProtocolRelayTcp.newBuilder()).apply { block() }._build()
object DataChannelProtocolRelayTcpKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelProtocolRelayTcp.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelProtocolRelayTcp.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelProtocolRelayTcp = _builder.build()

    /**
     * <code>uint32 port = 1;</code>
     */
    var port: kotlin.Int
      @JvmName("getPort")
      get() = _builder.getPort()
      @JvmName("setPort")
      set(value) {
        _builder.setPort(value)
      }
    /**
     * <code>uint32 port = 1;</code>
     */
    fun clearPort() {
      _builder.clearPort()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelProtocolRelayTcp.copy(block: com.dogu.protocol.generated.inner.types.DataChannelProtocolRelayTcpKt.Dsl.() -> kotlin.Unit): com.dogu.protocol.generated.inner.types.CfGdcDa.DataChannelProtocolRelayTcp =
  com.dogu.protocol.generated.inner.types.DataChannelProtocolRelayTcpKt.Dsl._create(this.toBuilder()).apply { block() }._build()

