//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: inner/types/dc_da.proto

package com.dogu.protocol.generated.inner.types;

@kotlin.jvm.JvmName("-initializedcDaApplyStreamingOptionParam")
inline fun dcDaApplyStreamingOptionParam(block: com.dogu.protocol.generated.inner.types.DcDaApplyStreamingOptionParamKt.Dsl.() -> kotlin.Unit): com.dogu.protocol.generated.inner.types.DcDa.DcDaApplyStreamingOptionParam =
  com.dogu.protocol.generated.inner.types.DcDaApplyStreamingOptionParamKt.Dsl._create(com.dogu.protocol.generated.inner.types.DcDa.DcDaApplyStreamingOptionParam.newBuilder()).apply { block() }._build()
object DcDaApplyStreamingOptionParamKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: com.dogu.protocol.generated.inner.types.DcDa.DcDaApplyStreamingOptionParam.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.dogu.protocol.generated.inner.types.DcDa.DcDaApplyStreamingOptionParam.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.dogu.protocol.generated.inner.types.DcDa.DcDaApplyStreamingOptionParam = _builder.build()

    /**
     * <code>.outer.streaming.StreamingOption option = 1;</code>
     */
    var option: com.dogu.protocol.generated.outer.streaming.Streaming.StreamingOption
      @JvmName("getOption")
      get() = _builder.getOption()
      @JvmName("setOption")
      set(value) {
        _builder.setOption(value)
      }
    /**
     * <code>.outer.streaming.StreamingOption option = 1;</code>
     */
    fun clearOption() {
      _builder.clearOption()
    }
    /**
     * <code>.outer.streaming.StreamingOption option = 1;</code>
     * @return Whether the option field is set.
     */
    fun hasOption(): kotlin.Boolean {
      return _builder.hasOption()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun com.dogu.protocol.generated.inner.types.DcDa.DcDaApplyStreamingOptionParam.copy(block: com.dogu.protocol.generated.inner.types.DcDaApplyStreamingOptionParamKt.Dsl.() -> kotlin.Unit): com.dogu.protocol.generated.inner.types.DcDa.DcDaApplyStreamingOptionParam =
  com.dogu.protocol.generated.inner.types.DcDaApplyStreamingOptionParamKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val com.dogu.protocol.generated.inner.types.DcDa.DcDaApplyStreamingOptionParamOrBuilder.optionOrNull: com.dogu.protocol.generated.outer.streaming.Streaming.StreamingOption?
  get() = if (hasOption()) getOption() else null

