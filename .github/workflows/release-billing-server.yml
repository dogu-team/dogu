name: ðŸš€release-billing-server
run-name: ðŸš€release-billing-server-${{ github.event.inputs.build_type}}@${{ github.ref_name }}

on:
  workflow_dispatch:
    inputs:
      build_type:
        type: choice
        description: Select the type of build
        options:
          - dev
          - prod

jobs:
  input-validation:
    runs-on: ubuntu-latest

    steps:
      - id: input-validation
        name: input validation
        run: |
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          NC='\033[0m'
          build_type=${{ github.event.inputs.build_type }}

          if [ "$build_type" = "dev" ]; then
            echo "build_type is dev"
          elif [ "$build_type" = "prod" ]; then
            echo "build_type is prod"
          else
            echo -e "${RED}build_type is not valid${NC}"
            exit 1
          fi

  build-billing-server:
    runs-on: ubuntu-latest
    needs: input-validation
    steps:
      - name: docker init
        run: docker system prune --volumes -a -f

      - name: Checkout
        uses: actions/checkout@v3

      - name: DEV Configure AWS credentials
        if: github.event.inputs.build_type == 'dev'
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DOGU_AWS_REGION }}

      - name: PROD Configure AWS credentials
        if: github.event.inputs.build_type == 'prod'
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DOGU_AWS_REGION }}

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          context: .
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ github.event.inputs.build_type }}-billing-server:latest
          platforms: linux/x86_64
          target: billing-server
          file: ./dockerfile.billing

  release-dogu-client-admin-server:
    runs-on: ${{ github.event.inputs.build_type }}-dogu-client-admin-server
    needs: [input-validation, build-billing-server]
    # needs: [input-validation]

    steps:
      - name: Checkout
        uses: Bhacaz/checkout-files@v2
        with:
          files: docker-compose.yml

      - name: DEV Configure AWS credentials
        if: github.event.inputs.build_type == 'dev'
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DOGU_AWS_REGION }}

      - name: PROD Configure AWS credentials
        if: github.event.inputs.build_type == 'prod'
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DOGU_AWS_REGION }}

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: docker init
        run: docker system prune --volumes -a -f

      - name: DEV set .env
        if: github.event.inputs.build_type== 'dev'
        run: |
          sed -i "s|DOGU_CLIENT_ADMIN_RDS_HOST=.*$|DOGU_CLIENT_ADMIN_RDS_HOST=${{secrets.DEV_DOGU_CLIENT_ADMIN_RDS_HOST }}|" ./docker-compose.yml
          sed -i "s|DOGU_CLIENT_ADMIN_RDS_PORT=.*$|DOGU_CLIENT_ADMIN_RDS_PORT=${{secrets.DEV_DOGU_CLIENT_ADMIN_RDS_PORT }}|" ./docker-compose.yml
          sed -i "s|DOGU_CLIENT_ADMIN_RDS_USERNAME=.*$|DOGU_CLIENT_ADMIN_RDS_USERNAME=${{secrets.DEV_DOGU_CLIENT_ADMIN_RDS_USERNAME }}|" ./docker-compose.yml
          sed -i "s|DOGU_CLIENT_ADMIN_RDS_PASSWORD=.*$|DOGU_CLIENT_ADMIN_RDS_PASSWORD=${{secrets.DEV_DOGU_CLIENT_ADMIN_RDS_PASSWORD }}|" ./docker-compose.yml
          sed -i "s|DOGU_CLIENT_ADMIN_RDS_SCHEMA=.*$|DOGU_CLIENT_ADMIN_RDS_SCHEMA=${{secrets.DEV_DOGU_CLIENT_ADMIN_RDS_SCHEMA }}|" ./docker-compose.yml
          sed -i "s|DOGU_CLIENT_ADMIN_RDS_SSL_CONNECTION=.*$|DOGU_CLIENT_ADMIN_RDS_SSL_CONNECTION=${{secrets.DEV_DOGU_CLIENT_ADMIN_RDS_SSL_CONNECTION }}|" ./docker-compose.yml
          sed -i "s|DOGU_CLIENT_ADMIN_API_TOKEN=.*$|DOGU_CLIENT_ADMIN_API_TOKEN=${{secrets.DEV_DOGU_CLIENT_ADMIN_API_TOKEN }}|" ./docker-compose.yml
          sed -i "s|DOGU_CLIENT_ADMIN_RUN_TYPE=.*$|DOGU_CLIENT_ADMIN_RUN_TYPE=development|" ./docker-compose.yml

      - name: PROD set .env
        if: github.event.inputs.build_type == 'prod'
        run: |
          sed -i "s|DOGU_CLIENT_ADMIN_RDS_HOST=.*$|DOGU_CLIENT_ADMIN_RDS_HOST=${{secrets.PROD_DOGU_CLIENT_ADMIN_RDS_HOST }}|" ./docker-compose.yml
          sed -i "s|DOGU_CLIENT_ADMIN_RDS_PORT=.*$|DOGU_CLIENT_ADMIN_RDS_PORT=${{secrets.PROD_DOGU_CLIENT_ADMIN_RDS_PORT }}|" ./docker-compose.yml
          sed -i "s|DOGU_CLIENT_ADMIN_RDS_USERNAME=.*$|DOGU_CLIENT_ADMIN_RDS_USERNAME=${{secrets.PROD_DOGU_CLIENT_ADMIN_RDS_USERNAME }}|" ./docker-compose.yml
          sed -i "s|DOGU_CLIENT_ADMIN_RDS_PASSWORD=.*$|DOGU_CLIENT_ADMIN_RDS_PASSWORD=${{secrets.PROD_DOGU_CLIENT_ADMIN_RDS_PASSWORD }}|" ./docker-compose.yml
          sed -i "s|DOGU_CLIENT_ADMIN_RDS_SCHEMA=.*$|DOGU_CLIENT_ADMIN_RDS_SCHEMA=${{secrets.PROD_DOGU_CLIENT_ADMIN_RDS_SCHEMA }}|" ./docker-compose.yml
          sed -i "s|DOGU_CLIENT_ADMIN_RDS_SSL_CONNECTION=.*$|DOGU_CLIENT_ADMIN_RDS_SSL_CONNECTION=${{secrets.PROD_DOGU_CLIENT_ADMIN_RDS_SSL_CONNECTION }}|" ./docker-compose.yml
          sed -i "s|DOGU_CLIENT_ADMIN_API_TOKEN=.*$|DOGU_CLIENT_ADMIN_API_TOKEN=${{secrets.PROD_DOGU_CLIENT_ADMIN_API_TOKEN }}|" ./docker-compose.yml
          sed -i "s|DOGU_CLIENT_ADMIN_RUN_TYPE=.*$|DOGU_CLIENT_ADMIN_RUN_TYPE=production|" ./docker-compose.yml

      - name: run
        run: |
          docker ps -qa | xargs -r docker rm -f
          docker compose -f docker-compose-billing.yml pull ${{ github.event.inputs.build_type }}-billing-server
          docker compose -f ./docker-compose-billing.yml --verbose up -d ${{ github.event.inputs.build_type }}-billing-server

  # send-slack:
  #   runs-on: ubuntu-latest
  #   needs: release-dogu-client-admin-server
  #   if: ${{ always() }}

  #   steps:
  #     - name: Send Slack
  #       uses: dogu-team/slack@v1.0
  #       with:
  #         template: 'CD'
  #         slack-channel-id: 'C057ML9UH34'
  #         result-status: ${{ needs.release-dogu-client-admin-server.result }}
  #         ignore-notify: false
  #       env:
  #         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
