name: ðŸš€release-billing-server
run-name: ðŸš€release-billing-server-${{ github.event.inputs.build_type}}@${{ github.ref_name }}

on:
  workflow_dispatch:
    inputs:
      build_type:
        type: choice
        description: Select the type of build
        options:
          - dev
          - prod

jobs:
  input-validation:
    runs-on: ubuntu-latest

    steps:
      - id: input-validation
        name: input validation
        run: |
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          NC='\033[0m'
          build_type=${{ github.event.inputs.build_type }}

          if [ "$build_type" = "dev" ]; then
            echo "build_type is dev"
          elif [ "$build_type" = "prod" ]; then
            echo "build_type is prod"
          else
            echo -e "${RED}build_type is not valid${NC}"
            exit 1
          fi

  build-billing-server:
    runs-on: ubuntu-latest
    needs: input-validation
    steps:
      - name: docker init
        run: docker system prune --volumes -a -f

      - name: Checkout
        uses: actions/checkout@v3

      - name: DEV Configure AWS credentials
        if: github.event.inputs.build_type == 'dev'
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: PROD Configure AWS credentials
        if: github.event.inputs.build_type == 'prod'
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          context: .
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ github.event.inputs.build_type }}-billing-server:latest
          platforms: linux/x86_64
          target: billing-server
          file: dockerfile.billing

  release-billing-server:
    runs-on: ${{ github.event.inputs.build_type }}-billing-server
    needs: [input-validation, build-billing-server]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: .
          clean: true
          sparse-checkout: |
            .pnp.cjs
            .pnp.loader.mjs
            .yarnrc.yml
            .yarn
            yarn.lock
            package.json
            turbo.json
            env-generator
            docker-compose-billing.yml

      - name: DEV Configure AWS credentials
        if: github.event.inputs.build_type == 'dev'
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: PROD Configure AWS credentials
        if: github.event.inputs.build_type == 'prod'
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: docker init
        run: docker system prune --volumes -a -f

      - name: .env init
        run: |
          mkdir -p $HOME/.dogu_secret
          echo ${{ secrets.DOGU_ENV_SERVICE_ACCOUNT_KEY }} > $HOME/.dogu_secret/service-account-key.json
          yarn install

      - name: DEV download .env
        if: github.event.inputs.build_type== 'dev'
        run: yarn env:gen development billing-server --cwd $(pwd)

      - name: PROD download .env
        if: github.event.inputs.build_type== 'prod'
        run: yarn env:gen production billing-server --cwd $(pwd)

      - name: run
        run: |
          docker ps -qa | xargs -r docker rm -f
          docker compose -f docker-compose-billing.yml pull ${{ github.event.inputs.build_type }}-billing-server
          docker compose -f ./docker-compose-billing.yml --verbose --env-file .env.local up -d ${{ github.event.inputs.build_type }}-billing-server

  send-slack:
    runs-on: ubuntu-latest
    needs: release-billing-server
    if: ${{ always() }}

    steps:
      - name: Send Slack
        uses: dogu-team/slack@v1.0
        with:
          template: 'CD'
          slack-channel-id: 'C057ML9UH34'
          result-status: ${{ needs.release-billing-server.result }}
          ignore-notify: false
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
