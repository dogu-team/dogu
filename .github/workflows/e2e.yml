name: ðŸ”„e2e

on:
  push:
    branches: ['main']
    paths:
      - '.github/workflows/e2e.yml'
      - 'dogu-actions/**'
      - 'e2e/**'
      - 'nm-space/**'
      - 'packages/**'
      - 'pipeline-samples/**'
      - 'prebuilds/**'
      - 'projects/**'
      - 'scripts/**'
      - '.pnp.cjs'
      - '.pnp.loader.mjs'
      - 'package.json'
      - 'tsconfig.json'
      - 'yarn.lock'
  pull_request:
    branches: ['main']
    paths:
      - '.github/workflows/e2e.yml'
      - 'dogu-actions/**'
      - 'e2e/**'
      - 'nm-space/**'
      - 'packages/**'
      - 'pipeline-samples/**'
      - 'prebuilds/**'
      - 'projects/**'
      - 'scripts/**'
      - '.pnp.cjs'
      - '.pnp.loader.mjs'
      - 'package.json'
      - 'tsconfig.json'
      - 'yarn.lock'
  workflow_dispatch:

jobs:
  e2e:
    strategy:
      max-parallel: 3
      fail-fast: false
      matrix:
        platform: [Windows, macOS]
        arch: [X64, ARM64]

        exclude:
          - platform: Windows
            arch: ARM64

    runs-on: [e2e, '${{ matrix.platform }}', '${{ matrix.arch }}']

    env:
      RUNNER_TOOL_CACHE: ${{ github.workspace }}/runner-tool-cache

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          clean: true

      - uses: actions/setup-go@v3
        with:
          go-version: '1.18'

      - name: Common - Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'

      - name: Common - Setup poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '1.5'

      - name: Run newbie
        run: |
          yarn run newbie:cicd

      - name: Build Projects
        run: |
          yarn workspace dogu run build

      - name: Newbie nm-space
        run: |
          yarn workspace dogu run newbie:nm-space

      - name: Build nm-space
        run: |
          yarn workspace nm-space run build
        working-directory: ./nm-space

      - name: Windows - Powershell - Check
        if: runner.os == 'Windows'
        id: checkpowershell
        run: winget list Microsoft.PowerShell --accept-source-agreements
        continue-on-error: true

      - name: Windows - Powershell - Upgrade
        if: runner.os == 'Windows' && steps.checkpowershell.outcome == 'success'
        run: |
          winget install --id Microsoft.Powershell --source winget --silent
        continue-on-error: true

      - name: Windows - Powershell - Add to Env
        if: runner.os == 'Windows'
        run: |
          "C:\Program Files\PowerShell\7" >> $env:GITHUB_PATH

      - name: Windows - Msys2 - MIGW64 - Setup for cgo
        uses: msys2/setup-msys2@v2
        if: runner.os == 'Windows'
        with:
          msystem: MINGW64
          location: ${{ github.workspace }}
          install: >-
            git
            base-devel
            mingw-w64-x86_64-gcc

      - name: Windows - Setup Cmake
        if: runner.os == 'Windows'
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 3.25.1
          ninjaVersion: 1.11.1

      - name: Macos - Setup Cmake
        if: runner.os == 'macOS'
        run: brew install cmake
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
        continue-on-error: true

      - name: Common - Setup go
        uses: actions/setup-go@v3
        with:
          go-version: '1.18.4'

      - name: Common - Set up JDK 11 for android build
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'

      - name: Common - Setup Android SDK
        uses: android-actions/setup-android@v2.0.10

      - name: create dotEnv
        run: |
          env-generator gen-all e2e

      - name: Download, Build third-party
        run: |
          yarn third-party:download:build

      - name: Run e2e
        if: ${{ success() }}
        run: |
          yarn workspace e2e run util:install-chromedriver && yarn workspace e2e run start:ci

      - name: Upload video
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: 'e2e-${{ matrix.platform }}-${{ matrix.arch }}'
          path: |
            ./e2e/generated/record/screen-${{ runner.os }}-${{github.sha}}.webm

  send-slack:
    runs-on: ubuntu-latest
    needs: e2e
    if: ${{ always() }}

    steps:
      - name: Send Slack
        uses: dogu-team/slack@v1.0
        with:
          template: 'e2e'
          slack-channel-id: 'C03PL9TC44Q'
          result-status: ${{ needs.e2e.result }}
          ignore-notify: ${{ needs.e2e.result == 'success' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
