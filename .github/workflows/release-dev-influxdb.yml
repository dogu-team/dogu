name: ðŸ›«cd-dev-influxdb

on:
  workflow_dispatch:
    inputs:

permissions:
  id-token: write
  contents: read

env:
  DOGU_AWS_REGION: ap-northeast-2

jobs:
  build-dev-influxdb:
    if: github.ref == 'refs/heads/development'
    runs-on: dev-build-influxdb
    steps:
      - name: docker init
        run: docker system prune --volumes -a -f

      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: "1.18"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.DOGU_AWS_REGION }}

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          context: ./dogu
          tags: ${{ steps.login-ecr.outputs.registry }}/dev-influxdb:latest
          platforms: linux/arm64
          target: dev-influxdb

  release-dev-influxdb:
    runs-on: dev-influxdb
    needs: build-dev-influxdb
    defaults:
      run:
        working-directory: ./dogu

    steps:
      - name: Checkout
        uses: Bhacaz/checkout-files@v2
        with:
          files: docker-compose.dev.yml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.DOGU_AWS_REGION }}

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Run
        run: |
          docker compose -f docker-compose.dev.yml rm -f
          docker compose -f docker-compose.dev.yml pull dev-influxdb
          docker compose -f docker-compose.dev.yml up -d dev-influxdb
          docker image prune -f

  send-slack:
    runs-on: ubuntu-latest
    needs: release-dev-influxdb
    if: ${{ always() }}

    steps:
      - name: Send Slack
        uses: dogu-team/slack@v1.0
        with:
          template: "Release"
          slack-channel-id: "C057ML9UH34"
          result-status: ${{ needs.release-dev-influxdb.result }}
          ignore-notify: false
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
