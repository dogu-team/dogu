// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: outer/platform.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Outer_Platform: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case linux // = 1
  case macos // = 10
  case windows // = 20
  case android // = 30
  case ios // = 40
  case ps4 // = 50
  case xbox // = 60
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .linux
    case 10: self = .macos
    case 20: self = .windows
    case 30: self = .android
    case 40: self = .ios
    case 50: self = .ps4
    case 60: self = .xbox
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .linux: return 1
    case .macos: return 10
    case .windows: return 20
    case .android: return 30
    case .ios: return 40
    case .ps4: return 50
    case .xbox: return 60
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Outer_Platform: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Outer_Platform] = [
    .unspecified,
    .linux,
    .macos,
    .windows,
    .android,
    .ios,
    .ps4,
    .xbox,
  ]
}

#endif  // swift(>=4.2)

public enum Outer_Architecture: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case x86 // = 10
  case x64 // = 20
  case arm // = 30
  case arm64 // = 40
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 10: self = .x86
    case 20: self = .x64
    case 30: self = .arm
    case 40: self = .arm64
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .x86: return 10
    case .x64: return 20
    case .arm: return 30
    case .arm64: return 40
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Outer_Architecture: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Outer_Architecture] = [
    .unspecified,
    .x86,
    .x64,
    .arm,
    .arm64,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Outer_Platform: @unchecked Sendable {}
extension Outer_Architecture: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Outer_Platform: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PLATFORM_UNSPECIFIED"),
    1: .same(proto: "PLATFORM_LINUX"),
    10: .same(proto: "PLATFORM_MACOS"),
    20: .same(proto: "PLATFORM_WINDOWS"),
    30: .same(proto: "PLATFORM_ANDROID"),
    40: .same(proto: "PLATFORM_IOS"),
    50: .same(proto: "PLATFORM_PS4"),
    60: .same(proto: "PLATFORM_XBOX"),
  ]
}

extension Outer_Architecture: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ARCHITECTURE_UNSPECIFIED"),
    10: .same(proto: "ARCHITECTURE_X86"),
    20: .same(proto: "ARCHITECTURE_X64"),
    30: .same(proto: "ARCHITECTURE_ARM"),
    40: .same(proto: "ARCHITECTURE_ARM64"),
  ]
}
